2025-04-28 11:12:47,517 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:12:47,516 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:12:47,517 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:12:47,520 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:12:47,520 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:12:47,520 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:12:47,520 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:12:47,522 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:14:48,604 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/mlforecast/forecast.py:752: UserWarning: Please rerun the `fit` method passing a proper value to prediction intervals to compute them.
  warnings.warn(warn_msg, UserWarning)

2025-04-28 11:16:12,011 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/mlforecast/forecast.py:752: UserWarning: Please rerun the `fit` method passing a proper value to prediction intervals to compute them.
  warnings.warn(warn_msg, UserWarning)

2025-04-28 11:18:06,575 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/mlforecast/forecast.py:752: UserWarning: Please rerun the `fit` method passing a proper value to prediction intervals to compute them.
  warnings.warn(warn_msg, UserWarning)

2025-04-28 11:25:06,421 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:25:06,421 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:25:06,421 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:25:06,421 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:25:06,430 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:25:06,430 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:25:06,430 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:25:06,431 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:33:48,475 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:33:48,476 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:33:48,478 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:33:48,480 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:33:48,481 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:33:48,482 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:33:48,521 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:33:48,524 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:35:05,780 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:35:05,781 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:35:05,781 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:35:05,784 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:35:05,785 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:35:05,785 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:35:05,786 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 11:35:05,789 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 18:58:43,371 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 18:58:43,375 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 18:58:43,376 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 18:58:43,378 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 18:58:43,381 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-28 18:58:43,383 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:30:40,870 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:30:40,872 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:30:40,873 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:30:40,876 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:30:40,877 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:30:40,877 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:34:28,802 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:34:28,802 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:34:28,804 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:34:28,808 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:34:28,808 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:34:28,808 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:34:29,124 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:34:29,127 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:36:20,654 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:36:20,658 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:36:20,957 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 01:36:20,958 - ERROR - [Errno 98] Address already in use
2025-04-29 01:36:47,077 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:36:47,081 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:36:47,373 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 01:36:47,374 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 01:36:47,375 - INFO - Started reloader process [459472] using WatchFiles
2025-04-29 01:36:51,311 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:36:51,314 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 01:36:51,633 - INFO - Started server process [459522]
2025-04-29 01:36:51,635 - INFO - Waiting for application startup.
2025-04-29 01:36:51,636 - INFO - Application startup complete.
2025-04-29 01:40:17,957 - INFO - Shutting down
2025-04-29 01:40:18,065 - INFO - Waiting for application shutdown.
2025-04-29 01:40:18,067 - INFO - Application shutdown complete.
2025-04-29 01:40:18,068 - INFO - Finished server process [459522]
2025-04-29 01:40:18,149 - INFO - Stopping reloader process [459472]
2025-04-29 02:04:19,652 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:04:19,661 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:04:19,995 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 02:04:19,996 - ERROR - [Errno 98] Address already in use
2025-04-29 02:04:36,760 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:04:36,763 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:04:37,047 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 02:04:37,048 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 02:04:37,048 - INFO - Started reloader process [470535] using WatchFiles
2025-04-29 02:04:41,089 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:04:41,092 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:04:41,400 - INFO - Started server process [470600]
2025-04-29 02:04:41,402 - INFO - Waiting for application startup.
2025-04-29 02:04:41,403 - INFO - Application startup complete.
2025-04-29 02:15:09,545 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 02:15:09,570 - INFO - Shutting down
2025-04-29 02:15:09,677 - INFO - Waiting for application shutdown.
2025-04-29 02:15:09,679 - INFO - Application shutdown complete.
2025-04-29 02:15:09,680 - INFO - Finished server process [470600]
2025-04-29 02:15:16,665 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:15:16,672 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:15:17,081 - INFO - Started server process [475771]
2025-04-29 02:15:17,083 - INFO - Waiting for application startup.
2025-04-29 02:15:17,084 - INFO - Application startup complete.
2025-04-29 02:15:45,678 - INFO - Shutting down
2025-04-29 02:15:45,786 - INFO - Waiting for application shutdown.
2025-04-29 02:15:45,787 - INFO - Application shutdown complete.
2025-04-29 02:15:45,788 - INFO - Finished server process [475771]
2025-04-29 02:15:45,839 - INFO - Stopping reloader process [470535]
2025-04-29 02:15:54,055 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:15:54,058 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:15:54,334 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 02:15:54,335 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 02:15:54,336 - INFO - Started reloader process [476214] using WatchFiles
2025-04-29 02:15:57,583 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:15:57,585 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:15:57,894 - INFO - Started server process [476266]
2025-04-29 02:15:57,896 - INFO - Waiting for application startup.
2025-04-29 02:15:57,896 - INFO - Application startup complete.
2025-04-29 02:16:38,478 - INFO - Shutting down
2025-04-29 02:16:38,585 - INFO - Waiting for application shutdown.
2025-04-29 02:16:38,589 - INFO - Application shutdown complete.
2025-04-29 02:16:38,594 - INFO - Finished server process [476266]
2025-04-29 02:16:38,659 - INFO - Stopping reloader process [476214]
2025-04-29 02:17:02,651 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:17:02,654 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:17:02,939 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 02:17:02,940 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 02:17:02,940 - INFO - Started reloader process [476933] using WatchFiles
2025-04-29 02:17:06,244 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:17:06,249 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:17:06,524 - INFO - Started server process [476994]
2025-04-29 02:17:06,526 - INFO - Waiting for application startup.
2025-04-29 02:17:06,527 - INFO - Application startup complete.
2025-04-29 02:19:13,868 - INFO - Shutting down
2025-04-29 02:19:13,976 - INFO - Waiting for application shutdown.
2025-04-29 02:19:13,978 - INFO - Application shutdown complete.
2025-04-29 02:19:13,978 - INFO - Finished server process [476994]
2025-04-29 02:19:14,051 - INFO - Stopping reloader process [476933]
2025-04-29 02:19:25,054 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:19:25,058 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:19:25,335 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 02:19:25,336 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 02:19:25,337 - INFO - Started reloader process [478417] using WatchFiles
2025-04-29 02:19:28,785 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:19:28,789 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:19:29,070 - INFO - Started server process [478483]
2025-04-29 02:19:29,072 - INFO - Waiting for application startup.
2025-04-29 02:19:29,073 - INFO - Application startup complete.
2025-04-29 02:30:04,780 - INFO - Shutting down
2025-04-29 02:30:04,887 - INFO - Waiting for application shutdown.
2025-04-29 02:30:04,890 - INFO - Application shutdown complete.
2025-04-29 02:30:04,891 - INFO - Finished server process [478483]
2025-04-29 02:30:04,972 - INFO - Stopping reloader process [478417]
2025-04-29 02:51:44,612 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:51:44,617 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:51:44,914 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 02:51:44,915 - ERROR - [Errno 98] Address already in use
2025-04-29 02:51:54,250 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:51:54,252 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:51:54,521 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 02:51:54,521 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 02:51:54,522 - INFO - Started reloader process [490017] using WatchFiles
2025-04-29 02:51:58,334 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:51:58,338 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:51:58,676 - INFO - Started server process [490067]
2025-04-29 02:51:58,679 - INFO - Waiting for application startup.
2025-04-29 02:51:58,679 - INFO - Application startup complete.
2025-04-29 02:52:03,756 - INFO - Shutting down
2025-04-29 02:52:03,858 - INFO - Waiting for application shutdown.
2025-04-29 02:52:03,859 - INFO - Application shutdown complete.
2025-04-29 02:52:03,859 - INFO - Finished server process [490067]
2025-04-29 02:52:03,919 - INFO - Stopping reloader process [490017]
2025-04-29 02:52:11,309 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:52:11,311 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:52:11,580 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 02:52:11,581 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 02:52:11,581 - INFO - Started reloader process [490246] using WatchFiles
2025-04-29 02:52:14,726 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:52:14,728 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:52:14,993 - INFO - Started server process [490303]
2025-04-29 02:52:14,995 - INFO - Waiting for application startup.
2025-04-29 02:52:14,996 - INFO - Application startup complete.
2025-04-29 02:52:35,892 - INFO - Shutting down
2025-04-29 02:52:35,995 - INFO - Waiting for application shutdown.
2025-04-29 02:52:35,997 - INFO - Application shutdown complete.
2025-04-29 02:52:35,998 - INFO - Finished server process [490303]
2025-04-29 02:52:36,060 - INFO - Stopping reloader process [490246]
2025-04-29 02:53:36,047 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:53:36,051 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:53:36,339 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 02:53:36,341 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 02:53:36,341 - INFO - Started reloader process [491102] using WatchFiles
2025-04-29 02:53:39,710 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:53:39,713 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:53:39,973 - INFO - Started server process [491160]
2025-04-29 02:53:39,975 - INFO - Waiting for application startup.
2025-04-29 02:53:39,975 - INFO - Application startup complete.
2025-04-29 02:54:33,771 - INFO - Shutting down
2025-04-29 02:54:33,882 - INFO - Waiting for application shutdown.
2025-04-29 02:54:33,888 - INFO - Application shutdown complete.
2025-04-29 02:54:33,889 - INFO - Finished server process [491160]
2025-04-29 02:54:33,957 - INFO - Stopping reloader process [491102]
2025-04-29 02:54:53,681 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:54:53,685 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:54:53,969 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 02:54:53,970 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 02:54:53,970 - INFO - Started reloader process [491825] using WatchFiles
2025-04-29 02:54:57,146 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:54:57,148 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 02:54:57,411 - INFO - Started server process [491884]
2025-04-29 02:54:57,413 - INFO - Waiting for application startup.
2025-04-29 02:54:57,414 - INFO - Application startup complete.
2025-04-29 03:09:34,400 - INFO - ('127.0.0.1', 56704) - "WebSocket /ws?password=$2b$12$7cIG/GkVz68SxfD7zwLuQODrcZVjixWe1UyOHLmPoEdjufbdMUftq&type=tv" [accepted]
2025-04-29 03:09:35,130 - INFO - connection open
2025-04-29 03:09:35,461 - INFO - connection closed
2025-04-29 03:09:35,470 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/indexes/base.py", line 3805, in get_loc
    return self._engine.get_loc(casted_key)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "index.pyx", line 167, in pandas._libs.index.IndexEngine.get_loc
  File "index.pyx", line 196, in pandas._libs.index.IndexEngine.get_loc
  File "pandas/_libs/hashtable_class_helper.pxi", line 7081, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas/_libs/hashtable_class_helper.pxi", line 7089, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'y'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 66, in model_training
    NeuralProphetModel("VN10Y", self.data["VN10Y"])
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 55, in __init__
    self.data_processing()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 22, in data_processing
    df["y"] = df["y"] / 100
              ~~^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/frame.py", line 4102, in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/indexes/base.py", line 3812, in get_loc
    raise KeyError(key) from err
KeyError: 'y'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'y'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:13:02,592 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:13:02,640 - INFO - Shutting down
2025-04-29 03:13:02,755 - INFO - Waiting for application shutdown.
2025-04-29 03:13:02,763 - INFO - Application shutdown complete.
2025-04-29 03:13:02,764 - INFO - Finished server process [491884]
2025-04-29 03:13:07,172 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:13:07,176 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:13:07,478 - INFO - Started server process [499837]
2025-04-29 03:13:07,480 - INFO - Waiting for application startup.
2025-04-29 03:13:07,481 - INFO - Application startup complete.
2025-04-29 03:13:15,389 - INFO - ('127.0.0.1', 51688) - "WebSocket /ws?password=$2b$12$FWWW.a8oB3JIL1Uf2sBmLOQcBUZvXKsnS7JIZuxQxYBWv4ON6LjfO&type=tv" [accepted]
2025-04-29 03:13:15,878 - INFO - connection open
2025-04-29 03:13:16,171 - INFO - connection closed
2025-04-29 03:13:16,181 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/indexes/base.py", line 3805, in get_loc
    return self._engine.get_loc(casted_key)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "index.pyx", line 167, in pandas._libs.index.IndexEngine.get_loc
  File "index.pyx", line 196, in pandas._libs.index.IndexEngine.get_loc
  File "pandas/_libs/hashtable_class_helper.pxi", line 7081, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas/_libs/hashtable_class_helper.pxi", line 7089, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'y'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 66, in model_training
    NeuralProphetModel("VN10Y", self.data["VN10Y"])
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 54, in __init__
    self.data_processing()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 22, in data_processing
    df["y"] = df["y"] / 100
              ~~^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/frame.py", line 4102, in __getitem__
    indexer = self.columns.get_loc(key)
              ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/indexes/base.py", line 3812, in get_loc
    raise KeyError(key) from err
KeyError: 'y'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'y'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:14:41,624 - WARNING - WatchFiles detected changes in 'model/MLForecast/main.py'. Reloading...
2025-04-29 03:14:41,689 - INFO - Shutting down
2025-04-29 03:14:41,802 - INFO - Waiting for application shutdown.
2025-04-29 03:14:41,805 - INFO - Application shutdown complete.
2025-04-29 03:14:41,806 - INFO - Finished server process [499837]
2025-04-29 03:14:45,796 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:14:45,800 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:14:46,086 - INFO - Started server process [500751]
2025-04-29 03:14:46,088 - INFO - Waiting for application startup.
2025-04-29 03:14:46,089 - INFO - Application startup complete.
2025-04-29 03:16:08,147 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:16:08,225 - INFO - Shutting down
2025-04-29 03:16:08,332 - INFO - Waiting for application shutdown.
2025-04-29 03:16:08,333 - INFO - Application shutdown complete.
2025-04-29 03:16:08,334 - INFO - Finished server process [500751]
2025-04-29 03:16:13,119 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:16:13,122 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:16:13,445 - INFO - Started server process [501428]
2025-04-29 03:16:13,448 - INFO - Waiting for application startup.
2025-04-29 03:16:13,450 - INFO - Application startup complete.
2025-04-29 03:16:16,003 - INFO - ('127.0.0.1', 40002) - "WebSocket /ws?password=$2b$12$z4xS/MeVMPXAgvG/Xkbh5ecYfEQfzFsCpqfOvxbt4EwscDS2Mb2iu&type=tv" [accepted]
2025-04-29 03:16:16,400 - INFO - connection open
2025-04-29 03:16:16,692 - INFO - connection closed
2025-04-29 03:16:16,704 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 98, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 91, in model_training
    self.model.fit(self.df)
    ^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'fit'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'NoneType' object has no attribute 'fit'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:16:42,734 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:16:42,790 - INFO - Shutting down
2025-04-29 03:16:42,892 - INFO - Waiting for application shutdown.
2025-04-29 03:16:42,893 - INFO - Application shutdown complete.
2025-04-29 03:16:42,894 - INFO - Finished server process [501428]
2025-04-29 03:16:46,822 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:16:46,827 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:16:47,111 - INFO - Started server process [501860]
2025-04-29 03:16:47,114 - INFO - Waiting for application startup.
2025-04-29 03:16:47,115 - INFO - Application startup complete.
2025-04-29 03:17:24,084 - INFO - Shutting down
2025-04-29 03:17:24,193 - INFO - Waiting for application shutdown.
2025-04-29 03:17:24,195 - INFO - Application shutdown complete.
2025-04-29 03:17:24,196 - INFO - Finished server process [501860]
2025-04-29 03:17:24,274 - INFO - Stopping reloader process [491825]
2025-04-29 03:17:35,549 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:17:35,553 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:17:35,828 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 03:17:35,829 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 03:17:35,829 - INFO - Started reloader process [502317] using WatchFiles
2025-04-29 03:17:39,759 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:17:39,762 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:17:40,062 - INFO - Started server process [502384]
2025-04-29 03:17:40,064 - INFO - Waiting for application startup.
2025-04-29 03:17:40,065 - INFO - Application startup complete.
2025-04-29 03:17:44,355 - INFO - ('127.0.0.1', 52652) - "WebSocket /ws?password=$2b$12$XE2fwTYQjGgXseLdJ8JKpu/XKN.btydCwwWwbaKqh8/Mn4y8mxTXq&type=tv" [accepted]
2025-04-29 03:17:44,774 - INFO - connection open
2025-04-29 03:17:45,067 - INFO - connection closed
2025-04-29 03:17:45,075 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 98, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 91, in model_training
    self.model.fit(self.df)
    ^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'fit'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'NoneType' object has no attribute 'fit'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:18:57,588 - INFO - Shutting down
2025-04-29 03:18:57,702 - INFO - Waiting for application shutdown.
2025-04-29 03:18:57,705 - INFO - Application shutdown complete.
2025-04-29 03:18:57,707 - INFO - Finished server process [502384]
2025-04-29 03:18:57,774 - INFO - Stopping reloader process [502317]
2025-04-29 03:19:49,948 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:19:49,952 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:19:50,236 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 03:19:50,237 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 03:19:50,237 - INFO - Started reloader process [503751] using WatchFiles
2025-04-29 03:19:53,746 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:19:53,750 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:19:54,032 - INFO - Started server process [503822]
2025-04-29 03:19:54,034 - INFO - Waiting for application startup.
2025-04-29 03:19:54,035 - INFO - Application startup complete.
2025-04-29 03:20:28,355 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:20:28,391 - INFO - Shutting down
2025-04-29 03:20:28,531 - INFO - Waiting for application shutdown.
2025-04-29 03:20:28,537 - INFO - Application shutdown complete.
2025-04-29 03:20:28,539 - INFO - Finished server process [503822]
2025-04-29 03:20:32,804 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:20:32,809 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:20:33,142 - INFO - Started server process [504177]
2025-04-29 03:20:33,145 - INFO - Waiting for application startup.
2025-04-29 03:20:33,146 - INFO - Application startup complete.
2025-04-29 03:20:51,553 - INFO - ('127.0.0.1', 40036) - "WebSocket /ws?password=$2b$12$urwGpRoTOjo9CUm63ae4leg3y1P7ItnAV131VMBDSXSOd9Md2uWz.&type=tv" [accepted]
2025-04-29 03:20:52,331 - INFO - connection open
2025-04-29 03:20:52,648 - INFO - connection closed
2025-04-29 03:20:52,668 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 99, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 92, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 404, in _check_dataframe
    if len(df) < (model.n_forecasts + model.n_lags) and not future:
                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: unsupported operand type(s) for +: 'NoneType' and 'int'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:25:10,879 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:25:10,944 - INFO - Shutting down
2025-04-29 03:25:11,056 - INFO - Waiting for application shutdown.
2025-04-29 03:25:11,058 - INFO - Application shutdown complete.
2025-04-29 03:25:11,059 - INFO - Finished server process [504177]
2025-04-29 03:25:15,687 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:25:15,690 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:25:15,976 - INFO - Started server process [506395]
2025-04-29 03:25:15,977 - INFO - Waiting for application startup.
2025-04-29 03:25:15,978 - INFO - Application startup complete.
2025-04-29 03:25:31,137 - INFO - ('127.0.0.1', 43280) - "WebSocket /ws?password=$2b$12$iFxxIQFn34Ih235kVYo1dulFX1tZEulloLrFImzA6iDzfFAIowTMu&type=tv" [accepted]
2025-04-29 03:25:31,656 - INFO - connection open
2025-04-29 03:25:31,947 - INFO - connection closed
2025-04-29 03:25:31,960 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 99, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 91, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 404, in _check_dataframe
    if len(df) < (model.n_forecasts + model.n_lags) and not future:
                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: unsupported operand type(s) for +: 'NoneType' and 'int'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:29:00,398 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:29:00,407 - INFO - Shutting down
2025-04-29 03:29:00,514 - INFO - Waiting for application shutdown.
2025-04-29 03:29:00,516 - INFO - Application shutdown complete.
2025-04-29 03:29:00,517 - INFO - Finished server process [506395]
2025-04-29 03:29:04,675 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:29:04,679 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:29:04,979 - INFO - Started server process [508253]
2025-04-29 03:29:04,982 - INFO - Waiting for application startup.
2025-04-29 03:29:04,982 - INFO - Application startup complete.
2025-04-29 03:29:16,552 - INFO - ('127.0.0.1', 56828) - "WebSocket /ws?password=$2b$12$7OajSHn/Ey1Y/6nUt5iy5uxxFWAEbfoi.Hb1DSGrQUxJHHR8uZb9K&type=tv" [accepted]
2025-04-29 03:29:16,983 - INFO - connection open
2025-04-29 03:29:17,281 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:29:17,303 - INFO - connection closed
2025-04-29 03:29:17,312 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 99, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 91, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1062, in fit
    metrics_df = self._train(
                 ^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 2741, in _train
    train_loader = self._init_train_loader(df, num_workers)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 2653, in _init_train_loader
    df = _normalize(df=df, config_normalization=self.config_normalization)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/transform.py", line 32, in _normalize
    df_aux = df_utils.normalize(df_i, data_params).copy(deep=True)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py", line 410, in normalize
    raise ValueError(f"Unexpected column {name} in data")
ValueError: Unexpected column high in data

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Unexpected column high in data

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:31:55,324 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:31:55,430 - INFO - Shutting down
2025-04-29 03:31:55,538 - INFO - Waiting for application shutdown.
2025-04-29 03:31:55,539 - INFO - Application shutdown complete.
2025-04-29 03:31:55,540 - INFO - Finished server process [508253]
2025-04-29 03:32:00,092 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:32:00,097 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:32:00,367 - INFO - Started server process [509764]
2025-04-29 03:32:00,370 - INFO - Waiting for application startup.
2025-04-29 03:32:00,370 - INFO - Application startup complete.
2025-04-29 03:32:26,926 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:32:26,970 - INFO - Shutting down
2025-04-29 03:32:27,076 - INFO - Waiting for application shutdown.
2025-04-29 03:32:27,078 - INFO - Application shutdown complete.
2025-04-29 03:32:27,079 - INFO - Finished server process [509764]
2025-04-29 03:32:31,225 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:32:31,229 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:32:31,508 - INFO - Started server process [510075]
2025-04-29 03:32:31,510 - INFO - Waiting for application startup.
2025-04-29 03:32:31,511 - INFO - Application startup complete.
2025-04-29 03:32:38,478 - INFO - ('127.0.0.1', 34956) - "WebSocket /ws?password=$2b$12$EhFRr4AuDlFKfWZcsxWI6uLjLbUNniLvNo2u7hPC8x4h0WCTtIoGu&type=tv" [accepted]
2025-04-29 03:32:38,901 - INFO - connection open
2025-04-29 03:32:39,181 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:32:39,426 - WARNING - Missing logger folder: /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/lightning_logs
2025-04-29 03:33:09,433 - INFO - connection closed
2025-04-29 03:33:09,476 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 98, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 91, in model_training
    with open(f"{self.OUTPUT_PATH}/{self.type}.pkl", "wb") as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
IsADirectoryError: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:34:29,750 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:34:29,826 - INFO - Shutting down
2025-04-29 03:34:29,934 - INFO - Waiting for application shutdown.
2025-04-29 03:34:29,935 - INFO - Application shutdown complete.
2025-04-29 03:34:29,936 - INFO - Finished server process [510075]
2025-04-29 03:34:34,456 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:34:34,471 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:34:34,802 - INFO - Started server process [511341]
2025-04-29 03:34:34,805 - INFO - Waiting for application startup.
2025-04-29 03:34:34,806 - INFO - Application startup complete.
2025-04-29 03:34:56,865 - INFO - ('127.0.0.1', 42012) - "WebSocket /ws?password=$2b$12$rE9zj9v6fhAQ8mP3o8yTT.LLl3kIsy4NSklsXn.qVxlpIwm9VVd9K&type=tv" [accepted]
2025-04-29 03:34:57,675 - INFO - connection open
2025-04-29 03:34:57,989 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:35:27,087 - INFO - connection closed
2025-04-29 03:35:27,106 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 98, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 91, in model_training
    with open(f"{self.OUTPUT_PATH}/{self.type}.pkl", "wb") as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
IsADirectoryError: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:36:53,638 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:36:53,690 - INFO - Shutting down
2025-04-29 03:36:53,792 - INFO - Waiting for application shutdown.
2025-04-29 03:36:53,794 - INFO - Application shutdown complete.
2025-04-29 03:36:53,794 - INFO - Finished server process [511341]
2025-04-29 03:36:58,432 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:36:58,436 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:36:58,755 - INFO - Started server process [512814]
2025-04-29 03:36:58,758 - INFO - Waiting for application startup.
2025-04-29 03:36:58,759 - INFO - Application startup complete.
2025-04-29 03:37:28,679 - INFO - Shutting down
2025-04-29 03:37:28,790 - INFO - Waiting for application shutdown.
2025-04-29 03:37:28,793 - INFO - Application shutdown complete.
2025-04-29 03:37:28,794 - INFO - Finished server process [512814]
2025-04-29 03:37:28,863 - INFO - Stopping reloader process [503751]
2025-04-29 03:37:43,604 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:37:43,608 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:37:43,882 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 03:37:43,883 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 03:37:43,883 - INFO - Started reloader process [513474] using WatchFiles
2025-04-29 03:37:47,609 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:37:47,613 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:37:47,919 - INFO - Started server process [513530]
2025-04-29 03:37:47,922 - INFO - Waiting for application startup.
2025-04-29 03:37:47,922 - INFO - Application startup complete.
2025-04-29 03:37:52,722 - INFO - ('127.0.0.1', 38314) - "WebSocket /ws?password=$2b$12$y1rHzSstaBYbv7tju9I3CO64jcmEvJzEkv0BrU87X9xJXhDKJru5K&type=tv" [accepted]
2025-04-29 03:37:53,152 - INFO - connection open
2025-04-29 03:37:53,463 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:38:22,847 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:38:22,852 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:38:22,854 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:38:22,865 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 03:38:22,874 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:38:22,876 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:38:22,878 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:38:22,891 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:38:22,892 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:38:22,894 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:38:23,124 - INFO - connection closed
2025-04-29 03:38:23,159 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 99, in model_retrain
    self.model_forecasting()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 111, in model_forecasting
    self.pred.to_excel(f"{self.OUTPUT_PATH}/{self.type}.xlsx")
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/util/_decorators.py", line 333, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/generic.py", line 2417, in to_excel
    formatter.write(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/io/formats/excel.py", line 943, in write
    writer = ExcelWriter(
             ^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/io/excel/_openpyxl.py", line 57, in __init__
    from openpyxl.workbook import Workbook
ModuleNotFoundError: No module named 'openpyxl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: No module named 'openpyxl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:39:10,364 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:39:10,412 - INFO - Shutting down
2025-04-29 03:39:10,516 - INFO - Waiting for application shutdown.
2025-04-29 03:39:10,518 - INFO - Application shutdown complete.
2025-04-29 03:39:10,518 - INFO - Finished server process [513530]
2025-04-29 03:39:14,999 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:39:15,002 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:39:15,297 - INFO - Started server process [514518]
2025-04-29 03:39:15,299 - INFO - Waiting for application startup.
2025-04-29 03:39:15,300 - INFO - Application startup complete.
2025-04-29 03:39:18,047 - INFO - Shutting down
2025-04-29 03:39:18,150 - INFO - Waiting for application shutdown.
2025-04-29 03:39:18,151 - INFO - Application shutdown complete.
2025-04-29 03:39:18,151 - INFO - Finished server process [514518]
2025-04-29 03:39:18,179 - INFO - Stopping reloader process [513474]
2025-04-29 03:39:42,734 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:39:42,737 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:39:43,018 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 03:39:43,019 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 03:39:43,020 - INFO - Started reloader process [514930] using WatchFiles
2025-04-29 03:39:47,137 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:39:47,139 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:39:47,446 - INFO - Started server process [515008]
2025-04-29 03:39:47,448 - INFO - Waiting for application startup.
2025-04-29 03:39:47,449 - INFO - Application startup complete.
2025-04-29 03:39:50,621 - INFO - ('127.0.0.1', 41286) - "WebSocket /ws?password=$2b$12$HSEce0Rxj5KfNc.6sYVtIO9mpLbGhLD6PCTTx57WRmuILejY/dOKu&type=tv" [accepted]
2025-04-29 03:39:50,977 - INFO - connection open
2025-04-29 03:39:51,271 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:40:20,707 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:40:20,711 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:40:20,713 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:40:20,725 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 03:40:20,732 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:40:20,734 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:40:20,736 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:40:20,747 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:40:20,748 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:40:20,750 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:40:21,015 - INFO - connection closed
2025-04-29 03:40:21,032 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 84, in websocket_endpoint
    service.save_forecast(db)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 87, in save_forecast
    for sub_model_name, data in model.forecast.items():
                                ^^^^^^^^^^^^^^
AttributeError: 'NeuralProphetModel' object has no attribute 'forecast'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'NeuralProphetModel' object has no attribute 'forecast'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:43:37,346 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:43:37,382 - INFO - Shutting down
2025-04-29 03:43:37,511 - INFO - Waiting for application shutdown.
2025-04-29 03:43:37,513 - INFO - Application shutdown complete.
2025-04-29 03:43:37,513 - INFO - Finished server process [515008]
2025-04-29 03:43:42,362 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:43:42,365 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:43:42,674 - INFO - Started server process [517033]
2025-04-29 03:43:42,677 - INFO - Waiting for application startup.
2025-04-29 03:43:42,678 - INFO - Application startup complete.
2025-04-29 03:43:44,320 - INFO - ('127.0.0.1', 35510) - "WebSocket /ws?password=$2b$12$8WeLmp0pe2.N1ZzuDv3y7e2oS9hoMMw0bZmi1L61g3SP8Jpk37B2S&type=tv" [accepted]
2025-04-29 03:43:44,696 - INFO - connection open
2025-04-29 03:43:44,986 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:44:13,058 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:44:13,063 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:44:13,065 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:44:13,078 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 03:44:13,086 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:44:13,088 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:44:13,090 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:44:13,107 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:44:13,111 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:44:13,113 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:44:13,378 - INFO - connection closed
2025-04-29 03:44:13,397 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 84, in websocket_endpoint
    service.save_forecast(db)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 124, in save_forecast
    for row in data.itertuples(index=False)
               ^^^^^^^^^^^^^^^
AttributeError: 'dict' object has no attribute 'itertuples'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'dict' object has no attribute 'itertuples'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:48:47,768 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:48:47,862 - INFO - Shutting down
2025-04-29 03:48:47,969 - INFO - Waiting for application shutdown.
2025-04-29 03:48:47,971 - INFO - Application shutdown complete.
2025-04-29 03:48:47,971 - INFO - Finished server process [517033]
2025-04-29 03:48:52,747 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:48:52,750 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:48:53,087 - INFO - Started server process [519601]
2025-04-29 03:48:53,090 - INFO - Waiting for application startup.
2025-04-29 03:48:53,091 - INFO - Application startup complete.
2025-04-29 03:48:54,944 - INFO - ('127.0.0.1', 35622) - "WebSocket /ws?password=$2b$12$OO9q3mIpI565bIefKqmbeOF.6QJU6J0.fu6swIByzucM/lZrKLw36&type=tv" [accepted]
2025-04-29 03:48:55,325 - INFO - connection open
2025-04-29 03:48:55,609 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:49:22,996 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:49:23,001 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:49:23,003 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:49:23,018 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 03:49:23,032 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:49:23,040 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:49:23,047 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:49:23,063 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:49:23,066 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:49:23,068 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:49:23,325 - INFO - connection closed
2025-04-29 03:49:23,346 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 84, in websocket_endpoint
    service.save_forecast(db)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 124, in save_forecast
    for row in data.itertuples(index=False)
               ^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/generic.py", line 6299, in __getattr__
    return object.__getattribute__(self, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Series' object has no attribute 'itertuples'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'Series' object has no attribute 'itertuples'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:53:04,609 - WARNING - WatchFiles detected changes in 'model/MLForecast/main.py'. Reloading...
2025-04-29 03:53:04,691 - INFO - Shutting down
2025-04-29 03:53:04,801 - INFO - Waiting for application shutdown.
2025-04-29 03:53:04,803 - INFO - Application shutdown complete.
2025-04-29 03:53:04,804 - INFO - Finished server process [519601]
2025-04-29 03:53:09,160 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:53:09,163 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:53:09,440 - INFO - Started server process [521813]
2025-04-29 03:53:09,442 - INFO - Waiting for application startup.
2025-04-29 03:53:09,442 - INFO - Application startup complete.
2025-04-29 03:53:57,498 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:53:57,570 - INFO - Shutting down
2025-04-29 03:53:57,678 - INFO - Waiting for application shutdown.
2025-04-29 03:53:57,680 - INFO - Application shutdown complete.
2025-04-29 03:53:57,681 - INFO - Finished server process [521813]
2025-04-29 03:54:02,541 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:54:02,545 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:54:02,824 - INFO - Started server process [522252]
2025-04-29 03:54:02,826 - INFO - Waiting for application startup.
2025-04-29 03:54:02,827 - INFO - Application startup complete.
2025-04-29 03:54:40,385 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:54:40,485 - INFO - Shutting down
2025-04-29 03:54:40,590 - INFO - Waiting for application shutdown.
2025-04-29 03:54:40,592 - INFO - Application shutdown complete.
2025-04-29 03:54:40,592 - INFO - Finished server process [522252]
2025-04-29 03:54:45,105 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:54:45,111 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:54:45,415 - INFO - Started server process [522655]
2025-04-29 03:54:45,418 - INFO - Waiting for application startup.
2025-04-29 03:54:45,418 - INFO - Application startup complete.
2025-04-29 03:54:54,848 - INFO - ('127.0.0.1', 56090) - "WebSocket /ws?password=$2b$12$O8BIEgqqwPBnRf/kB1KEHOsrpYFZlFNQuRpasfqeyoCgMWS9.25yG&type=tv" [accepted]
2025-04-29 03:54:55,287 - INFO - connection open
2025-04-29 03:54:55,590 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:55:25,140 - INFO - connection closed
2025-04-29 03:55:25,157 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 100, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 93, in model_training
    with open(f"{self.OUTPUT_PATH}/{self.type}.pkl", "wb") as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
IsADirectoryError: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:56:34,231 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:56:34,330 - INFO - Shutting down
2025-04-29 03:56:34,443 - INFO - Waiting for application shutdown.
2025-04-29 03:56:34,444 - INFO - Application shutdown complete.
2025-04-29 03:56:34,445 - INFO - Finished server process [522655]
2025-04-29 03:56:38,716 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:56:38,719 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:56:39,043 - INFO - Started server process [523853]
2025-04-29 03:56:39,046 - INFO - Waiting for application startup.
2025-04-29 03:56:39,047 - INFO - Application startup complete.
2025-04-29 03:56:47,924 - INFO - ('127.0.0.1', 32970) - "WebSocket /ws?password=$2b$12$7dCcJxSJUi/A7EBa.y.Y9efwVM6XThb8.usmwJRWh5IYTYyjHbNZu&type=tv" [accepted]
2025-04-29 03:56:48,378 - INFO - connection open
2025-04-29 03:56:48,663 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:57:16,450 - INFO - connection closed
2025-04-29 03:57:16,465 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 100, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 93, in model_training
    with open(f"${self.OUTPUT_PATH}/${self.type}.pkl", "wb") as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '$shared/output/MLForecast/$VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: [Errno 2] No such file or directory: '$shared/output/MLForecast/$VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:58:27,359 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:58:27,421 - INFO - Shutting down
2025-04-29 03:58:27,532 - INFO - Waiting for application shutdown.
2025-04-29 03:58:27,534 - INFO - Application shutdown complete.
2025-04-29 03:58:27,534 - INFO - Finished server process [523853]
2025-04-29 03:58:31,695 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:58:31,699 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:58:31,990 - INFO - Started server process [525036]
2025-04-29 03:58:31,991 - INFO - Waiting for application startup.
2025-04-29 03:58:31,992 - INFO - Application startup complete.
2025-04-29 03:58:39,361 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:58:39,401 - INFO - Shutting down
2025-04-29 03:58:39,502 - INFO - Waiting for application shutdown.
2025-04-29 03:58:39,503 - INFO - Application shutdown complete.
2025-04-29 03:58:39,503 - INFO - Finished server process [525036]
2025-04-29 03:58:43,365 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:58:43,369 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:58:43,647 - INFO - Started server process [525184]
2025-04-29 03:58:43,649 - INFO - Waiting for application startup.
2025-04-29 03:58:43,650 - INFO - Application startup complete.
2025-04-29 03:58:48,795 - INFO - ('127.0.0.1', 59704) - "WebSocket /ws?password=$2b$12$r3h7Y.Bfm4yXdltedwIcueuiHE4bqXy/TCNzeU0QblYYGhsfT4SFC&type=tv" [accepted]
2025-04-29 03:58:49,174 - INFO - connection open
2025-04-29 03:58:49,457 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 03:59:18,138 - INFO - connection closed
2025-04-29 03:59:18,157 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 100, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 93, in model_training
    with open(f"{self.OUTPUT_PATH}/{self.type}.pkl", "wb") as f:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
IsADirectoryError: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 03:59:48,809 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 03:59:48,873 - INFO - Shutting down
2025-04-29 03:59:48,979 - INFO - Waiting for application shutdown.
2025-04-29 03:59:48,987 - INFO - Application shutdown complete.
2025-04-29 03:59:48,989 - INFO - Finished server process [525184]
2025-04-29 03:59:52,867 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:59:52,870 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 03:59:53,143 - INFO - Started server process [526053]
2025-04-29 03:59:53,145 - INFO - Waiting for application startup.
2025-04-29 03:59:53,145 - INFO - Application startup complete.
2025-04-29 04:00:03,814 - INFO - ('127.0.0.1', 34534) - "WebSocket /ws?password=$2b$12$pJ7dYFj8szTu9YxaNVecr.xY1AT2/FhDhd4EUr0X9cu9CKlPqVSOC&type=tv" [accepted]
2025-04-29 04:00:04,230 - INFO - connection open
2025-04-29 04:00:04,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:00:30,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:00:30,529 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:00:30,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:00:30,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 04:00:30,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:00:30,552 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:00:30,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:00:30,566 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:00:30,568 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:00:30,570 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:00:30,763 - INFO - connection closed
2025-04-29 04:00:30,784 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 101, in model_retrain
    self.model_forecasting()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 113, in model_forecasting
    self.pred.to_excel(f"{self.OUTPUT_PATH}/{self.type}.xlsx")
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/util/_decorators.py", line 333, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/generic.py", line 2417, in to_excel
    formatter.write(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/io/formats/excel.py", line 943, in write
    writer = ExcelWriter(
             ^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/io/excel/_openpyxl.py", line 57, in __init__
    from openpyxl.workbook import Workbook
ModuleNotFoundError: No module named 'openpyxl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: No module named 'openpyxl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 04:01:12,847 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 04:01:12,888 - INFO - Shutting down
2025-04-29 04:01:12,998 - INFO - Waiting for application shutdown.
2025-04-29 04:01:13,000 - INFO - Application shutdown complete.
2025-04-29 04:01:13,004 - INFO - Finished server process [526053]
2025-04-29 04:01:17,826 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:01:17,829 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:01:18,113 - INFO - Started server process [527051]
2025-04-29 04:01:18,115 - INFO - Waiting for application startup.
2025-04-29 04:01:18,116 - INFO - Application startup complete.
2025-04-29 04:01:22,998 - INFO - ('127.0.0.1', 43002) - "WebSocket /ws?password=$2b$12$HkSdeV3npT6ptKlGT7tsp.EBtLskhWrMm.p/5NALAcC5GsVwNaqsu&type=tv" [accepted]
2025-04-29 04:01:23,378 - INFO - connection open
2025-04-29 04:01:23,673 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:01:49,858 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:01:49,862 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:01:49,864 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:01:49,877 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 04:01:49,884 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:01:49,886 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:01:49,888 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:01:49,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:01:49,902 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:01:49,904 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:01:50,095 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-04-29 04:01:52,857 - INFO - connection closed
2025-04-29 04:01:52,887 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 84, in websocket_endpoint
    service.save_forecast(db)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 87, in save_forecast
    for sub_model_name, data in model.forecast.items():
                                ^^^^^^^^^^^^^^
AttributeError: 'NeuralProphetModel' object has no attribute 'forecast'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'NeuralProphetModel' object has no attribute 'forecast'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 04:08:41,161 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 04:08:41,196 - INFO - Shutting down
2025-04-29 04:08:41,336 - INFO - Waiting for application shutdown.
2025-04-29 04:08:41,338 - INFO - Application shutdown complete.
2025-04-29 04:08:41,338 - INFO - Finished server process [527051]
2025-04-29 04:08:46,048 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:08:46,052 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:08:46,381 - INFO - Started server process [530736]
2025-04-29 04:08:46,386 - INFO - Waiting for application startup.
2025-04-29 04:08:46,387 - INFO - Application startup complete.
2025-04-29 04:08:53,516 - INFO - ('127.0.0.1', 47264) - "WebSocket /ws?password=$2b$12$.zLNco1TOEULBT70JK2Q5uvywFEXenC6hD4i3KTknBY7P39hzVCSa&type=tv" [accepted]
2025-04-29 04:08:53,927 - INFO - connection open
2025-04-29 04:08:54,211 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:09:21,471 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:09:21,476 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:09:21,478 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:09:21,492 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 04:09:21,500 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:09:21,502 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:09:21,504 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:09:21,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:09:21,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:09:21,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 04:09:21,744 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-04-29 04:09:24,195 - INFO - connection closed
2025-04-29 04:15:49,683 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-04-29 04:15:49,715 - INFO - Shutting down
2025-04-29 04:15:49,825 - INFO - Waiting for application shutdown.
2025-04-29 04:15:49,827 - INFO - Application shutdown complete.
2025-04-29 04:15:49,828 - INFO - Finished server process [530736]
2025-04-29 04:15:54,263 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:15:54,266 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:15:54,547 - INFO - Started server process [534298]
2025-04-29 04:15:54,549 - INFO - Waiting for application startup.
2025-04-29 04:15:54,550 - INFO - Application startup complete.
2025-04-29 04:16:13,407 - INFO - ('127.0.0.1', 55722) - "WebSocket /ws?password=$2b$12$1LTMh.sv733JnaeJtE8vh.iUKAeTeXl.jSQIZ51cKpH5xyZwIcrUO&type=tv" [accepted]
2025-04-29 04:16:13,914 - INFO - connection open
2025-04-29 04:16:14,203 - INFO - connection closed
2025-04-29 04:16:14,211 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 67, in model_training
    NeuralProphetModel("VNINBR", self.data["VNINBR"])
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 40, in __init__
    raise ValueError(
ValueError: Invalid type. Please select one of the following: 'VN10Y', 'USDVND', 'VNINBR'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Invalid type. Please select one of the following: 'VN10Y', 'USDVND', 'VNINBR'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 04:17:59,825 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-04-29 04:17:59,843 - INFO - Shutting down
2025-04-29 04:17:59,950 - INFO - Waiting for application shutdown.
2025-04-29 04:17:59,951 - INFO - Application shutdown complete.
2025-04-29 04:17:59,952 - INFO - Finished server process [534298]
2025-04-29 04:18:04,687 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:18:04,691 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:18:04,972 - INFO - Started server process [535498]
2025-04-29 04:18:04,974 - INFO - Waiting for application startup.
2025-04-29 04:18:04,975 - INFO - Application startup complete.
2025-04-29 04:18:11,814 - INFO - ('127.0.0.1', 47302) - "WebSocket /ws?password=$2b$12$yAFQWRrRsCAyk.1VOtkuRuugoL3aQFwQGYltgMPVJHl.cDUE3JHIy&type=tv" [accepted]
2025-04-29 04:18:12,228 - INFO - connection open
2025-04-29 04:18:12,537 - INFO - connection closed
2025-04-29 04:18:12,546 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 67, in model_training
    NeuralProphetModel("VNINBR", self.data["VNINBR"])
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 40, in __init__
    raise ValueError(
ValueError: Invalid type. Please select one of the following: 'VN10Y', 'USDVND', 'VNINBR'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Invalid type. Please select one of the following: 'VN10Y', 'USDVND', 'VNINBR'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 04:18:52,176 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-04-29 04:18:52,197 - INFO - Shutting down
2025-04-29 04:18:52,299 - INFO - Waiting for application shutdown.
2025-04-29 04:18:52,300 - INFO - Application shutdown complete.
2025-04-29 04:18:52,300 - INFO - Finished server process [535498]
2025-04-29 04:18:56,897 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:18:56,901 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:18:57,195 - INFO - Started server process [536113]
2025-04-29 04:18:57,197 - INFO - Waiting for application startup.
2025-04-29 04:18:57,197 - INFO - Application startup complete.
2025-04-29 04:19:16,310 - INFO - ('127.0.0.1', 35914) - "WebSocket /ws?password=$2b$12$rp9v3IlM7Yehu0sQLqS3J.QIpnyfRQQNZIrUSEYXEFrN78RliVO4O&type=tv" [accepted]
2025-04-29 04:19:16,891 - INFO - connection open
2025-04-29 04:19:17,179 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 04:19:17,184 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 04:19:17,196 - INFO - connection closed
2025-04-29 04:19:17,207 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 100, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 92, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 410, in _check_dataframe
    df, regressors_to_remove, lag_regressors_to_remove = df_utils.check_dataframe(
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py", line 465, in check_dataframe
    raise ValueError("Column ds has duplicate values. Please remove duplicates.")
ValueError: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 04:21:17,621 - INFO - ('127.0.0.1', 48720) - "WebSocket /ws?password=$2b$12$u1JJ1FR.O2TlmliZzo8dse0MJe4CVNJg8f2DnBC7/TvdkxdQeyAEq&type=tv" [accepted]
2025-04-29 04:21:18,656 - INFO - connection open
2025-04-29 04:21:18,955 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 04:21:18,957 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 04:21:18,963 - INFO - connection closed
2025-04-29 04:21:18,973 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 100, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 92, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 410, in _check_dataframe
    df, regressors_to_remove, lag_regressors_to_remove = df_utils.check_dataframe(
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py", line 465, in check_dataframe
    raise ValueError("Column ds has duplicate values. Please remove duplicates.")
ValueError: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 04:22:17,971 - INFO - Shutting down
2025-04-29 04:22:18,079 - INFO - Waiting for application shutdown.
2025-04-29 04:22:18,082 - INFO - Application shutdown complete.
2025-04-29 04:22:18,083 - INFO - Finished server process [536113]
2025-04-29 04:22:18,183 - INFO - Stopping reloader process [514930]
2025-04-29 04:22:42,355 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:22:42,359 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:22:42,628 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 04:22:42,630 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 04:22:42,630 - INFO - Started reloader process [539162] using WatchFiles
2025-04-29 04:22:46,031 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:22:46,034 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:22:46,319 - INFO - Started server process [539249]
2025-04-29 04:22:46,321 - INFO - Waiting for application startup.
2025-04-29 04:22:46,322 - INFO - Application startup complete.
2025-04-29 04:23:17,272 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-04-29 04:23:17,362 - INFO - Shutting down
2025-04-29 04:23:17,465 - INFO - Waiting for application shutdown.
2025-04-29 04:23:17,467 - INFO - Application shutdown complete.
2025-04-29 04:23:17,469 - INFO - Finished server process [539249]
2025-04-29 04:23:21,862 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:23:21,865 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:23:22,168 - INFO - Started server process [539554]
2025-04-29 04:23:22,170 - INFO - Waiting for application startup.
2025-04-29 04:23:22,171 - INFO - Application startup complete.
2025-04-29 04:23:27,115 - INFO - ('127.0.0.1', 52666) - "WebSocket /ws?password=$2b$12$0dhLuMYwG.zM86pNnLAOj.R8BuhTvzFwX976WATid78SbfFeYBBY2&type=tv" [accepted]
2025-04-29 04:23:27,583 - INFO - connection open
2025-04-29 04:24:39,285 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/mlforecast/forecast.py:752: UserWarning: Please rerun the `fit` method passing a proper value to prediction intervals to compute them.
  warnings.warn(warn_msg, UserWarning)

2025-04-29 04:26:08,619 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/mlforecast/forecast.py:752: UserWarning: Please rerun the `fit` method passing a proper value to prediction intervals to compute them.
  warnings.warn(warn_msg, UserWarning)

2025-04-29 04:28:11,424 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/mlforecast/forecast.py:752: UserWarning: Please rerun the `fit` method passing a proper value to prediction intervals to compute them.
  warnings.warn(warn_msg, UserWarning)

2025-04-29 04:28:11,699 - INFO - connection closed
2025-04-29 04:33:03,047 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 04:33:03,127 - INFO - Shutting down
2025-04-29 04:33:03,238 - INFO - Waiting for application shutdown.
2025-04-29 04:33:03,242 - INFO - Application shutdown complete.
2025-04-29 04:33:03,243 - INFO - Finished server process [539554]
2025-04-29 04:33:08,649 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:33:08,654 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:33:08,981 - INFO - Started server process [544140]
2025-04-29 04:33:08,983 - INFO - Waiting for application startup.
2025-04-29 04:33:08,984 - INFO - Application startup complete.
2025-04-29 04:33:36,733 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-04-29 04:33:36,757 - INFO - Shutting down
2025-04-29 04:33:36,860 - INFO - Waiting for application shutdown.
2025-04-29 04:33:36,866 - INFO - Application shutdown complete.
2025-04-29 04:33:36,870 - INFO - Finished server process [544140]
2025-04-29 04:33:41,160 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:33:41,165 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:33:41,445 - INFO - Started server process [544471]
2025-04-29 04:33:41,447 - INFO - Waiting for application startup.
2025-04-29 04:33:41,447 - INFO - Application startup complete.
2025-04-29 04:33:56,722 - INFO - ('127.0.0.1', 35030) - "WebSocket /ws?password=$2b$12$g8upNMhKO7BemTEdDJsls.qvyS1cepz4WvJwLN5t44ZRb4J3EwagO&type=tv" [accepted]
2025-04-29 04:33:57,336 - INFO - connection open
2025-04-29 04:33:57,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 04:33:57,643 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 04:33:57,662 - INFO - connection closed
2025-04-29 04:33:57,672 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 100, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 92, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 410, in _check_dataframe
    df, regressors_to_remove, lag_regressors_to_remove = df_utils.check_dataframe(
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py", line 465, in check_dataframe
    raise ValueError("Column ds has duplicate values. Please remove duplicates.")
ValueError: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 04:42:43,682 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 04:42:43,711 - INFO - Shutting down
2025-04-29 04:42:43,820 - INFO - Waiting for application shutdown.
2025-04-29 04:42:43,821 - INFO - Application shutdown complete.
2025-04-29 04:42:43,822 - INFO - Finished server process [544471]
2025-04-29 04:42:48,600 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:42:48,604 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:42:48,887 - INFO - Started server process [548571]
2025-04-29 04:42:48,891 - INFO - Waiting for application startup.
2025-04-29 04:42:48,891 - INFO - Application startup complete.
2025-04-29 04:43:03,370 - INFO - ('127.0.0.1', 35424) - "WebSocket /ws?password=$2b$12$MnesA/BZ9q1AfkW5xvlV0uqNn0vn6swWpy6kKDd3Vg.IpEYkwfPrG&type=tv" [accepted]
2025-04-29 04:43:04,018 - INFO - connection open
2025-04-29 04:43:04,471 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 04:43:04,481 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 04:43:04,511 - INFO - connection closed
2025-04-29 04:43:04,525 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 102, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 94, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 405, in _check_dataframe
    raise ValueError(
ValueError: Dataframe has less than n_forecasts + n_lags rows. Forecasting not possible. Please either use a larger dataset, or adjust the model parameters.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Dataframe has less than n_forecasts + n_lags rows. Forecasting not possible. Please either use a larger dataset, or adjust the model parameters.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 04:49:02,457 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 04:49:02,515 - INFO - Shutting down
2025-04-29 04:49:02,625 - INFO - Waiting for application shutdown.
2025-04-29 04:49:02,626 - INFO - Application shutdown complete.
2025-04-29 04:49:02,627 - INFO - Finished server process [548571]
2025-04-29 04:49:07,954 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:49:07,959 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 04:49:08,295 - INFO - Started server process [551555]
2025-04-29 04:49:08,298 - INFO - Waiting for application startup.
2025-04-29 04:49:08,299 - INFO - Application startup complete.
2025-04-29 04:49:16,663 - INFO - ('127.0.0.1', 36334) - "WebSocket /ws?password=$2b$12$nI8B52zhYXk0dSirp9fhZeWLD8rwcEyc70fnaZpIik/AtmfO9omK6&type=tv" [accepted]
2025-04-29 04:49:17,113 - INFO - connection open
2025-04-29 04:49:17,390 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 04:49:17,397 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 04:49:17,410 - INFO - connection closed
2025-04-29 04:49:17,420 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 102, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 94, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 405, in _check_dataframe
    raise ValueError(
ValueError: Dataframe has less than n_forecasts + n_lags rows. Forecasting not possible. Please either use a larger dataset, or adjust the model parameters.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Dataframe has less than n_forecasts + n_lags rows. Forecasting not possible. Please either use a larger dataset, or adjust the model parameters.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 06:20:17,707 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 06:20:17,730 - INFO - Shutting down
2025-04-29 06:20:17,839 - INFO - Waiting for application shutdown.
2025-04-29 06:20:17,841 - INFO - Application shutdown complete.
2025-04-29 06:20:17,843 - INFO - Finished server process [551555]
2025-04-29 06:20:22,756 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:20:22,760 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:20:23,065 - INFO - Started server process [554469]
2025-04-29 06:20:23,068 - INFO - Waiting for application startup.
2025-04-29 06:20:23,069 - INFO - Application startup complete.
2025-04-29 06:20:35,475 - INFO - ('127.0.0.1', 57446) - "WebSocket /ws?password=$2b$12$JVCz4YQjXDC4GX8/RiVar.QfkcnOt3CZpdbXOE1D93WxxbEjpqEYS&type=tv" [accepted]
2025-04-29 06:20:36,256 - INFO - connection open
2025-04-29 06:20:36,628 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:20:36,636 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:20:36,653 - INFO - connection closed
2025-04-29 06:20:36,662 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 102, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 94, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 405, in _check_dataframe
    raise ValueError(
ValueError: Dataframe has less than n_forecasts + n_lags rows. Forecasting not possible. Please either use a larger dataset, or adjust the model parameters.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Dataframe has less than n_forecasts + n_lags rows. Forecasting not possible. Please either use a larger dataset, or adjust the model parameters.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 06:21:59,489 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 06:21:59,528 - INFO - Shutting down
2025-04-29 06:21:59,640 - INFO - Waiting for application shutdown.
2025-04-29 06:21:59,641 - INFO - Application shutdown complete.
2025-04-29 06:21:59,643 - INFO - Finished server process [554469]
2025-04-29 06:22:04,993 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:22:04,997 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:22:05,307 - INFO - Started server process [555475]
2025-04-29 06:22:05,310 - INFO - Waiting for application startup.
2025-04-29 06:22:05,311 - INFO - Application startup complete.
2025-04-29 06:22:08,166 - INFO - ('127.0.0.1', 39180) - "WebSocket /ws?password=$2b$12$RAFFN9BEgGRFfxM5CcE6x.Ept4GNlyxh8Xk9If2myYEk9Csz6dNqS&type=tv" [accepted]
2025-04-29 06:22:08,595 - INFO - connection open
2025-04-29 06:22:08,881 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:22:08,892 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:22:08,915 - INFO - connection closed
2025-04-29 06:22:08,927 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 102, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 94, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 405, in _check_dataframe
    raise ValueError(
ValueError: Dataframe has less than n_forecasts + n_lags rows. Forecasting not possible. Please either use a larger dataset, or adjust the model parameters.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Dataframe has less than n_forecasts + n_lags rows. Forecasting not possible. Please either use a larger dataset, or adjust the model parameters.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 06:24:57,702 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 06:24:57,743 - INFO - Shutting down
2025-04-29 06:24:57,854 - INFO - Waiting for application shutdown.
2025-04-29 06:24:57,856 - INFO - Application shutdown complete.
2025-04-29 06:24:57,858 - INFO - Finished server process [555475]
2025-04-29 06:25:02,610 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:25:02,613 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:25:02,917 - INFO - Started server process [556923]
2025-04-29 06:25:02,920 - INFO - Waiting for application startup.
2025-04-29 06:25:02,920 - INFO - Application startup complete.
2025-04-29 06:25:09,332 - INFO - ('127.0.0.1', 36730) - "WebSocket /ws?password=$2b$12$44on3046ThYVb5f9GhSbHeOgIL79L67z7gU/ArWslXkwYqztVRIg.&type=tv" [accepted]
2025-04-29 06:25:09,886 - INFO - connection open
2025-04-29 06:25:10,181 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:25:10,196 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:25:10,212 - INFO - connection closed
2025-04-29 06:25:10,230 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 103, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 95, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 405, in _check_dataframe
    raise ValueError(
ValueError: Dataframe has less than n_forecasts + n_lags rows. Forecasting not possible. Please either use a larger dataset, or adjust the model parameters.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Dataframe has less than n_forecasts + n_lags rows. Forecasting not possible. Please either use a larger dataset, or adjust the model parameters.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 06:26:13,208 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 06:26:13,292 - INFO - Shutting down
2025-04-29 06:26:13,405 - INFO - Waiting for application shutdown.
2025-04-29 06:26:13,417 - INFO - Application shutdown complete.
2025-04-29 06:26:13,420 - INFO - Finished server process [556923]
2025-04-29 06:26:18,155 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:26:18,158 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:26:18,537 - INFO - Started server process [557665]
2025-04-29 06:26:18,540 - INFO - Waiting for application startup.
2025-04-29 06:26:18,541 - INFO - Application startup complete.
2025-04-29 06:26:43,396 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 06:26:43,474 - INFO - Shutting down
2025-04-29 06:26:43,577 - INFO - Waiting for application shutdown.
2025-04-29 06:26:43,578 - INFO - Application shutdown complete.
2025-04-29 06:26:43,579 - INFO - Finished server process [557665]
2025-04-29 06:26:48,285 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:26:48,290 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:26:48,624 - INFO - Started server process [557968]
2025-04-29 06:26:48,628 - INFO - Waiting for application startup.
2025-04-29 06:26:48,629 - INFO - Application startup complete.
2025-04-29 06:26:52,069 - INFO - ('127.0.0.1', 36146) - "WebSocket /ws?password=$2b$12$tCnIwd5VTi6DvmIGsbs0cel8rMr3WF7n/AxL0o9lt/jAUfQYiQN4.&type=tv" [accepted]
2025-04-29 06:26:52,645 - INFO - connection open
2025-04-29 06:26:52,966 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:26:52,979 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:30: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:26:52,996 - INFO - connection closed
2025-04-29 06:26:53,010 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 101, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 93, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 410, in _check_dataframe
    df, regressors_to_remove, lag_regressors_to_remove = df_utils.check_dataframe(
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py", line 465, in check_dataframe
    raise ValueError("Column ds has duplicate values. Please remove duplicates.")
ValueError: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 06:28:01,547 - INFO - Shutting down
2025-04-29 06:28:01,669 - INFO - Waiting for application shutdown.
2025-04-29 06:28:01,672 - INFO - Application shutdown complete.
2025-04-29 06:28:01,673 - INFO - Finished server process [557968]
2025-04-29 06:28:01,763 - INFO - Stopping reloader process [539162]
2025-04-29 06:28:14,435 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:28:14,438 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:28:14,720 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 06:28:14,722 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 06:28:14,723 - INFO - Started reloader process [558850] using WatchFiles
2025-04-29 06:28:18,735 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:28:18,738 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:28:19,033 - INFO - Started server process [558918]
2025-04-29 06:28:19,035 - INFO - Waiting for application startup.
2025-04-29 06:28:19,035 - INFO - Application startup complete.
2025-04-29 06:28:32,975 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 06:28:33,008 - INFO - Shutting down
2025-04-29 06:28:33,111 - INFO - Waiting for application shutdown.
2025-04-29 06:28:33,113 - INFO - Application shutdown complete.
2025-04-29 06:28:33,113 - INFO - Finished server process [558918]
2025-04-29 06:28:38,614 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:28:38,617 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:28:38,939 - INFO - Started server process [559124]
2025-04-29 06:28:38,942 - INFO - Waiting for application startup.
2025-04-29 06:28:38,943 - INFO - Application startup complete.
2025-04-29 06:28:42,716 - INFO - ('127.0.0.1', 35424) - "WebSocket /ws?password=$2b$12$FhFxnudGRcETg7Ko3IWJoOr/REVEsMYaIkViHl1o5XzP.102sTdYC&type=tv" [accepted]
2025-04-29 06:28:43,161 - INFO - connection open
2025-04-29 06:28:43,448 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:31: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:28:43,462 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:31: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:28:43,477 - INFO - connection closed
2025-04-29 06:28:43,484 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 102, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 94, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 410, in _check_dataframe
    df, regressors_to_remove, lag_regressors_to_remove = df_utils.check_dataframe(
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py", line 465, in check_dataframe
    raise ValueError("Column ds has duplicate values. Please remove duplicates.")
ValueError: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 06:57:22,524 - INFO - Shutting down
2025-04-29 06:57:22,632 - INFO - Waiting for application shutdown.
2025-04-29 06:57:22,634 - INFO - Application shutdown complete.
2025-04-29 06:57:22,635 - INFO - Finished server process [559124]
2025-04-29 06:57:22,758 - INFO - Stopping reloader process [558850]
2025-04-29 06:57:36,424 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:57:36,428 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:57:36,709 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 06:57:36,710 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 06:57:36,710 - INFO - Started reloader process [571939] using WatchFiles
2025-04-29 06:57:40,976 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:57:40,980 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 06:57:41,273 - INFO - Started server process [571995]
2025-04-29 06:57:41,276 - INFO - Waiting for application startup.
2025-04-29 06:57:41,276 - INFO - Application startup complete.
2025-04-29 06:57:51,524 - INFO - ('127.0.0.1', 40254) - "WebSocket /ws?password=$2b$12$UfkoWCN6wkiA598iaYWbfuRH/V87kwad25IMj0LpctdXy8zM2swd.&type=tv" [accepted]
2025-04-29 06:57:52,149 - INFO - connection open
2025-04-29 06:57:52,465 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:31: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:57:52,478 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py:31: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.
  df = df.fillna(method="bfill")

2025-04-29 06:57:52,494 - INFO - connection closed
2025-04-29 06:57:52,509 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 102, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 94, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1016, in fit
    df = _check_dataframe(self, df, check_y=True, exogenous=True)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 410, in _check_dataframe
    df, regressors_to_remove, lag_regressors_to_remove = df_utils.check_dataframe(
                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py", line 465, in check_dataframe
    raise ValueError("Column ds has duplicate values. Please remove duplicates.")
ValueError: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Column ds has duplicate values. Please remove duplicates.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 07:07:44,073 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 07:07:44,132 - INFO - Shutting down
2025-04-29 07:07:44,246 - INFO - Waiting for application shutdown.
2025-04-29 07:07:44,248 - INFO - Application shutdown complete.
2025-04-29 07:07:44,251 - INFO - Finished server process [571995]
2025-04-29 07:07:48,425 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:07:48,428 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:07:48,703 - INFO - Started server process [576544]
2025-04-29 07:07:48,705 - INFO - Waiting for application startup.
2025-04-29 07:07:48,706 - INFO - Application startup complete.
2025-04-29 07:07:57,839 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 07:07:57,845 - INFO - Shutting down
2025-04-29 07:07:57,946 - INFO - Waiting for application shutdown.
2025-04-29 07:07:57,947 - INFO - Application shutdown complete.
2025-04-29 07:07:57,947 - INFO - Finished server process [576544]
2025-04-29 07:08:01,568 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:08:01,572 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:08:01,864 - INFO - Started server process [576703]
2025-04-29 07:08:01,866 - INFO - Waiting for application startup.
2025-04-29 07:08:01,867 - INFO - Application startup complete.
2025-04-29 07:08:08,176 - INFO - ('127.0.0.1', 56248) - "WebSocket /ws?password=$2b$12$mRzk9Zg/8MRS75x0lTo0JeL5CP7VQ5fTSarHT7EnGlEuKbhdZZo0K&type=tv" [accepted]
2025-04-29 07:08:08,610 - INFO - connection open
2025-04-29 07:08:08,933 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 07:08:08,944 - INFO - connection closed
2025-04-29 07:08:08,952 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 101, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 93, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1018, in fit
    df = _handle_missing_data(
         ^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 496, in _handle_missing_data
    df_grouped = df.groupby("ID").apply(lambda x: x.set_index("ds").resample(freq).asfreq()).drop(columns=["ID"])
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/groupby/groupby.py", line 1824, in apply
    result = self._python_apply_general(f, self._selected_obj)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/groupby/groupby.py", line 1885, in _python_apply_general
    values, mutated = self._grouper.apply_groupwise(f, data, self.axis)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/groupby/ops.py", line 919, in apply_groupwise
    res = f(group)
          ^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 496, in <lambda>
    df_grouped = df.groupby("ID").apply(lambda x: x.set_index("ds").resample(freq).asfreq()).drop(columns=["ID"])
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/generic.py", line 9771, in resample
    return get_resampler(
           ^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 2050, in get_resampler
    return tg._get_resampler(obj, kind=kind)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 2231, in _get_resampler
    return DatetimeIndexResampler(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 187, in __init__
    self.binner, self._grouper = self._get_binner()
                                 ^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 252, in _get_binner
    binner, bins, binlabels = self._get_binner_for_time()
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 1741, in _get_binner_for_time
    return self._timegrouper._get_time_bins(self.ax)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 2329, in _get_time_bins
    bins = lib.generate_bins_dt64(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "lib.pyx", line 887, in pandas._libs.lib.generate_bins_dt64
ValueError: Invalid length for values or for binner

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Invalid length for values or for binner

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 07:12:17,470 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 07:12:17,541 - INFO - Shutting down
2025-04-29 07:12:17,648 - INFO - Waiting for application shutdown.
2025-04-29 07:12:17,649 - INFO - Application shutdown complete.
2025-04-29 07:12:17,650 - INFO - Finished server process [576703]
2025-04-29 07:12:22,242 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:12:22,245 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:12:22,530 - INFO - Started server process [578755]
2025-04-29 07:12:22,532 - INFO - Waiting for application startup.
2025-04-29 07:12:22,532 - INFO - Application startup complete.
2025-04-29 07:19:39,449 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 07:19:39,521 - INFO - Shutting down
2025-04-29 07:19:39,631 - INFO - Waiting for application shutdown.
2025-04-29 07:19:39,632 - INFO - Application shutdown complete.
2025-04-29 07:19:39,633 - INFO - Finished server process [578755]
2025-04-29 07:19:44,038 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:19:44,041 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:19:44,332 - INFO - Started server process [581961]
2025-04-29 07:19:44,334 - INFO - Waiting for application startup.
2025-04-29 07:19:44,334 - INFO - Application startup complete.
2025-04-29 07:20:03,461 - INFO - ('127.0.0.1', 56586) - "WebSocket /ws?password=$2b$12$S1U6nRPOP.2TxuIFApGKPOBKAbn47dduJHtvfM/ZZ5ByQS3u70Adu&type=tv" [accepted]
2025-04-29 07:20:03,940 - INFO - connection open
2025-04-29 07:20:04,254 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 07:20:04,264 - INFO - connection closed
2025-04-29 07:20:04,272 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 71, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 102, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 94, in model_training
    self.model.fit(self.df)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1018, in fit
    df = _handle_missing_data(
         ^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 496, in _handle_missing_data
    df_grouped = df.groupby("ID").apply(lambda x: x.set_index("ds").resample(freq).asfreq()).drop(columns=["ID"])
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/groupby/groupby.py", line 1824, in apply
    result = self._python_apply_general(f, self._selected_obj)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/groupby/groupby.py", line 1885, in _python_apply_general
    values, mutated = self._grouper.apply_groupwise(f, data, self.axis)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/groupby/ops.py", line 919, in apply_groupwise
    res = f(group)
          ^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 496, in <lambda>
    df_grouped = df.groupby("ID").apply(lambda x: x.set_index("ds").resample(freq).asfreq()).drop(columns=["ID"])
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/generic.py", line 9771, in resample
    return get_resampler(
           ^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 2050, in get_resampler
    return tg._get_resampler(obj, kind=kind)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 2231, in _get_resampler
    return DatetimeIndexResampler(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 187, in __init__
    self.binner, self._grouper = self._get_binner()
                                 ^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 252, in _get_binner
    binner, bins, binlabels = self._get_binner_for_time()
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 1741, in _get_binner_for_time
    return self._timegrouper._get_time_bins(self.ax)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/resample.py", line 2329, in _get_time_bins
    bins = lib.generate_bins_dt64(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "lib.pyx", line 887, in pandas._libs.lib.generate_bins_dt64
ValueError: Invalid length for values or for binner

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Invalid length for values or for binner

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-04-29 07:30:36,648 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 07:30:36,734 - INFO - Shutting down
2025-04-29 07:30:36,853 - INFO - Waiting for application shutdown.
2025-04-29 07:30:36,854 - INFO - Application shutdown complete.
2025-04-29 07:30:36,855 - INFO - Finished server process [581961]
2025-04-29 07:30:40,960 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:30:40,963 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:30:41,232 - INFO - Started server process [585916]
2025-04-29 07:30:41,234 - INFO - Waiting for application startup.
2025-04-29 07:30:41,235 - INFO - Application startup complete.
2025-04-29 07:30:41,263 - INFO - Stopping reloader process [571939]
2025-04-29 07:30:49,688 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:30:49,691 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:30:50,027 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 07:30:50,028 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 07:30:50,029 - INFO - Started reloader process [586063] using WatchFiles
2025-04-29 07:30:53,367 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:30:53,369 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 07:30:53,655 - INFO - Started server process [586119]
2025-04-29 07:30:53,657 - INFO - Waiting for application startup.
2025-04-29 07:30:53,657 - INFO - Application startup complete.
2025-04-29 07:31:04,878 - INFO - ('127.0.0.1', 49128) - "WebSocket /ws?password=$2b$12$ritTjavx.oEYhbL4ee58OeDiUzL/KsO9xgE83hRCiYO.6Nnbnl852&type=tv" [accepted]
2025-04-29 07:31:05,488 - INFO - connection open
2025-04-29 07:31:05,807 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 08:08:25,489 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 08:08:25,497 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 08:08:25,503 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 08:08:25,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 08:08:25,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 08:08:25,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 08:08:25,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 08:08:25,575 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 08:08:25,579 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 08:08:25,582 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 08:08:25,805 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,805 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,809 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,810 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,811 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,812 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,812 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,812 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,812 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,813 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,817 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,817 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,819 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,819 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,820 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,821 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,821 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,822 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,822 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,823 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,823 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,823 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,824 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,824 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,825 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,826 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,827 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,828 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,829 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,829 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,830 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,830 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,831 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,831 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,832 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,833 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,833 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,834 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,834 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,835 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,836 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,836 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,837 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,837 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,838 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,839 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,839 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,839 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,840 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,841 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,841 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,841 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,842 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,843 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,843 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,844 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,845 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,846 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,847 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,848 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,849 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,850 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,851 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,852 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,854 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,855 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,855 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,856 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,857 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,857 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,857 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,858 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,858 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,859 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,859 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,860 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,860 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,860 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,861 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,861 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,862 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,862 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,862 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,862 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,863 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,863 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,864 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,864 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,864 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,864 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,865 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,865 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,866 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,866 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,866 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,867 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,867 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,868 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,868 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,868 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,869 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,869 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,870 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,870 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,871 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,871 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,872 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,873 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,874 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,875 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,876 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,876 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,877 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,878 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,879 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,880 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,881 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,883 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,883 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,884 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:25,885 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,101 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,102 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,102 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,102 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,103 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,103 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,103 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,104 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,105 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,106 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,106 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,106 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,107 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,107 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,108 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,109 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,109 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,110 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,110 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,111 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,111 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,111 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,112 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,112 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,113 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,113 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,113 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,114 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,114 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,114 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,115 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,115 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,115 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,116 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,117 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,118 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,118 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,118 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,119 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,119 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,120 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,120 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,121 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,121 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,121 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,122 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,122 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,122 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,124 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,125 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,126 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,126 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,127 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,127 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,128 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,128 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,129 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,130 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,130 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,130 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,131 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,131 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,132 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,132 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,133 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,133 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,134 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,134 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,134 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,136 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,137 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,138 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,139 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,139 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,140 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,141 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,141 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,142 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,143 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,143 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,144 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,144 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,145 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,145 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,146 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,146 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,146 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,147 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,147 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,148 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,148 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,149 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,149 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,149 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,149 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,150 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,174 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,175 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,176 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,176 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,176 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,177 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,177 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,178 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,179 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,179 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,180 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,180 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,181 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,181 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,183 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,183 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,184 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,184 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,185 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,185 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,186 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,187 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,188 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,189 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,191 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,194 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,195 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,198 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,201 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,202 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,205 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,205 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,206 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,206 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,207 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,208 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,209 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,209 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,209 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,210 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,211 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,212 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,212 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,212 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,213 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,214 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,215 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,216 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,217 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,217 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,218 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,220 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,224 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,225 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,225 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,226 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,226 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,227 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,227 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,228 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,228 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,230 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,235 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,236 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,236 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,237 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,238 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,239 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,240 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,240 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,241 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,241 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,242 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,242 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,243 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,243 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,244 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,245 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,246 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,247 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,248 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,248 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,249 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,250 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,253 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,254 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,255 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,255 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,256 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,257 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,258 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,259 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,260 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,261 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,261 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,262 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,264 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,265 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,266 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,266 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,267 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,502 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,504 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,504 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,505 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,506 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,507 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,508 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,509 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,512 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,513 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,525 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,528 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,529 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,530 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,544 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,546 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,546 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,546 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,548 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,551 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,551 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,552 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,552 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,553 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,553 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,555 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,555 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,556 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,557 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,558 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,560 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,560 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,561 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,561 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,562 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,563 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,563 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,564 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,565 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,566 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,567 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,568 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,569 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,570 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,570 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,571 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,572 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,573 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,574 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 08:08:26,597 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-04-29 08:08:26,597 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-04-29 08:08:28,415 - INFO - connection closed
2025-04-29 08:43:16,633 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 08:43:16,640 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 08:43:16,913 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 08:43:16,914 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 08:43:16,915 - INFO - Started reloader process [6494] using WatchFiles
2025-04-29 08:43:20,091 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 08:43:20,093 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 08:43:20,376 - INFO - Started server process [6534]
2025-04-29 08:43:20,379 - INFO - Waiting for application startup.
2025-04-29 08:43:20,379 - INFO - Application startup complete.
2025-04-29 08:45:42,337 - INFO - ('127.0.0.1', 51502) - "WebSocket /ws?password=$2b$12$ZrtjdhVtjZ7J5af3NvWg/.v.8oLy7lH8wnFlsj2W6iyeFkGgdSH7C&type=tv" [accepted]
2025-04-29 08:45:42,758 - INFO - connection open
2025-04-29 08:45:43,057 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:22:55,785 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:22:55,790 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:22:55,792 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:22:55,809 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 09:22:55,813 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:22:55,815 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:22:55,816 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:22:55,826 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:22:55,828 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:22:55,830 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:22:55,958 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,958 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,958 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,958 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,959 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,959 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,960 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,960 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,960 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,960 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,961 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,961 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,961 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,961 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,962 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,962 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,962 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,963 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,963 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,963 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,964 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,964 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,965 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,966 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,967 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,967 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,968 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,968 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,968 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,969 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,969 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,969 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,970 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,970 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,970 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,971 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,971 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,971 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,972 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,972 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,973 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,973 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,973 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,974 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,974 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,974 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,980 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,980 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,980 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,981 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,982 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,982 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,983 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,983 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,983 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,983 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,984 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,984 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,984 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,985 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,985 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,985 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,986 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,986 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,986 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,987 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,987 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,987 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,987 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,988 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,988 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,988 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,988 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,988 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,989 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,989 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,989 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,989 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,989 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,990 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,990 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,990 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,990 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,996 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,996 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,996 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,997 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,997 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,999 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:55,999 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,000 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,000 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,001 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,001 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,001 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,002 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,002 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,002 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,002 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,003 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,003 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,007 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,007 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,008 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,008 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,008 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,009 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,011 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,012 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,013 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,013 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,014 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,014 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,015 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,015 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,016 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,016 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,016 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,016 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,017 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,017 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,017 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,018 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,018 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,018 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,019 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,019 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,019 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,020 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,020 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,021 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,022 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,023 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,023 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,023 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,024 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,024 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,024 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,025 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,594 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,595 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,595 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,596 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,597 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,600 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,600 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,601 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,602 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,603 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,604 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,605 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,606 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,606 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,607 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,607 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,607 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,608 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,609 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,612 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,613 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,614 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,614 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,615 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,615 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,615 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,616 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,616 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,617 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,617 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,617 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,618 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,618 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,619 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,619 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,620 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,621 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,622 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,622 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,623 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,624 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,624 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,625 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,625 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,625 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,626 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,626 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,627 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,627 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,628 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,629 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,629 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,630 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,630 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,631 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,631 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,631 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,632 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,632 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,633 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,634 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,635 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,635 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,636 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,636 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,637 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,637 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,638 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,638 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,640 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,640 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,641 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,641 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,641 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,642 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,642 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,643 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,643 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,644 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,644 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,645 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,645 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,645 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,646 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,646 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,646 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,647 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,647 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,648 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,648 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,649 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,649 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,735 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,736 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,736 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,737 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,737 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,738 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,738 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,738 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,739 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,739 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,739 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,740 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,742 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,743 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,744 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,745 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,747 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,748 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,749 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,750 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,751 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,751 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,752 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,752 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,753 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,754 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,756 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,757 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,757 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,758 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,758 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,759 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,760 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,760 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,762 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,762 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,763 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,763 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,763 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,764 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,764 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,765 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,765 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,767 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,768 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,769 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,769 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,770 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,770 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,771 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,771 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,772 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,774 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,774 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,775 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,775 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,776 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,776 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,777 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,777 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,778 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,778 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,779 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,779 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,780 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,781 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,782 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,782 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,783 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,784 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,784 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,784 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,785 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,785 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,786 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,787 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,787 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,788 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,788 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,788 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,789 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,789 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,790 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,791 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,791 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,791 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,792 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,792 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,793 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,793 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,794 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,795 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,796 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,796 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,796 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,797 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,797 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,797 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,798 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,799 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,799 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,800 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,850 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,851 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,851 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,852 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,853 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,854 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,855 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,855 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,855 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,855 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,856 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,858 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,858 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,859 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,860 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,860 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,860 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,861 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,861 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,862 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,864 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,864 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,865 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,865 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,866 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,866 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,867 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,867 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,868 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,868 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,869 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,869 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,870 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,870 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,870 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,870 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,871 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,871 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,872 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,872 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,873 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,873 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,873 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,874 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,874 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,874 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,875 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,875 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,876 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,876 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,877 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,877 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,878 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,879 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,881 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,882 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,883 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,884 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,884 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,885 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,885 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,886 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,886 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,887 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,887 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,888 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,889 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,890 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 09:22:56,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-04-29 09:22:56,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-04-29 09:22:58,480 - INFO - connection closed
2025-04-29 09:27:45,006 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-04-29 09:27:45,087 - INFO - Shutting down
2025-04-29 09:27:45,188 - INFO - Waiting for application shutdown.
2025-04-29 09:27:45,189 - INFO - Application shutdown complete.
2025-04-29 09:27:45,189 - INFO - Finished server process [6534]
2025-04-29 09:27:47,956 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-04-29 09:27:50,609 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:27:50,618 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:27:50,894 - INFO - Started server process [30665]
2025-04-29 09:27:50,896 - INFO - Waiting for application startup.
2025-04-29 09:27:50,897 - INFO - Application startup complete.
2025-04-29 09:27:54,433 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:27:54,436 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:27:54,712 - INFO - Started server process [30740]
2025-04-29 09:27:54,714 - INFO - Waiting for application startup.
2025-04-29 09:27:54,714 - INFO - Application startup complete.
2025-04-29 09:28:25,931 - INFO - ('127.0.0.1', 53850) - "WebSocket /ws?password=$2b$12$02bf.gTcKZb4ntWaZy5Jv.D/gNb9l.Td2wMwli8HKJyO3vzxmymHK&type=tv" [accepted]
2025-04-29 09:28:26,273 - INFO - connection open
2025-04-29 09:28:26,557 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:28:54,192 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:28:54,194 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:28:54,196 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:28:54,206 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 09:28:54,212 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:28:54,214 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:28:54,216 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:28:54,228 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:28:54,230 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:28:54,232 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:28:54,426 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-04-29 09:28:56,749 - INFO - connection closed
2025-04-29 09:49:06,347 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 09:49:06,430 - INFO - Shutting down
2025-04-29 09:49:06,533 - INFO - Waiting for application shutdown.
2025-04-29 09:49:06,534 - INFO - Application shutdown complete.
2025-04-29 09:49:06,534 - INFO - Finished server process [30740]
2025-04-29 09:49:12,473 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:49:12,479 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:49:12,794 - INFO - Started server process [40862]
2025-04-29 09:49:12,795 - INFO - Waiting for application startup.
2025-04-29 09:49:12,796 - INFO - Application startup complete.
2025-04-29 09:49:14,315 - INFO - Shutting down
2025-04-29 09:49:14,416 - INFO - Waiting for application shutdown.
2025-04-29 09:49:14,417 - INFO - Application shutdown complete.
2025-04-29 09:49:14,419 - INFO - Finished server process [40862]
2025-04-29 09:49:14,465 - INFO - Stopping reloader process [6494]
2025-04-29 09:49:30,282 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:49:30,284 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:49:30,550 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 09:49:30,551 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 09:49:30,551 - INFO - Started reloader process [41135] using WatchFiles
2025-04-29 09:49:34,012 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:49:34,014 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:49:34,301 - INFO - Started server process [41215]
2025-04-29 09:49:34,303 - INFO - Waiting for application startup.
2025-04-29 09:49:34,304 - INFO - Application startup complete.
2025-04-29 09:49:43,467 - INFO - ('127.0.0.1', 58622) - "WebSocket /ws?password=$2b$12$oCwKn9QBk7Hqg.E.nyubE.eLNLWlzJz038aDNYwipK4qPkE7DO1ue&type=tv" [accepted]
2025-04-29 09:49:43,837 - INFO - connection open
2025-04-29 09:49:44,126 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:50:12,048 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:50:12,050 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:50:12,053 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:50:12,062 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 09:50:12,068 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:50:12,070 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:50:12,072 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:50:12,083 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:50:12,086 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:50:12,087 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:50:12,264 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-04-29 09:50:14,749 - INFO - connection closed
2025-04-29 09:51:07,763 - INFO - ('127.0.0.1', 47004) - "WebSocket /ws?password=$2b$12$U68509vwI1tBqLOPwzjoz.jUBASRRNrXe8eTCyTzKgy850H7CLiE.&type=tv" [accepted]
2025-04-29 09:51:08,178 - INFO - connection open
2025-04-29 09:51:08,461 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning:

Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.


2025-04-29 09:51:36,821 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning:

Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.


2025-04-29 09:51:36,823 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning:

Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.


2025-04-29 09:51:36,825 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning:

Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.


2025-04-29 09:51:36,835 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning:

The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.


2025-04-29 09:51:36,841 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning:

Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.


2025-04-29 09:51:36,842 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning:

Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.


2025-04-29 09:51:36,844 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning:

Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.


2025-04-29 09:51:36,856 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning:

Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.


2025-04-29 09:51:36,858 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning:

Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.


2025-04-29 09:51:36,859 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning:

Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.


2025-04-29 09:51:37,045 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning:

The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result


2025-04-29 09:51:38,552 - INFO - connection closed
2025-04-29 09:53:56,111 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 09:53:56,133 - INFO - Shutting down
2025-04-29 09:53:56,236 - INFO - Waiting for application shutdown.
2025-04-29 09:53:56,237 - INFO - Application shutdown complete.
2025-04-29 09:53:56,237 - INFO - Finished server process [41215]
2025-04-29 09:54:11,288 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-04-29 09:54:14,747 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:54:14,750 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:54:15,023 - INFO - Started server process [44938]
2025-04-29 09:54:15,025 - INFO - Waiting for application startup.
2025-04-29 09:54:15,025 - INFO - Application startup complete.
2025-04-29 09:54:20,115 - INFO - Shutting down
2025-04-29 09:54:20,217 - INFO - Waiting for application shutdown.
2025-04-29 09:54:20,218 - INFO - Application shutdown complete.
2025-04-29 09:54:20,219 - INFO - Finished server process [44938]
2025-04-29 09:54:20,253 - INFO - Stopping reloader process [41135]
2025-04-29 09:55:18,878 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:55:18,882 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:55:19,154 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 09:55:19,155 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 09:55:19,155 - INFO - Started reloader process [45954] using WatchFiles
2025-04-29 09:55:22,795 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:55:22,797 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:55:23,103 - INFO - Started server process [46003]
2025-04-29 09:55:23,105 - INFO - Waiting for application startup.
2025-04-29 09:55:23,106 - INFO - Application startup complete.
2025-04-29 09:55:27,377 - INFO - ('127.0.0.1', 35642) - "WebSocket /ws?password=$2b$12$GpJYlWG7pWGKXBaLBcsueORkWtnsHI/65Eb9ePt2TXCAxbKIOVRXC&type=tv" [accepted]
2025-04-29 09:55:27,766 - INFO - connection open
2025-04-29 09:55:28,056 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:55:53,792 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:55:53,795 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:55:53,797 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:55:53,807 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:55:53,809 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:55:53,811 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:55:53,819 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:55:53,821 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:55:53,823 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 09:55:53,879 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-04-29 09:55:53,880 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-04-29 09:55:54,684 - INFO - connection closed
2025-04-29 09:56:17,429 - INFO - Shutting down
2025-04-29 09:56:17,531 - INFO - Waiting for application shutdown.
2025-04-29 09:56:17,532 - INFO - Application shutdown complete.
2025-04-29 09:56:17,532 - INFO - Finished server process [46003]
2025-04-29 09:56:17,587 - INFO - Stopping reloader process [45954]
2025-04-29 09:56:51,104 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:56:51,106 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:56:51,379 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-04-29 09:56:51,380 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-04-29 09:56:51,380 - INFO - Started reloader process [47131] using WatchFiles
2025-04-29 09:56:54,307 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:56:54,311 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-04-29 09:56:54,579 - INFO - Started server process [47188]
2025-04-29 09:56:54,581 - INFO - Waiting for application startup.
2025-04-29 09:56:54,582 - INFO - Application startup complete.
2025-04-29 09:57:09,427 - INFO - ('127.0.0.1', 35744) - "WebSocket /ws?password=$2b$12$iMvcERDvcbAgB.cM2oEiTeaDQgaHh7H23updFUA/TPkBKERQDMoXe&type=tv" [accepted]
2025-04-29 09:57:09,826 - INFO - connection open
2025-04-29 09:57:10,106 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 10:33:15,714 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 10:33:15,719 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 10:33:15,721 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 10:33:15,735 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-04-29 10:33:15,739 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 10:33:15,743 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 10:33:15,745 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 10:33:15,757 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 10:33:15,761 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 10:33:15,765 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-04-29 10:33:15,899 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,901 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,901 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,901 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,901 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,902 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,902 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,902 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,902 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,903 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,903 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,904 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,904 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,904 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,904 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,906 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,906 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,909 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,909 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,909 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,910 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,910 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,910 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,911 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,911 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,911 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,912 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,912 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,912 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,912 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,913 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,913 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,913 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,913 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,914 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,914 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,915 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,915 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,915 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,915 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,916 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,916 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,916 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,917 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,917 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,917 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,917 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,918 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,918 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,918 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,918 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,919 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,919 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,919 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,920 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,920 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,920 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,920 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,921 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,921 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,922 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,922 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,922 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,923 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,924 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,924 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,925 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,925 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,926 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,926 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,926 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,927 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,927 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,928 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,928 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,928 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,928 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,929 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,929 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,929 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,930 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,930 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,931 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,931 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,931 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,932 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,932 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,934 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,934 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,935 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,935 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,936 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,936 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,936 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,936 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,937 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,937 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,938 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,938 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,938 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,939 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:15,939 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,210 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,210 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,211 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,212 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,213 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,214 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,214 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,220 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,221 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,221 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,222 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,222 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,223 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,223 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,223 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,226 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,227 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,228 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,229 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,229 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,230 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,230 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,231 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,232 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,233 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,234 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,236 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,237 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,238 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,239 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,241 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,245 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,246 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,246 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,246 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,248 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,253 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,256 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,258 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,259 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,260 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,262 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,263 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,264 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,266 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,267 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,267 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,268 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,269 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,270 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,270 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,271 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,273 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,274 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,277 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,279 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,279 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,279 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,280 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,280 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,280 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,281 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,281 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,282 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,282 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,282 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,283 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,283 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,283 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,284 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,285 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,285 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,286 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,286 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,287 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,287 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,288 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,288 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,289 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,289 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,289 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,290 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,290 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,290 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,291 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,291 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,291 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,292 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,292 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,292 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,293 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,293 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,293 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,294 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,294 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,294 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,295 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,295 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,295 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,296 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,296 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,507 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,508 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,508 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,508 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,509 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,512 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,513 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,525 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,527 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,527 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,528 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,528 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,528 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,529 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,542 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,542 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,544 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,544 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,546 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,546 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,548 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,548 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,548 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,551 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,552 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,552 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,552 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,553 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,553 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,553 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,555 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,555 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,555 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,556 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,556 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,557 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,557 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,558 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,558 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,560 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,560 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,560 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,561 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,561 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,562 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,563 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,563 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,563 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,564 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,566 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,567 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,568 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,568 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,626 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,627 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,627 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,628 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,629 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,629 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,629 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,630 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,630 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,630 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,631 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,631 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,632 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,632 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,633 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,633 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,635 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,635 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,636 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,637 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,637 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,638 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,638 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,638 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,640 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,640 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,640 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,641 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,643 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,643 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,644 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,644 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,645 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,645 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,646 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,646 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,647 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,647 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,647 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,648 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,649 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,649 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,652 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,652 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,653 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,653 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,653 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,654 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,654 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,655 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,656 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,657 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,657 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,657 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,658 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,660 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,660 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,660 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,661 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,663 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,663 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,664 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,665 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,666 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,667 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,667 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,668 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,669 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,670 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,672 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,673 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,673 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,673 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,675 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,676 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,676 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,677 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,677 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,678 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-04-29 10:33:16,692 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-04-29 10:33:16,693 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-04-29 10:33:17,658 - INFO - connection closed
2025-05-04 09:27:33,813 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-04 09:27:33,903 - INFO - Shutting down
2025-05-04 09:27:34,009 - INFO - Waiting for application shutdown.
2025-05-04 09:27:34,010 - INFO - Application shutdown complete.
2025-05-04 09:27:34,011 - INFO - Finished server process [47188]
2025-05-04 09:27:38,157 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 09:27:38,165 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 09:27:38,460 - INFO - Started server process [97183]
2025-05-04 09:27:38,462 - INFO - Waiting for application startup.
2025-05-04 09:27:38,462 - INFO - Application startup complete.
2025-05-04 09:27:50,313 - INFO - ('127.0.0.1', 60870) - "WebSocket /ws?password=$2b$12$lw8YO1KuEJ3MBAB6DfkmHemHHbeqerDONNXfokKDLHL.OvEfnfn2C&type=tv" [accepted]
2025-05-04 09:27:50,636 - INFO - connection open
2025-05-04 09:27:50,949 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:05:35,387 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:05:35,392 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:05:35,394 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:05:35,410 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-05-04 10:05:35,413 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:05:35,417 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:05:35,420 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:05:35,433 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:05:35,435 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:05:35,437 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:05:35,565 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,565 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,566 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,566 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,566 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,567 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,567 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,567 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,568 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,568 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,568 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,569 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,569 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,569 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,570 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,570 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,570 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,571 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,571 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,571 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,571 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,572 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,572 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,573 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,573 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,573 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,574 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,574 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,574 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,575 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,575 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,575 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,576 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,576 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,576 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,577 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,577 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,577 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,578 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,578 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,578 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,579 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,579 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,579 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,580 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,580 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,580 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,580 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,581 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,581 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,581 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,582 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,582 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,582 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,583 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,583 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,583 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,583 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,584 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,584 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,584 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,585 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,585 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,585 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,586 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,586 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,587 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,587 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,587 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,588 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,588 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,589 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,589 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,589 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,592 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,592 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,593 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,593 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,593 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,594 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,594 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,595 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,595 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,595 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,596 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,596 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,596 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,597 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,597 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,597 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,598 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,598 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,599 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,599 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,599 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,600 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,600 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,600 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,601 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,601 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,601 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,602 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,602 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,602 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,604 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,604 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,604 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,604 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,605 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,605 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,605 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,605 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,606 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,606 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,606 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,607 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,607 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,608 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,608 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,608 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,608 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,609 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,609 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,652 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,652 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,653 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,654 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,654 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,654 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,655 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,655 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,656 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,656 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,657 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,657 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,658 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,658 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,658 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,659 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,659 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,659 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,660 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,660 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,661 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,661 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,662 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,662 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,663 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,663 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,664 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,664 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,665 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,665 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,666 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,666 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,667 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,667 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,668 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,668 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,669 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,669 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,670 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,670 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,672 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,673 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,674 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,674 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,674 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,675 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,676 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,676 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,677 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,677 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,677 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,677 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,678 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,678 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,679 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,679 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,679 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,680 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,681 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,682 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,683 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,684 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,684 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,684 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,685 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,685 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,686 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,687 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,687 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,688 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,688 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,689 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,689 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,690 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,690 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,691 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,691 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,692 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,692 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,693 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,693 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,693 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,694 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,694 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,694 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,695 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,695 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,695 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,696 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,697 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,697 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,697 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,936 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,937 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,939 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,943 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,946 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,946 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,947 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,948 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,949 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,949 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,950 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,950 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,951 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,952 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,952 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,954 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,955 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,956 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,957 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,958 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,959 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,960 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,960 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,961 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,962 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,963 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,964 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,965 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,966 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,968 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,970 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,973 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,974 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,975 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,975 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,977 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,979 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,981 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,982 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,983 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,984 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,985 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,986 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,987 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,988 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,990 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,993 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,994 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,995 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,997 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:35,999 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,000 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,001 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,001 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,002 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,003 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,004 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,005 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,006 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,006 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,007 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,008 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,009 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,010 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,011 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,012 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,013 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,013 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,014 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,015 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,015 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,018 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,019 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,020 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,021 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,021 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,022 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,023 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,025 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,025 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,025 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,026 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,026 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,026 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,027 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,027 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,028 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,028 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,028 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,029 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,030 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,030 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,034 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,034 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,034 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,034 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,035 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,035 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,036 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,133 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,134 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,134 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,134 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,135 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,136 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,136 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,136 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,137 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,137 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,137 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,139 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,140 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,141 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,142 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,142 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,142 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,143 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,144 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,144 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,144 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,145 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,145 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,145 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,146 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,146 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,147 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,147 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,150 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,151 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,152 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,153 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,153 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,153 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,156 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,157 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,158 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,159 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,160 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,161 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,161 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,162 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,162 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,163 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,163 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,164 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,164 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,165 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,165 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,165 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,167 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,167 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,167 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,168 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,169 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,169 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,170 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,170 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,170 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,171 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,171 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,172 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,172 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,172 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,173 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,173 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,174 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,175 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,176 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,176 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,177 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,177 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,178 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,178 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,179 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,179 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,180 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,181 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,181 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,182 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,182 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,183 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,183 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,184 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,184 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,184 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:05:36,196 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-05-04 10:05:36,196 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-05-04 10:05:37,181 - INFO - connection closed
2025-05-04 10:05:37,258 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 84, in websocket_endpoint
    service.save_forecast(db)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 126, in save_forecast
    if not isnan(row[1])
          ^^^^^
NameError: name 'isnan' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: name 'isnan' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-04 10:11:37,969 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-04 10:11:38,023 - INFO - Shutting down
2025-05-04 10:11:38,129 - INFO - Waiting for application shutdown.
2025-05-04 10:11:38,131 - INFO - Application shutdown complete.
2025-05-04 10:11:38,132 - INFO - Finished server process [97183]
2025-05-04 10:11:42,694 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 10:11:42,698 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 10:11:43,019 - INFO - Started server process [120222]
2025-05-04 10:11:43,022 - INFO - Waiting for application startup.
2025-05-04 10:11:43,023 - INFO - Application startup complete.
2025-05-04 10:11:58,752 - INFO - Shutting down
2025-05-04 10:11:58,855 - INFO - Waiting for application shutdown.
2025-05-04 10:11:58,857 - INFO - Application shutdown complete.
2025-05-04 10:11:58,858 - INFO - Finished server process [120222]
2025-05-04 10:11:58,929 - INFO - Stopping reloader process [47131]
2025-05-04 10:12:06,945 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 10:12:06,947 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 10:12:07,206 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-04 10:12:07,206 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-04 10:12:07,207 - INFO - Started reloader process [120591] using WatchFiles
2025-05-04 10:12:10,545 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 10:12:10,547 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 10:12:10,833 - INFO - Started server process [120640]
2025-05-04 10:12:10,835 - INFO - Waiting for application startup.
2025-05-04 10:12:10,835 - INFO - Application startup complete.
2025-05-04 10:12:13,260 - INFO - ('127.0.0.1', 35362) - "WebSocket /ws?password=$2b$12$YIChp8UVJ1OdUa0oEKHnluua7YCrdOKQnmDtYSyQtdNysUd53EzBO&type=tv" [accepted]
2025-05-04 10:12:13,670 - INFO - connection open
2025-05-04 10:12:13,979 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:48:28,739 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:48:28,745 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:48:28,748 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:48:28,770 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-05-04 10:48:28,776 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:48:28,778 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:48:28,779 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:48:28,790 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:48:28,793 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:48:28,795 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 10:48:28,936 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,937 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,938 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,939 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,940 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,941 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,941 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,943 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,944 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,945 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,946 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,947 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,947 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,948 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,950 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,951 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,952 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,952 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,953 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,954 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,955 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,956 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,956 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,958 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,959 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,960 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,961 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,962 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,962 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,963 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,965 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,965 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,967 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,967 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,968 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,968 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,968 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,969 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,969 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,969 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,969 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,970 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,970 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,970 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,971 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,971 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,971 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,972 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,972 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,972 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,972 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,973 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,973 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,973 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,974 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,974 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,975 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,975 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,975 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,975 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,976 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,976 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,976 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,977 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,977 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,978 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,978 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,978 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,979 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,979 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,979 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,979 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,980 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,985 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,985 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,986 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,986 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,986 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,986 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,987 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,987 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,987 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,988 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,988 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,988 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,988 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,989 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,989 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,989 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,990 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,990 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,990 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,990 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,991 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,991 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,991 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,992 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,992 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,992 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,993 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,993 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,993 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,993 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,994 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,994 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,994 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,994 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,994 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,995 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,995 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,995 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,995 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,996 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,996 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,996 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,997 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:28,997 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,289 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,290 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,290 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,291 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,291 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,291 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,293 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,293 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,293 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,294 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,294 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,295 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,295 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,295 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,296 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,296 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,299 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,300 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,301 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,302 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,302 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,303 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,304 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,305 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,305 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,306 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,307 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,308 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,308 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,309 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,309 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,310 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,311 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,311 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,312 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,312 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,313 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,313 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,314 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,315 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,315 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,315 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,316 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,316 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,317 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,317 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,318 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,319 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,319 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,319 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,320 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,321 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,322 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,323 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,323 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,323 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,325 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,325 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,326 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,326 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,327 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,328 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,329 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,330 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,330 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,331 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,333 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,333 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,335 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,336 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,337 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,337 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,339 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,340 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,341 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,342 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,342 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,343 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,344 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,344 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,345 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,345 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,345 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,346 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,346 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,346 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,347 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,347 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,348 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,348 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,348 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,349 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,350 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,351 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,351 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,352 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,352 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,353 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,353 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,353 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,354 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,505 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,506 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,506 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,507 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,508 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,508 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,509 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,512 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,512 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,513 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,513 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,525 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,527 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,528 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,529 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,529 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,529 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,530 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,544 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,546 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,546 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,548 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,551 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,552 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,552 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,553 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,553 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,555 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,556 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,557 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,557 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,558 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,558 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,560 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,560 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,560 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,561 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,561 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,561 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,562 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,701 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,703 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,706 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,706 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,710 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,711 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,711 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,712 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,714 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,715 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,716 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,716 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,717 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,718 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,718 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,719 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,721 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,721 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,722 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,722 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,725 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,726 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,727 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,728 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,728 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,729 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,730 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,731 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,731 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,733 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,733 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,734 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,737 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,738 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,739 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,740 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,742 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,744 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,745 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,748 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,748 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,749 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,749 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,750 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,751 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,751 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,752 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,752 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,753 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,753 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,754 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,754 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,755 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,755 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,756 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,756 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,757 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,757 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,758 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,758 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,759 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,759 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,760 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,760 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,761 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,761 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,762 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,762 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,763 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,763 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,763 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,764 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,764 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,765 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,765 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,766 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,766 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,767 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,767 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,767 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,768 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,768 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,769 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,769 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,770 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,770 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,771 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,771 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,772 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,772 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 10:48:29,784 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-05-04 10:48:29,784 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-05-04 10:48:30,770 - INFO - connection closed
2025-05-04 10:56:11,029 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-04 10:56:11,104 - INFO - Shutting down
2025-05-04 10:56:11,211 - INFO - Waiting for application shutdown.
2025-05-04 10:56:11,212 - INFO - Application shutdown complete.
2025-05-04 10:56:11,212 - INFO - Finished server process [120640]
2025-05-04 10:56:15,344 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 10:56:15,346 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 10:56:15,626 - INFO - Started server process [143838]
2025-05-04 10:56:15,628 - INFO - Waiting for application startup.
2025-05-04 10:56:15,628 - INFO - Application startup complete.
2025-05-04 11:01:22,643 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-04 11:01:22,664 - INFO - Shutting down
2025-05-04 11:01:22,768 - INFO - Waiting for application shutdown.
2025-05-04 11:01:22,772 - INFO - Application shutdown complete.
2025-05-04 11:01:22,773 - INFO - Finished server process [143838]
2025-05-04 11:01:26,056 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 11:01:26,058 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 11:01:26,343 - INFO - Started server process [146923]
2025-05-04 11:01:26,345 - INFO - Waiting for application startup.
2025-05-04 11:01:26,346 - INFO - Application startup complete.
2025-05-04 11:01:59,051 - INFO - ('127.0.0.1', 50238) - "WebSocket /ws?password=$2b$12$8ej3d/DbXxWsmrobrHvtHu9FB02kspVZZsdHRrzDjXYf0mVkh/2Q6&type=tv" [accepted]
2025-05-04 11:01:59,424 - INFO - connection open
2025-05-04 11:01:59,719 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 11:54:35,032 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 11:54:35,037 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 11:54:35,039 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 11:54:35,055 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-05-04 11:54:35,058 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 11:54:35,062 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 11:54:35,064 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 11:54:35,074 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 11:54:35,077 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 11:54:35,080 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 11:54:35,224 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,225 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,226 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,227 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,227 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,228 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,228 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,231 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,233 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,233 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,234 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,234 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,235 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,235 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,236 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,237 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,238 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,239 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,240 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,240 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,240 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,241 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,242 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,242 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,243 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,243 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,244 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,244 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,245 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,245 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,247 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,248 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,249 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,249 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,249 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,249 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,249 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,250 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,250 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,250 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,251 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,251 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,251 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,252 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,252 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,253 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,253 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,253 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,253 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,254 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,254 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,254 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,254 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,255 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,256 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,256 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,256 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,257 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,257 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,258 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,258 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,259 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,259 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,259 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,260 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,261 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,262 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,262 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,263 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,263 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,264 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,264 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,264 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,264 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,265 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,265 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,265 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,266 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,267 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,267 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,268 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,268 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,268 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,269 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,269 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,270 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,270 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,270 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,271 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,271 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,271 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,272 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,272 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,272 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,272 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,273 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,273 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,274 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,274 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,274 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,275 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,275 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,278 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,279 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,279 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,280 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,281 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,281 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,282 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,283 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,283 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,283 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,283 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,284 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,284 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,284 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,285 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,285 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,285 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,285 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,395 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,395 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,396 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,396 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,396 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,397 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,397 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,398 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,398 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,399 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,400 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,407 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,408 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,409 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,409 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,410 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,410 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,410 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,410 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,411 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,412 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,414 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,415 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,418 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,419 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,419 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,420 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,420 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,420 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,421 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,421 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,421 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,422 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,422 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,423 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,423 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,424 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,424 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,424 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,425 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,425 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,426 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,426 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,426 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,427 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,428 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,428 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,429 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,429 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,429 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,430 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,430 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,431 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,431 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,431 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,432 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,432 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,432 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,433 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,433 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,434 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,434 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,434 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,435 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,435 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,436 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,436 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,437 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,437 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,437 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,437 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,438 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,438 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,438 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,438 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,439 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,439 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,440 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,440 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,440 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,441 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,441 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,442 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,442 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,443 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,444 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,444 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,445 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,445 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,446 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,446 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,446 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,447 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,448 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,448 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,448 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,449 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,449 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,449 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,450 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,450 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,451 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,451 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,451 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,452 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,509 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,512 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,512 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,513 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,525 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,527 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,527 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,528 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,528 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,528 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,529 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,529 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,530 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,530 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,542 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,542 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,544 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,546 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,548 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,548 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,551 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,551 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,552 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,553 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,553 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,553 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,555 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,556 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,556 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,557 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,557 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,558 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,558 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,560 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,633 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,637 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,641 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,641 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,642 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,643 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,644 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,663 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,664 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,665 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,665 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,666 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,668 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,669 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,670 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,670 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,671 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,672 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,672 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,673 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,674 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,675 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,675 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,675 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,676 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,676 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,677 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,677 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,678 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,678 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,679 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,679 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,680 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,680 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,680 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,680 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,681 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,681 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,681 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,682 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,682 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,683 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,684 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,684 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,684 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,685 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,685 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,686 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,686 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,687 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,687 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,688 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,688 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,689 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,689 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,690 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,691 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,691 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,692 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,692 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,693 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,693 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,695 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,696 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,696 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,697 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,697 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,697 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,698 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,699 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,700 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,701 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,701 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,702 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,702 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,703 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,703 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,704 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,704 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,705 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,706 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,706 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 11:54:35,721 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-05-04 11:54:35,721 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-05-04 11:54:36,879 - INFO - connection closed
2025-05-04 12:54:08,034 - INFO - Shutting down
2025-05-04 12:54:08,147 - INFO - Waiting for application shutdown.
2025-05-04 12:54:08,153 - INFO - Application shutdown complete.
2025-05-04 12:54:08,154 - INFO - Finished server process [146923]
2025-05-04 12:54:08,223 - INFO - Stopping reloader process [120591]
2025-05-04 12:55:55,987 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 12:55:55,991 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 12:55:56,259 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-04 12:55:56,260 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-04 12:55:56,261 - INFO - Started reloader process [194389] using WatchFiles
2025-05-04 12:56:00,749 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 12:56:00,752 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 12:56:01,033 - INFO - Started server process [194449]
2025-05-04 12:56:01,035 - INFO - Waiting for application startup.
2025-05-04 12:56:01,036 - INFO - Application startup complete.
2025-05-04 12:56:15,788 - INFO - ('127.0.0.1', 49538) - "WebSocket /ws?password=$2b$12$NBKVHgYJ0npymM4Tewtow.64dTrl82WzROYcoiM7YlQ680YnTyE.q&type=tv" [accepted]
2025-05-04 12:56:16,177 - INFO - connection open
2025-05-04 12:56:16,468 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 13:35:31,668 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 13:35:31,675 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 13:35:31,677 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 13:35:31,701 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-05-04 13:35:31,704 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 13:35:31,708 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 13:35:31,710 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 13:35:31,720 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 13:35:31,722 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 13:35:31,725 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 13:35:31,882 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,882 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,883 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,883 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,883 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,884 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,884 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,884 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,885 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,885 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,885 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,885 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,886 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,886 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,886 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,887 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,887 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,888 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,888 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,889 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,889 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,889 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,890 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,890 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,890 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,891 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,891 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,891 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,891 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,892 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,892 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,892 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,892 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,892 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,893 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,893 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,893 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,893 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,894 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,894 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,895 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,895 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,895 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,896 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,896 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,896 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,897 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,897 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,897 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,898 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,898 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,898 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,899 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,899 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,899 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,903 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,904 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,904 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,906 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,906 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,906 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,909 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,909 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,909 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,910 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,910 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,916 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,916 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,918 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,918 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,918 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,919 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,920 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,920 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,921 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,921 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,922 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,923 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,923 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,924 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,924 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,925 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,925 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,926 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,927 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,928 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,929 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,929 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,929 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,930 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,931 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,933 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,933 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,935 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,935 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,935 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,936 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,937 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,937 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,939 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,940 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,941 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,942 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,942 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,943 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,944 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,945 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:31,945 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,542 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,542 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,546 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,548 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,548 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,551 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,551 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,554 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,555 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,558 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,559 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,560 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,561 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,561 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,562 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,563 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,564 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,565 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,565 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,566 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,567 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,567 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,568 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,568 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,570 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,571 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,571 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,571 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,572 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,572 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,572 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,573 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,573 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,575 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,576 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,576 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,577 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,578 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,579 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,580 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,583 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,583 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,585 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,585 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,588 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,588 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,590 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,590 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,591 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,591 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,592 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,592 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,592 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,593 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,593 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,594 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,594 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,596 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,597 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,598 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,598 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,599 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,599 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,600 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,600 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,601 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,601 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,603 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,604 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,605 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,605 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,605 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,606 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,606 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,606 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,607 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,607 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,608 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,608 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,608 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,609 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,609 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,610 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,610 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,611 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,611 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,707 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,708 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,708 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,708 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,709 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,709 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,710 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,712 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,712 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,713 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,714 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,715 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,717 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,718 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,719 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,719 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,719 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,720 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,720 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,721 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,722 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,723 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,724 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,724 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,726 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,727 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,728 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,729 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,729 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,730 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,731 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,732 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,733 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,734 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,734 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,735 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,737 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,738 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,739 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,739 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,740 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,741 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,742 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,743 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,744 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,745 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,746 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,747 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,749 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,749 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,750 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,750 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,751 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,752 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,752 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,753 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,754 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,755 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,755 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,756 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,756 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,756 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,757 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,757 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,757 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,758 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,758 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,758 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,759 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,759 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,759 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,760 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,760 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,761 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,762 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,762 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,763 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,764 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,764 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,765 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,766 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,766 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,767 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,767 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,767 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,768 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,768 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,769 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,769 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,770 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,771 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,771 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,772 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,772 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,773 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,773 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,774 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,774 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,775 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,845 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,846 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,846 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,847 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,847 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,847 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,848 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,848 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,848 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,849 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,850 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,850 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,850 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,851 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,851 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,852 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,852 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,853 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,853 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,853 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,854 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,855 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,855 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,856 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,856 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,856 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,857 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,858 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,858 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,858 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,859 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,859 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,860 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,860 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,860 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,861 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,861 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,861 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,862 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,862 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,863 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,863 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,864 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,865 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,865 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,866 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,866 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,867 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,867 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,868 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,869 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,870 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,870 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,871 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,872 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,873 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,874 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,874 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,875 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,876 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,876 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,877 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,877 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,879 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,880 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,880 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,881 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,882 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,882 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,884 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,885 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,886 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,887 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,887 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,888 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,888 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,889 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,890 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,891 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,894 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,894 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,894 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,895 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,895 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,896 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,897 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,897 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:32,898 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 13:35:33,005 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-05-04 13:35:33,005 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-05-04 13:35:34,177 - INFO - connection closed
2025-05-04 15:07:55,331 - INFO - Shutting down
2025-05-04 15:07:55,440 - INFO - Waiting for application shutdown.
2025-05-04 15:07:55,445 - INFO - Application shutdown complete.
2025-05-04 15:07:55,449 - INFO - Finished server process [194449]
2025-05-04 15:07:55,504 - INFO - Stopping reloader process [194389]
2025-05-04 15:08:31,631 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 15:08:31,635 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 15:08:31,917 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-04 15:08:31,919 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-04 15:08:31,919 - INFO - Started reloader process [254067] using WatchFiles
2025-05-04 15:08:35,288 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 15:08:35,291 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 15:08:35,572 - INFO - Started server process [254141]
2025-05-04 15:08:35,574 - INFO - Waiting for application startup.
2025-05-04 15:08:35,575 - INFO - Application startup complete.
2025-05-04 15:08:41,961 - INFO - ('127.0.0.1', 57008) - "WebSocket /ws?password=$2b$12$3cBU6h8oYVmawlx1qysSleI0c2AYBOEsal1veM4HfGW4WBm4lX6VK&type=tv" [accepted]
2025-05-04 15:08:42,352 - INFO - connection open
2025-05-04 15:08:42,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 15:44:04,474 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 15:44:04,486 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 15:44:04,492 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 15:44:04,513 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-05-04 15:44:04,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 15:44:04,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 15:44:04,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 15:44:04,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 15:44:04,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 15:44:04,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 15:44:04,695 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,696 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,697 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,697 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,698 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,699 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,699 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,699 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,700 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,700 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,701 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,701 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,702 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,702 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,703 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,703 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,704 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,704 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,704 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,705 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,706 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,706 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,706 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,707 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,707 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,707 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,707 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,708 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,708 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,709 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,709 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,709 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,710 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,710 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,711 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,711 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,712 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,712 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,712 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,712 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,713 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,713 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,714 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,714 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,714 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,715 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,715 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,715 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,716 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,716 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,718 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,719 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,720 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,720 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,721 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,721 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,722 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,722 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,722 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,723 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,723 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,723 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,724 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,724 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,724 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,726 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,726 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,727 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,727 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,728 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,729 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,729 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,729 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,730 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,730 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,730 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,731 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,731 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,731 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,732 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,732 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,733 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,733 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,734 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,735 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,736 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,736 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,737 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,737 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,738 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,739 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,739 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,740 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,741 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,741 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,741 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,742 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,742 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,743 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,743 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,743 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,744 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,744 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,744 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,745 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,745 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,745 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,746 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,746 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,747 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,747 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,748 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,748 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,749 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,749 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,750 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,750 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,751 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,751 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,752 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,752 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:04,753 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,022 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,022 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,023 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,023 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,023 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,024 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,024 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,025 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,025 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,026 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,027 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,028 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,029 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,029 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,033 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,033 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,034 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,034 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,034 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,036 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,036 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,037 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,037 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,038 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,038 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,038 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,039 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,040 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,041 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,043 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,043 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,044 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,045 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,046 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,047 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,048 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,048 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,049 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,049 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,050 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,051 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,051 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,051 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,052 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,052 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,053 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,053 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,054 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,054 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,055 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,055 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,056 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,056 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,057 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,058 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,059 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,062 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,063 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,065 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,065 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,066 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,067 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,067 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,067 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,068 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,068 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,069 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,069 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,070 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,070 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,071 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,071 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,072 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,072 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,073 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,074 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,075 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,076 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,076 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,077 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,078 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,078 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,079 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,079 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,080 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,080 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,081 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,081 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,082 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,082 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,083 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,084 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,084 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,085 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,085 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,085 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,086 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,086 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,087 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,161 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,162 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,163 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,163 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,164 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,165 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,167 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,168 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,169 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,169 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,170 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,171 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,172 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,173 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,174 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,176 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,177 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,178 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,178 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,180 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,181 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,181 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,182 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,183 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,186 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,187 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,188 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,190 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,191 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,192 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,193 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,194 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,195 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,195 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,196 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,197 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,198 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,198 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,200 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,200 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,201 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,202 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,202 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,203 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,203 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,204 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,206 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,206 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,208 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,209 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,211 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,214 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,216 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,217 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,220 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,222 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,223 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,226 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,227 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,228 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,228 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,230 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,231 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,232 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,232 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,233 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,234 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,235 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,236 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,237 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,238 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,239 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,240 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,241 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,242 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,243 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,243 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,244 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,245 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,246 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,246 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,247 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,248 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,249 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,249 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,250 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,250 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,250 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,251 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,251 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,252 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,252 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,253 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,254 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,254 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,256 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,605 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,606 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,607 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,608 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,610 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,611 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,611 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,612 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,614 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,615 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,616 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,617 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,617 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,618 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,618 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,619 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,619 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,619 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,620 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,620 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,623 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,623 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,624 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,624 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,624 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,625 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,625 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,626 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,627 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,627 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,628 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,628 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,629 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,629 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,630 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,630 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,630 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,631 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,632 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,632 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,632 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,633 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,634 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,634 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,635 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,636 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,636 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,637 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,637 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,637 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,638 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,638 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,640 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,640 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,641 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,641 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,642 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,642 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,643 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,643 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,644 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,644 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,645 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,645 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,645 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,646 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,646 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,647 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,647 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,648 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,648 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,649 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,649 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,649 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,652 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,652 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,652 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,653 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,654 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,654 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 15:44:05,666 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-05-04 15:44:05,666 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-05-04 15:44:06,650 - INFO - connection closed
2025-05-04 15:48:25,066 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-04 15:48:25,113 - INFO - Shutting down
2025-05-04 15:48:25,220 - INFO - Waiting for application shutdown.
2025-05-04 15:48:25,222 - INFO - Application shutdown complete.
2025-05-04 15:48:25,223 - INFO - Finished server process [254141]
2025-05-04 15:48:30,136 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 15:48:30,139 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 15:48:30,440 - INFO - Started server process [276115]
2025-05-04 15:48:30,443 - INFO - Waiting for application startup.
2025-05-04 15:48:30,444 - INFO - Application startup complete.
2025-05-04 15:48:40,502 - INFO - ('127.0.0.1', 35372) - "WebSocket /ws?password=$2b$12$KGh0953KphPnERY//g8rd.4BJ6HZnfp59FQg6WWnbHA1KuyWkIMmW&type=tv" [accepted]
2025-05-04 15:48:40,993 - INFO - connection open
2025-05-04 15:48:41,288 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 16:23:50,916 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 16:23:50,922 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 16:23:50,926 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 16:23:50,958 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-05-04 16:23:50,964 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 16:23:50,966 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 16:23:50,969 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 16:23:50,980 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 16:23:50,984 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 16:23:50,986 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 16:23:51,138 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,138 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,139 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,139 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,139 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,140 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,140 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,141 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,141 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,141 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,142 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,142 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,142 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,143 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,143 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,143 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,144 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,144 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,145 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,146 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,146 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,146 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,147 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,147 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,147 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,148 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,148 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,148 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,149 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,149 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,149 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,149 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,150 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,150 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,150 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,151 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,151 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,151 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,152 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,152 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,152 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,152 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,153 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,153 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,153 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,154 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,154 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,156 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,158 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,158 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,159 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,159 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,160 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,160 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,161 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,161 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,162 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,163 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,164 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,164 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,165 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,165 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,167 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,168 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,170 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,171 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,172 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,172 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,173 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,175 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,176 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,178 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,183 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,184 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,185 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,187 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,188 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,189 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,189 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,190 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,191 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,192 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,193 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,193 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,194 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,195 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,195 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,196 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,197 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,198 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,198 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,199 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,200 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,200 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,202 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,203 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,203 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,204 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,205 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,205 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,206 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,207 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,207 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,208 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,209 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,210 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,210 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,211 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,212 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,212 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,213 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,213 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,214 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,215 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,216 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,216 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,217 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,218 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,218 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,219 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,219 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,220 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,221 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,221 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,222 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,501 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,502 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,502 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,503 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,503 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,504 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,504 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,504 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,505 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,505 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,505 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,506 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,507 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,507 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,507 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,508 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,509 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,512 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,512 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,513 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,513 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,525 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,527 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,530 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,542 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,542 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,543 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,544 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,544 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,545 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,546 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,547 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,548 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,549 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,550 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,775 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,775 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,776 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,777 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,777 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,778 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,778 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,778 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,779 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,779 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,779 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,780 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,781 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,781 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,782 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,782 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,783 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,783 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,783 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,784 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,784 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,784 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,786 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,787 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,787 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,787 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,788 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,788 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,790 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,791 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,791 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,792 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,792 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,792 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,793 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,793 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,794 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,794 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,795 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,796 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,796 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,796 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,797 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,797 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,797 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,798 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,798 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,799 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,799 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,800 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,800 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,800 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,801 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,801 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,802 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,802 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,803 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,803 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,804 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,805 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,805 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,806 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,806 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,807 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,808 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,808 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,808 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,809 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,809 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,810 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,810 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,810 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,811 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,811 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,812 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,812 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,812 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,813 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,813 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,813 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,814 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,814 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,815 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,815 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,815 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,816 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,816 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,817 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,817 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,817 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,818 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,818 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,819 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,819 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,819 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,820 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,820 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,820 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:51,821 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,055 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,055 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,056 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,056 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,056 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,057 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,057 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,058 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,060 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,061 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,063 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,064 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,066 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,074 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,075 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,075 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,076 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,077 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,082 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,092 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,092 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,094 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,102 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,112 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,113 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,120 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,128 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,129 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,129 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,130 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,132 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,137 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,137 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,141 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,142 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,147 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,147 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,148 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,150 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,151 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,152 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,156 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,156 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,157 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,157 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,160 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,161 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,162 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,165 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,171 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,172 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,174 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,176 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,182 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,183 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,184 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,185 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,187 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,188 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,189 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,190 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,191 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,191 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,191 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,192 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,192 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,193 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,194 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,195 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,198 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,198 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,200 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,202 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,207 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,211 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,214 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,216 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,217 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,219 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,220 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,223 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,224 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,226 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,227 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,228 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 16:23:52,258 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-05-04 16:23:52,261 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-05-04 16:23:53,496 - INFO - connection closed
2025-05-04 16:38:22,942 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-04 16:38:22,988 - INFO - Shutting down
2025-05-04 16:38:23,099 - INFO - Waiting for application shutdown.
2025-05-04 16:38:23,100 - INFO - Application shutdown complete.
2025-05-04 16:38:23,101 - INFO - Finished server process [276115]
2025-05-04 16:38:27,767 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 16:38:27,771 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 16:38:28,043 - INFO - Started server process [302421]
2025-05-04 16:38:28,046 - INFO - Waiting for application startup.
2025-05-04 16:38:28,046 - INFO - Application startup complete.
2025-05-04 16:38:36,731 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-04 16:38:36,789 - INFO - Shutting down
2025-05-04 16:38:36,893 - INFO - Waiting for application shutdown.
2025-05-04 16:38:36,893 - INFO - Application shutdown complete.
2025-05-04 16:38:36,894 - INFO - Finished server process [302421]
2025-05-04 16:38:40,690 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 16:38:40,699 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-04 16:38:41,059 - INFO - Started server process [302613]
2025-05-04 16:38:41,067 - INFO - Waiting for application startup.
2025-05-04 16:38:41,068 - INFO - Application startup complete.
2025-05-04 16:38:49,635 - INFO - ('127.0.0.1', 38818) - "WebSocket /ws?password=$2b$12$mizjdTJdevsF02SML1YDV.FBMjUIScoWosXGUK2t5cPirhR5OtFv6&type=tv" [accepted]
2025-05-04 16:38:50,178 - INFO - connection open
2025-05-04 16:38:50,499 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 17:12:31,921 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 17:12:31,926 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 17:12:31,927 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 17:12:31,944 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-05-04 17:12:31,947 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 17:12:31,950 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 17:12:31,952 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 17:12:31,961 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 17:12:31,963 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 17:12:31,965 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-04 17:12:32,132 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,133 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,134 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,134 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,135 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,136 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,137 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,139 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,141 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,143 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,144 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,145 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,146 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,147 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,148 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,149 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,150 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,151 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,151 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,152 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,153 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,154 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,155 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,156 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,157 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,157 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,158 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,159 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,160 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,161 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,161 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,162 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,163 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,164 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,164 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,165 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,166 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,167 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,167 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,168 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,169 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,169 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,170 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,171 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,171 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,173 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,173 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,174 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,175 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,175 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,176 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,177 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,178 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,178 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,179 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,180 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,181 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,182 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,182 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,183 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,183 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,184 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,185 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,187 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,187 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,188 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,188 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,189 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,190 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,190 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,191 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,192 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,192 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,193 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,194 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,194 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,195 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,196 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,196 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,197 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,198 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,198 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,199 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,200 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,200 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,201 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,202 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,202 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,203 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,203 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,203 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,203 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,204 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,204 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,204 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,204 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,205 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,206 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,206 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,207 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,207 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,208 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,208 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,209 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,209 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,209 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,210 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,364 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,365 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,365 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,365 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,366 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,366 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,366 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,367 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,367 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,367 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,367 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,367 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,368 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,368 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,368 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,369 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,369 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,370 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,370 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,372 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,374 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,376 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,377 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,379 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,379 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,379 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,380 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,380 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,381 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,381 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,382 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,382 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,383 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,383 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,383 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,384 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,385 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,386 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,387 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,388 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,388 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,390 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,391 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,391 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,391 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,392 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,392 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,393 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,393 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,393 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,393 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,394 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,394 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,394 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,396 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,397 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,398 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,399 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,400 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,402 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,403 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,404 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,405 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,405 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,406 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,406 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,406 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,407 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,407 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,408 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,408 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,408 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,409 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,409 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,410 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,410 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,410 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,411 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,411 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,411 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,412 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,412 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,413 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,413 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,414 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,414 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,414 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,415 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,415 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,416 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,416 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,416 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,417 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,417 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,418 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,418 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,418 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,418 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,419 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,419 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,420 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,420 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,421 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,421 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,421 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,487 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,487 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,488 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,488 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,488 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,490 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,490 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,491 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,491 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,492 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,493 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,493 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,493 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,494 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,494 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,494 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,495 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,496 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,497 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,497 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,498 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,498 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,500 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,501 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,501 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,503 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,504 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,504 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,505 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,505 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,505 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,506 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,506 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,506 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,507 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,507 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,508 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,509 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,509 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,512 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,513 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,520 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,525 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,525 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,527 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,527 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,528 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,528 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,529 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,530 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,530 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,530 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,623 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,623 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,624 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,624 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,625 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,625 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,626 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,627 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,627 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,627 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,628 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,628 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,628 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,628 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,629 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,629 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,631 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,632 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,632 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,634 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,634 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,635 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,636 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,637 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,638 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,639 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,641 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,642 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,642 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,643 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,643 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,644 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,644 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,645 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,645 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,646 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,646 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,647 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,648 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,648 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,649 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,649 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,650 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,651 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,652 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,654 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,655 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,655 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,655 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,656 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,656 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,657 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,657 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,657 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,658 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,658 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,658 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,659 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,659 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,659 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,659 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,660 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,660 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,661 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,661 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,661 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,663 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,663 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,664 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,664 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,665 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,665 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,666 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,668 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,668 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,669 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,669 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,669 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,670 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,670 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,670 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,671 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,671 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,672 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,672 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,673 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,674 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,674 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,674 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,675 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,675 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,675 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-04 17:12:32,696 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-05-04 17:12:32,698 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-05-04 17:12:34,168 - INFO - connection closed
2025-05-05 01:51:22,475 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-05 01:51:22,556 - INFO - Shutting down
2025-05-05 01:51:22,663 - INFO - Waiting for application shutdown.
2025-05-05 01:51:22,664 - INFO - Application shutdown complete.
2025-05-05 01:51:22,666 - INFO - Finished server process [302613]
2025-05-05 01:51:27,187 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 01:51:27,191 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 01:51:27,473 - INFO - Started server process [338865]
2025-05-05 01:51:27,475 - INFO - Waiting for application startup.
2025-05-05 01:51:27,476 - INFO - Application startup complete.
2025-05-05 01:51:36,141 - INFO - ('127.0.0.1', 52008) - "WebSocket /ws?password=$2b$12$llvUZUAZ3..iZVjjE7NAjOX4P.xFCW.BTpdPXwNmK3MS2IBKRlbjK&type=tv" [accepted]
2025-05-05 01:51:36,585 - INFO - connection open
2025-05-05 01:51:36,866 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:24:41,646 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:24:41,653 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:24:41,655 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:24:41,672 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/split.py:273: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  df = pd.concat([df, future_df])

2025-05-05 02:24:41,676 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:24:41,678 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:24:41,685 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:24:41,697 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:24:41,699 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:24:41,703 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:24:41,894 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,895 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,895 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,896 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,896 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,896 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,896 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,897 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,897 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,897 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,898 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,898 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,898 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,899 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,899 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,899 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,899 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,899 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,900 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,901 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,901 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,902 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,902 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,903 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,904 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,904 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,904 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,905 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,906 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,906 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,906 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,906 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,907 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,908 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,909 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,909 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,910 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,910 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,911 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,911 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,912 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,913 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,913 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,914 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,915 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,915 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,915 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,916 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,916 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,916 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,917 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,917 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,918 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,919 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,919 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,920 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,920 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,920 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,921 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,921 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,922 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,922 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,922 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,923 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,923 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,923 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,924 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,924 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,924 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,924 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,925 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,925 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,925 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,926 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,926 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,926 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,927 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,928 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,929 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,929 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,930 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,931 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,932 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,933 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,934 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,935 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,936 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,937 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,938 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,939 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,940 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,941 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,941 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,942 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,942 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,943 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,944 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,944 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,944 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,944 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,945 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,945 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,945 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,945 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,946 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:41,946 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,017 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,018 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,018 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,019 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,019 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,020 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,020 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,021 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,021 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,023 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,023 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,024 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,024 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,025 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,025 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,025 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,026 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,026 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,027 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,027 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,028 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,028 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,029 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,030 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,030 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,030 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,031 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,031 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,031 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,031 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,032 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,033 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,033 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,033 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,034 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,034 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,034 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:95: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,035 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,035 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,036 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,036 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,036 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,036 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,037 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,037 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,038 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,038 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,038 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,039 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,039 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,039 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,040 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,040 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,041 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,041 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,041 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,042 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,042 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,042 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,043 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,043 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,043 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,044 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,044 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,044 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,045 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,045 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,046 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,046 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,046 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,047 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,047 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,048 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,048 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,049 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,050 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,050 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,051 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,051 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,052 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,052 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,055 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,056 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,057 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,057 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,058 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,058 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,059 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,059 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,060 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,060 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,061 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,061 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,061 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,062 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,062 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,063 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,063 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,063 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,064 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,064 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,065 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,326 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,327 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,327 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,328 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,328 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,329 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,330 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,331 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,331 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,331 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,332 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,333 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,333 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,333 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,334 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,334 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,335 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,335 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,335 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,336 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,336 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,337 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,337 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,338 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,339 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,340 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,340 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,340 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,341 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,341 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,342 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,342 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,343 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,343 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,343 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,344 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,344 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,344 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,344 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,345 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,346 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,346 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,346 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,347 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,348 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,348 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,348 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,349 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,349 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,349 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,350 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,350 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,350 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,351 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,351 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,351 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,351 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,352 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,352 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,353 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,353 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,354 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,354 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,354 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,355 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,355 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,355 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,356 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,356 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,357 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,357 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,358 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,358 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,359 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,359 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,360 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,361 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,361 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,361 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,362 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,362 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,362 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,363 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,363 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,363 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,364 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,364 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,364 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,365 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,365 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,365 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,366 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,366 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,367 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,367 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,367 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,368 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,368 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,368 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,472 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,473 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,473 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,474 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,475 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,475 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,476 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,476 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,476 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,477 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,477 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,478 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,479 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,479 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,480 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,480 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,481 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,481 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,481 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,482 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,482 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,483 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,484 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,485 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,486 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,487 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,489 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,489 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,490 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,490 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,492 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,493 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,495 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,499 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,500 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,500 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,501 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,502 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,502 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,506 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,506 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,507 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,509 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,510 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,511 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,514 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,515 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,516 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,517 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,518 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,519 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,521 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,522 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,523 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,524 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,525 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,526 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,530 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,530 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,531 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,532 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,533 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,534 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,535 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,536 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,537 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,538 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,539 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,540 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,541 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py:127: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df_forecast[name] = yhat

2025-05-05 02:24:42,564 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:98: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`
  fcst = fcst.fillna(value=np.nan)

2025-05-05 02:24:42,567 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/plot_forecast_plotly.py:100: FutureWarning: The behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result
  ds = fcst["ds"].dt.to_pydatetime()

2025-05-05 02:24:43,903 - INFO - connection closed
2025-05-05 02:24:43,911 - INFO - Shutting down
2025-05-05 02:24:44,012 - INFO - Finished server process [338865]
2025-05-05 02:24:44,022 - ERROR - Traceback (most recent call last):
  File "/usr/lib/python3.12/asyncio/runners.py", line 194, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/runners.py", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "uvloop/loop.pyx", line 1512, in uvloop.loop.Loop.run_until_complete
  File "uvloop/loop.pyx", line 1505, in uvloop.loop.Loop.run_until_complete
  File "uvloop/loop.pyx", line 1379, in uvloop.loop.Loop.run_forever
  File "uvloop/loop.pyx", line 557, in uvloop.loop.Loop._run
  File "uvloop/loop.pyx", line 476, in uvloop.loop.Loop._on_idle
  File "uvloop/cbhandles.pyx", line 83, in uvloop.loop.Handle._run
  File "uvloop/cbhandles.pyx", line 63, in uvloop.loop.Handle._run
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/server.py", line 69, in serve
    with self.capture_signals():
  File "/usr/lib/python3.12/contextlib.py", line 144, in __exit__
    next(self.gen)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/server.py", line 330, in capture_signals
    signal.raise_signal(captured_signal)
  File "/usr/lib/python3.12/asyncio/runners.py", line 157, in _on_sigint
    raise KeyboardInterrupt()
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 699, in lifespan
    await receive()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/lifespan/on.py", line 137, in receive
    return await self.receive_queue.get()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/queues.py", line 158, in get
    await getter
asyncio.exceptions.CancelledError

2025-05-05 02:24:45,444 - INFO - Stopping reloader process [254067]
2025-05-05 02:36:09,611 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 02:36:09,614 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 02:36:09,882 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 02:36:09,883 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 02:36:09,884 - INFO - Started reloader process [361743] using WatchFiles
2025-05-05 02:36:13,122 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 02:36:13,124 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 02:36:13,392 - INFO - Started server process [361796]
2025-05-05 02:36:13,394 - INFO - Waiting for application startup.
2025-05-05 02:36:13,395 - INFO - Application startup complete.
2025-05-05 02:36:36,454 - INFO - ('127.0.0.1', 38128) - "WebSocket /ws?password=$2b$12$VPC6rovTP3U0kpZz4NjmXeUkr/yWEz5n5.DsuMYl78Jgbc18ZDjyO&type=tv" [accepted]
2025-05-05 02:36:36,865 - INFO - connection open
2025-05-05 02:36:37,153 - WARNING - /home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/df_utils.py:1152: FutureWarning: Series.view is deprecated and will be removed in a future version. Use ``astype`` as an alternative to change the dtype.
  converted_ds = pd.to_datetime(ds_col, utc=True).view(dtype=np.int64)

2025-05-05 02:44:15,480 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:14:22,301 - INFO - connection closed
2025-05-05 03:14:22,304 - INFO - Shutting down
2025-05-05 03:14:22,353 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 75, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 134, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 99, in model_training
    with open(model_path, "wb") as f:
         ^^^^^^^^^^^^^^^^^^^^^^
IsADirectoryError: [Errno 21] Is a directory: 'shared/output/MLForecast/VNINBR.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: [Errno 21] Is a directory: 'shared/output/MLForecast/VNINBR.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 03:14:22,406 - INFO - Waiting for application shutdown.
2025-05-05 03:14:22,407 - INFO - Application shutdown complete.
2025-05-05 03:14:22,412 - INFO - Finished server process [361796]
2025-05-05 03:14:22,860 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:14:26,400 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:14:26,402 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:14:26,687 - INFO - Started server process [382179]
2025-05-05 03:14:26,688 - INFO - Waiting for application startup.
2025-05-05 03:14:26,689 - INFO - Application startup complete.
2025-05-05 03:14:53,164 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-05 03:14:53,251 - INFO - Shutting down
2025-05-05 03:14:53,356 - INFO - Waiting for application shutdown.
2025-05-05 03:14:53,357 - INFO - Application shutdown complete.
2025-05-05 03:14:53,357 - INFO - Finished server process [382179]
2025-05-05 03:14:56,818 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:14:56,820 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:14:57,085 - INFO - Started server process [382506]
2025-05-05 03:14:57,087 - INFO - Waiting for application startup.
2025-05-05 03:14:57,088 - INFO - Application startup complete.
2025-05-05 03:15:05,680 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:15:05,720 - INFO - Shutting down
2025-05-05 03:15:05,822 - INFO - Waiting for application shutdown.
2025-05-05 03:15:05,822 - INFO - Application shutdown complete.
2025-05-05 03:15:05,823 - INFO - Finished server process [382506]
2025-05-05 03:15:07,820 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 03:15:09,334 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:15:09,336 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:15:09,611 - INFO - Started server process [382660]
2025-05-05 03:15:09,613 - INFO - Waiting for application startup.
2025-05-05 03:15:09,613 - INFO - Application startup complete.
2025-05-05 03:15:12,899 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:15:12,901 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:15:13,167 - INFO - Started server process [382732]
2025-05-05 03:15:13,169 - INFO - Waiting for application startup.
2025-05-05 03:15:13,169 - INFO - Application startup complete.
2025-05-05 03:15:13,194 - INFO - Stopping reloader process [361743]
2025-05-05 03:15:34,990 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:15:34,992 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:15:35,263 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 03:15:35,264 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 03:15:35,265 - INFO - Started reloader process [383041] using WatchFiles
2025-05-05 03:15:38,770 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:15:38,772 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:15:39,055 - INFO - Started server process [383119]
2025-05-05 03:15:39,057 - INFO - Waiting for application startup.
2025-05-05 03:15:39,057 - INFO - Application startup complete.
2025-05-05 03:16:27,126 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 03:16:27,162 - INFO - Shutting down
2025-05-05 03:16:27,265 - INFO - Waiting for application shutdown.
2025-05-05 03:16:27,265 - INFO - Application shutdown complete.
2025-05-05 03:16:27,266 - INFO - Finished server process [383119]
2025-05-05 03:16:30,526 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:16:30,528 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:16:58,010 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 03:17:01,121 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:17:01,123 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:17:57,383 - INFO - Stopping reloader process [383041]
2025-05-05 03:18:05,368 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:18:05,371 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:22:48,967 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:22:48,970 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:22:49,421 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 03:22:49,422 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 03:22:49,423 - INFO - Started reloader process [387247] using WatchFiles
2025-05-05 03:22:53,420 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:22:53,423 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:22:53,925 - INFO - Started server process [387306]
2025-05-05 03:22:53,926 - INFO - Waiting for application startup.
2025-05-05 03:22:53,927 - INFO - Application startup complete.
2025-05-05 03:23:03,418 - INFO - ('127.0.0.1', 47386) - "WebSocket /ws?password=$2b$12$HoikdOB5vS1DUqC7oQqLxeMbtoxbXphJlf4CfJPrE4qgSk5CAaA2G&type=tv" [accepted]
2025-05-05 03:23:04,117 - INFO - connection open
2025-05-05 03:23:04,401 - INFO - connection closed
2025-05-05 03:23:04,409 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 77, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 123, in model_retrain
    self.models_defined()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 86, in models_defined
    AutoTBATS(seasonal_periods=[5, 20, 240, 480]),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: AutoTBATS.__init__() got an unexpected keyword argument 'seasonal_periods'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: AutoTBATS.__init__() got an unexpected keyword argument 'seasonal_periods'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 03:25:18,944 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:25:19,038 - INFO - Shutting down
2025-05-05 03:25:19,143 - INFO - Waiting for application shutdown.
2025-05-05 03:25:19,146 - INFO - Application shutdown complete.
2025-05-05 03:25:19,147 - INFO - Finished server process [387306]
2025-05-05 03:25:23,205 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:25:23,208 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:25:23,703 - INFO - Started server process [388593]
2025-05-05 03:25:23,706 - INFO - Waiting for application startup.
2025-05-05 03:25:23,706 - INFO - Application startup complete.
2025-05-05 03:25:23,752 - INFO - Stopping reloader process [387247]
2025-05-05 03:25:35,490 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:25:35,493 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:25:35,914 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 03:25:35,915 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 03:25:35,916 - INFO - Started reloader process [388792] using WatchFiles
2025-05-05 03:25:39,849 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:25:39,852 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:25:40,387 - INFO - Started server process [388852]
2025-05-05 03:25:40,389 - INFO - Waiting for application startup.
2025-05-05 03:25:40,389 - INFO - Application startup complete.
2025-05-05 03:25:45,582 - INFO - ('127.0.0.1', 52630) - "WebSocket /ws?password=$2b$12$GUtlVMaOMkulxm8MObf2T.wTAsARjgnuxFWdIYA9Oaw1GdiJJsqOe&type=tv" [accepted]
2025-05-05 03:25:46,157 - INFO - connection open
2025-05-05 03:25:46,453 - INFO - connection closed
2025-05-05 03:25:46,462 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 77, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 123, in model_retrain
    self.models_defined()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 86, in models_defined
    AutoTBATS(),
    ^^^^^^^^^^^
TypeError: AutoTBATS.__init__() missing 1 required positional argument: 'season_length'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: AutoTBATS.__init__() missing 1 required positional argument: 'season_length'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 03:27:05,448 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:27:05,556 - INFO - Shutting down
2025-05-05 03:27:05,663 - INFO - Waiting for application shutdown.
2025-05-05 03:27:05,667 - INFO - Application shutdown complete.
2025-05-05 03:27:05,668 - INFO - Finished server process [388852]
2025-05-05 03:27:09,913 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:27:09,916 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:27:10,435 - INFO - Started server process [389730]
2025-05-05 03:27:10,437 - INFO - Waiting for application startup.
2025-05-05 03:27:10,438 - INFO - Application startup complete.
2025-05-05 03:27:10,474 - INFO - Stopping reloader process [388792]
2025-05-05 03:27:18,553 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:27:18,556 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:27:18,973 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 03:27:18,974 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 03:27:18,974 - INFO - Started reloader process [389886] using WatchFiles
2025-05-05 03:27:22,791 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:27:22,794 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:27:23,326 - INFO - Started server process [389947]
2025-05-05 03:27:23,328 - INFO - Waiting for application startup.
2025-05-05 03:27:23,329 - INFO - Application startup complete.
2025-05-05 03:27:31,949 - INFO - ('127.0.0.1', 39772) - "WebSocket /ws?password=$2b$12$VsMpjeW71CZwW8IMwkJPiOkraCT2efCKft2AwCBWNXUtTBkX6HA7u&type=tv" [accepted]
2025-05-05 03:27:32,584 - INFO - connection open
2025-05-05 03:28:10,203 - INFO - connection closed
2025-05-05 03:28:10,223 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 77, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 124, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 108, in model_training
    self.predictor.save(os.path.join(self.OUTPUT_PATH, f"{self.type}.pkl"))
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 1386, in save
    with open(path, "wb") as m_file:
         ^^^^^^^^^^^^^^^^
IsADirectoryError: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 03:29:31,512 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:29:31,532 - INFO - Shutting down
2025-05-05 03:29:31,638 - INFO - Waiting for application shutdown.
2025-05-05 03:29:31,639 - INFO - Application shutdown complete.
2025-05-05 03:29:31,640 - INFO - Finished server process [389947]
2025-05-05 03:29:35,808 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:29:35,812 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:29:36,348 - INFO - Started server process [391197]
2025-05-05 03:29:36,353 - INFO - Waiting for application startup.
2025-05-05 03:29:36,354 - INFO - Application startup complete.
2025-05-05 03:29:38,696 - INFO - Shutting down
2025-05-05 03:29:38,798 - INFO - Waiting for application shutdown.
2025-05-05 03:29:38,798 - INFO - Application shutdown complete.
2025-05-05 03:29:38,799 - INFO - Finished server process [391197]
2025-05-05 03:29:38,838 - INFO - Stopping reloader process [389886]
2025-05-05 03:29:52,936 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:29:52,938 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:29:53,354 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 03:29:53,355 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 03:29:53,356 - INFO - Started reloader process [391444] using WatchFiles
2025-05-05 03:29:57,031 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:29:57,033 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:29:57,601 - INFO - Started server process [391511]
2025-05-05 03:29:57,604 - INFO - Waiting for application startup.
2025-05-05 03:29:57,605 - INFO - Application startup complete.
2025-05-05 03:30:05,553 - INFO - ('127.0.0.1', 35374) - "WebSocket /ws?password=$2b$12$KqP0WWrhR.afkdCrUHpZQe3MyTx2cAf8Irlj0k/0HbTYS5WN5Imsy&type=tv" [accepted]
2025-05-05 03:30:06,241 - INFO - connection open
2025-05-05 03:30:44,149 - INFO - connection closed
2025-05-05 03:30:44,174 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 77, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 124, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 109, in model_training
    self.pred.to_excel(os.path.join(self.OUTPUT_PATH, f"{self.type}.xlsx"))
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/util/_decorators.py", line 333, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/generic.py", line 2417, in to_excel
    formatter.write(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/io/formats/excel.py", line 943, in write
    writer = ExcelWriter(
             ^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/io/excel/_openpyxl.py", line 57, in __init__
    from openpyxl.workbook import Workbook
ModuleNotFoundError: No module named 'openpyxl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: No module named 'openpyxl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 03:32:10,849 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:32:10,928 - INFO - Shutting down
2025-05-05 03:32:11,043 - INFO - Waiting for application shutdown.
2025-05-05 03:32:11,047 - INFO - Application shutdown complete.
2025-05-05 03:32:11,048 - INFO - Finished server process [391511]
2025-05-05 03:32:15,252 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:32:15,255 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:32:15,705 - INFO - Started server process [392784]
2025-05-05 03:32:15,708 - INFO - Waiting for application startup.
2025-05-05 03:32:15,708 - INFO - Application startup complete.
2025-05-05 03:32:16,615 - INFO - Shutting down
2025-05-05 03:32:16,716 - INFO - Waiting for application shutdown.
2025-05-05 03:32:16,717 - INFO - Application shutdown complete.
2025-05-05 03:32:16,717 - INFO - Finished server process [392784]
2025-05-05 03:32:16,750 - INFO - Stopping reloader process [391444]
2025-05-05 03:32:26,419 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:32:26,421 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:32:26,856 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 03:32:26,857 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 03:32:26,857 - INFO - Started reloader process [392943] using WatchFiles
2025-05-05 03:32:30,739 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:32:30,742 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:32:31,355 - INFO - Started server process [392997]
2025-05-05 03:32:31,358 - INFO - Waiting for application startup.
2025-05-05 03:32:31,359 - INFO - Application startup complete.
2025-05-05 03:32:34,984 - INFO - ('127.0.0.1', 45438) - "WebSocket /ws?password=$2b$12$cph9HQVzuH10gHi/VJU/EeWVAk3ziq0CqgyVxU21oWPPgtrhPB1nq&type=tv" [accepted]
2025-05-05 03:32:35,500 - INFO - connection open
2025-05-05 03:33:13,050 - INFO - connection closed
2025-05-05 03:33:13,084 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 84, in websocket_endpoint
    service.save_forecast(db)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 94, in save_forecast
    for sub_model_name, data in model.forecast.items():
                                ^^^^^^^^^^^^^^
AttributeError: 'StatsForecastModel' object has no attribute 'forecast'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'StatsForecastModel' object has no attribute 'forecast'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 03:34:36,672 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:34:36,716 - INFO - Shutting down
2025-05-05 03:34:36,833 - INFO - Waiting for application shutdown.
2025-05-05 03:34:36,837 - INFO - Application shutdown complete.
2025-05-05 03:34:36,838 - INFO - Finished server process [392997]
2025-05-05 03:34:41,060 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:34:41,062 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:34:41,562 - INFO - Started server process [394191]
2025-05-05 03:34:41,564 - INFO - Waiting for application startup.
2025-05-05 03:34:41,565 - INFO - Application startup complete.
2025-05-05 03:34:49,078 - INFO - Shutting down
2025-05-05 03:34:49,181 - INFO - Waiting for application shutdown.
2025-05-05 03:34:49,182 - INFO - Application shutdown complete.
2025-05-05 03:34:49,182 - INFO - Finished server process [394191]
2025-05-05 03:34:49,214 - INFO - Stopping reloader process [392943]
2025-05-05 03:34:56,992 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:34:56,994 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:34:57,407 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 03:34:57,408 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 03:34:57,409 - INFO - Started reloader process [394402] using WatchFiles
2025-05-05 03:35:01,437 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:35:01,443 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:35:02,165 - INFO - Started server process [394464]
2025-05-05 03:35:02,169 - INFO - Waiting for application startup.
2025-05-05 03:35:02,170 - INFO - Application startup complete.
2025-05-05 03:35:04,732 - INFO - ('127.0.0.1', 37816) - "WebSocket /ws?password=$2b$12$BQPXZoLcgCsDo0.g4JJcue9bnPmI72axgrWPs2EHsWlbCVYkk0bP2&type=tv" [accepted]
2025-05-05 03:35:05,423 - INFO - connection open
2025-05-05 03:35:43,347 - INFO - connection closed
2025-05-05 03:35:43,380 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 84, in websocket_endpoint
    service.save_forecast(db)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 131, in save_forecast
    for row in data.itertuples(index=False)
               ^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/generic.py", line 6299, in __getattr__
    return object.__getattribute__(self, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'Series' object has no attribute 'itertuples'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'Series' object has no attribute 'itertuples'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 03:41:44,746 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:41:44,814 - INFO - Shutting down
2025-05-05 03:41:44,925 - INFO - Waiting for application shutdown.
2025-05-05 03:41:44,927 - INFO - Application shutdown complete.
2025-05-05 03:41:44,928 - INFO - Finished server process [394464]
2025-05-05 03:41:49,280 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:41:49,284 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:41:49,796 - INFO - Started server process [397649]
2025-05-05 03:41:49,798 - INFO - Waiting for application startup.
2025-05-05 03:41:49,799 - INFO - Application startup complete.
2025-05-05 03:41:54,135 - INFO - Shutting down
2025-05-05 03:41:54,236 - INFO - Waiting for application shutdown.
2025-05-05 03:41:54,237 - INFO - Application shutdown complete.
2025-05-05 03:41:54,237 - INFO - Finished server process [397649]
2025-05-05 03:41:54,268 - INFO - Stopping reloader process [394402]
2025-05-05 03:42:01,842 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:42:01,846 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:42:02,285 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 03:42:02,286 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 03:42:02,286 - INFO - Started reloader process [397821] using WatchFiles
2025-05-05 03:42:05,276 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:42:05,278 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:42:05,707 - INFO - Started server process [397891]
2025-05-05 03:42:05,710 - INFO - Waiting for application startup.
2025-05-05 03:42:05,711 - INFO - Application startup complete.
2025-05-05 03:42:29,523 - INFO - ('127.0.0.1', 36814) - "WebSocket /ws?password=$2b$12$cGatbuXARs75Ffgn0r5sDOb35h7h6FR5KpFBsxYriX2MXQ8Sduc8.&type=tv" [accepted]
2025-05-05 03:42:30,259 - INFO - connection open
2025-05-05 03:43:07,297 - INFO - connection closed
2025-05-05 03:43:07,311 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 77, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 137, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 113, in model_training
    raise ValueError("No forecast column found (e.g., yhat). Check forecast output.")
ValueError: No forecast column found (e.g., yhat). Check forecast output.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: No forecast column found (e.g., yhat). Check forecast output.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 03:45:34,748 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:45:34,854 - INFO - Shutting down
2025-05-05 03:45:34,960 - INFO - Waiting for application shutdown.
2025-05-05 03:45:34,962 - INFO - Application shutdown complete.
2025-05-05 03:45:34,963 - INFO - Finished server process [397891]
2025-05-05 03:45:38,951 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:45:38,955 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:45:39,446 - INFO - Started server process [399700]
2025-05-05 03:45:39,448 - INFO - Waiting for application startup.
2025-05-05 03:45:39,448 - INFO - Application startup complete.
2025-05-05 03:45:39,483 - INFO - Stopping reloader process [397821]
2025-05-05 03:45:53,834 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:45:53,838 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:45:54,255 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 03:45:54,255 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 03:45:54,256 - INFO - Started reloader process [399915] using WatchFiles
2025-05-05 03:45:57,304 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:45:57,306 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:45:57,714 - INFO - Started server process [399973]
2025-05-05 03:45:57,715 - INFO - Waiting for application startup.
2025-05-05 03:45:57,716 - INFO - Application startup complete.
2025-05-05 03:46:13,842 - INFO - ('127.0.0.1', 51242) - "WebSocket /ws?password=$2b$12$sxbNCsmCHBTS/yrZqB4QlOsJG2Rzuth46CJirbRj56m.QvlVutXai&type=tv" [accepted]
2025-05-05 03:46:14,463 - INFO - connection open
2025-05-05 03:48:36,626 - INFO - connection closed
2025-05-05 03:48:36,638 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 77, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 134, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 111, in model_training
    raise ValueError("No forecast column 'mean' found. Check forecast output.")
ValueError: No forecast column 'mean' found. Check forecast output.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: No forecast column 'mean' found. Check forecast output.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 03:53:35,727 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-05 03:53:35,797 - INFO - Shutting down
2025-05-05 03:53:35,903 - INFO - Waiting for application shutdown.
2025-05-05 03:53:35,905 - INFO - Application shutdown complete.
2025-05-05 03:53:35,906 - INFO - Finished server process [399973]
2025-05-05 03:53:40,353 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:53:40,356 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:53:40,846 - INFO - Started server process [402826]
2025-05-05 03:53:40,848 - INFO - Waiting for application startup.
2025-05-05 03:53:40,849 - INFO - Application startup complete.
2025-05-05 03:53:40,885 - INFO - Stopping reloader process [399915]
2025-05-05 03:54:00,989 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:54:00,992 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:54:01,458 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 03:54:01,459 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 03:54:01,460 - INFO - Started reloader process [403158] using WatchFiles
2025-05-05 03:54:05,944 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:54:05,947 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:54:06,530 - INFO - Started server process [403229]
2025-05-05 03:54:06,534 - INFO - Waiting for application startup.
2025-05-05 03:54:06,535 - INFO - Application startup complete.
2025-05-05 03:54:08,722 - INFO - ('127.0.0.1', 38534) - "WebSocket /ws?password=$2b$12$dKDlKgrYCFs4skrUuxVVxOBeD/k.CNz2sTz22s8uHcUbdvEAddhpK&type=tv" [accepted]
2025-05-05 03:54:09,294 - INFO - connection open
2025-05-05 03:54:47,496 - INFO - connection closed
2025-05-05 03:57:03,983 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 03:57:04,075 - INFO - Shutting down
2025-05-05 03:57:04,182 - INFO - Waiting for application shutdown.
2025-05-05 03:57:04,187 - INFO - Application shutdown complete.
2025-05-05 03:57:04,188 - INFO - Finished server process [403229]
2025-05-05 03:57:09,044 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:57:09,047 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:57:09,604 - INFO - Started server process [405434]
2025-05-05 03:57:09,607 - INFO - Waiting for application startup.
2025-05-05 03:57:09,607 - INFO - Application startup complete.
2025-05-05 03:57:15,830 - INFO - ('127.0.0.1', 59770) - "WebSocket /ws?password=$2b$12$2BSFQJOhSZ2Y2nyF/BdazOgganjDHfABV82hzeCfQ9T.TV6WG4Gpe&type=tv" [accepted]
2025-05-05 03:57:16,379 - INFO - connection open
2025-05-05 03:59:04,648 - INFO - connection closed
2025-05-05 03:59:35,659 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 03:59:35,762 - INFO - Shutting down
2025-05-05 03:59:35,867 - INFO - Waiting for application shutdown.
2025-05-05 03:59:35,869 - INFO - Application shutdown complete.
2025-05-05 03:59:35,870 - INFO - Finished server process [405434]
2025-05-05 03:59:40,866 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:59:40,870 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 03:59:41,464 - INFO - Started server process [406784]
2025-05-05 03:59:41,468 - INFO - Waiting for application startup.
2025-05-05 03:59:41,469 - INFO - Application startup complete.
2025-05-05 03:59:41,508 - INFO - ('127.0.0.1', 35498) - "WebSocket /ws?password=$2b$12$2aoGNXt/JmNaKTRBXyzaReh1YyEkoMWKmbRvpqP9CeB0UvkJp5zja&type=tv" [accepted]
2025-05-05 03:59:42,146 - INFO - connection open
2025-05-05 04:01:54,679 - INFO - connection closed
2025-05-05 04:02:23,408 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 04:02:23,509 - INFO - Shutting down
2025-05-05 04:02:23,611 - INFO - Waiting for application shutdown.
2025-05-05 04:02:23,612 - INFO - Application shutdown complete.
2025-05-05 04:02:23,613 - INFO - Finished server process [406784]
2025-05-05 04:02:27,893 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 04:02:27,897 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 04:02:28,378 - INFO - Started server process [408229]
2025-05-05 04:02:28,381 - INFO - Waiting for application startup.
2025-05-05 04:02:28,382 - INFO - Application startup complete.
2025-05-05 04:03:26,182 - INFO - ('127.0.0.1', 52382) - "WebSocket /ws?password=$2b$12$WwbgY9tYzXAFI3OCJZ91Q.XPorYbcSQdgTwOqoqfvgitgP1qshNB2&type=tv" [accepted]
2025-05-05 04:03:27,037 - INFO - connection open
2025-05-05 04:08:45,442 - INFO - connection closed
2025-05-05 04:08:45,486 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 134, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 99, in model_training
    with open(model_path, "wb") as f:
         ^^^^^^^^^^^^^^^^^^^^^^
IsADirectoryError: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: [Errno 21] Is a directory: 'shared/output/MLForecast/VN10Y.pkl'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 04:09:58,507 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-05 04:09:58,587 - INFO - Shutting down
2025-05-05 04:09:58,696 - INFO - Waiting for application shutdown.
2025-05-05 04:09:58,699 - INFO - Application shutdown complete.
2025-05-05 04:09:58,700 - INFO - Finished server process [408229]
2025-05-05 04:10:05,733 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 04:10:05,745 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 04:10:06,451 - INFO - Started server process [413018]
2025-05-05 04:10:06,453 - INFO - Waiting for application startup.
2025-05-05 04:10:06,454 - INFO - Application startup complete.
2025-05-05 04:12:02,375 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 04:12:02,461 - INFO - Shutting down
2025-05-05 04:12:02,573 - INFO - Waiting for application shutdown.
2025-05-05 04:12:02,574 - INFO - Application shutdown complete.
2025-05-05 04:12:02,575 - INFO - Finished server process [413018]
2025-05-05 04:12:07,459 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 04:12:07,463 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 04:12:08,045 - INFO - Started server process [414009]
2025-05-05 04:12:08,047 - INFO - Waiting for application startup.
2025-05-05 04:12:08,048 - INFO - Application startup complete.
2025-05-05 04:12:16,809 - INFO - ('127.0.0.1', 32844) - "WebSocket /ws?password=$2b$12$kXZ1jbDeOnJeg5WxuVbqWOAyZ5FtKLL.K8wSwjswny.zMrPV4OqsO&type=tv" [accepted]
2025-05-05 04:12:17,513 - INFO - connection open
2025-05-05 05:16:17,656 - INFO - connection closed
2025-05-05 05:59:12,076 - INFO - ('127.0.0.1', 32824) - "WebSocket /ws?password=$2b$12$3nygWdwwQw7fBjbdGFIFu.AMQ1fT.tZQEa3b/oCKUlKC193tM/s8.&type=tv" [accepted]
2025-05-05 05:59:13,472 - INFO - connection open
2025-05-05 07:04:01,230 - INFO - connection closed
2025-05-05 07:09:09,963 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 07:09:09,974 - INFO - Shutting down
2025-05-05 07:09:10,086 - INFO - Waiting for application shutdown.
2025-05-05 07:09:10,096 - INFO - Application shutdown complete.
2025-05-05 07:09:10,098 - INFO - Finished server process [414009]
2025-05-05 07:09:12,112 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 07:09:18,351 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 07:09:18,366 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 07:09:19,107 - INFO - Started server process [506483]
2025-05-05 07:09:19,110 - INFO - Waiting for application startup.
2025-05-05 07:09:19,111 - INFO - Application startup complete.
2025-05-05 07:09:19,530 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 07:09:24,227 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 07:09:24,231 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 07:09:24,756 - INFO - Started server process [506623]
2025-05-05 07:09:24,758 - INFO - Waiting for application startup.
2025-05-05 07:09:24,759 - INFO - Application startup complete.
2025-05-05 07:09:27,325 - INFO - Shutting down
2025-05-05 07:09:27,435 - INFO - Waiting for application shutdown.
2025-05-05 07:09:27,437 - INFO - Application shutdown complete.
2025-05-05 07:09:27,437 - INFO - Finished server process [506623]
2025-05-05 07:09:27,517 - INFO - Stopping reloader process [403158]
2025-05-05 07:09:54,670 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 07:09:54,674 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 07:09:55,259 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 07:09:55,260 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 07:09:55,261 - INFO - Started reloader process [507014] using WatchFiles
2025-05-05 07:09:59,606 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 07:09:59,609 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 07:10:00,053 - INFO - Started server process [507117]
2025-05-05 07:10:00,055 - INFO - Waiting for application startup.
2025-05-05 07:10:00,056 - INFO - Application startup complete.
2025-05-05 07:10:22,247 - INFO - ('127.0.0.1', 56246) - "WebSocket /ws?password=$2b$12$.BItjBhdnsqfYiN4.mWABeLAp3LX6Y.U9bv7V74rycjr5SpCfPksO&type=tv" [accepted]
2025-05-05 07:10:23,399 - INFO - connection open
2025-05-05 08:24:11,846 - INFO - connection closed
2025-05-05 08:41:03,128 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 08:41:03,171 - INFO - Shutting down
2025-05-05 08:41:03,286 - INFO - Waiting for application shutdown.
2025-05-05 08:41:03,288 - INFO - Application shutdown complete.
2025-05-05 08:41:03,289 - INFO - Finished server process [507117]
2025-05-05 08:41:09,760 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 08:41:09,768 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 08:41:10,482 - INFO - Started server process [555069]
2025-05-05 08:41:10,484 - INFO - Waiting for application startup.
2025-05-05 08:41:10,485 - INFO - Application startup complete.
2025-05-05 08:41:13,744 - INFO - Shutting down
2025-05-05 08:41:13,847 - INFO - Waiting for application shutdown.
2025-05-05 08:41:13,848 - INFO - Application shutdown complete.
2025-05-05 08:41:13,853 - INFO - Finished server process [555069]
2025-05-05 08:41:13,918 - INFO - Stopping reloader process [507014]
2025-05-05 08:41:38,122 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 08:41:38,126 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 08:41:38,595 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 08:41:38,596 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 08:41:38,597 - INFO - Started reloader process [555478] using WatchFiles
2025-05-05 08:41:42,590 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 08:41:42,593 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 08:41:43,050 - INFO - Started server process [555565]
2025-05-05 08:41:43,052 - INFO - Waiting for application startup.
2025-05-05 08:41:43,053 - INFO - Application startup complete.
2025-05-05 08:41:54,973 - INFO - ('127.0.0.1', 33786) - "WebSocket /ws?password=$2b$12$1zwq9fowDMDsv00oN9Gnce0wBfUPkdI2Zw/SxWplEBf15sYR4Nv.y&type=tv" [accepted]
2025-05-05 08:41:55,624 - INFO - connection open
2025-05-05 09:57:55,051 - INFO - connection closed
2025-05-05 10:12:55,241 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 10:12:55,357 - INFO - Shutting down
2025-05-05 10:12:55,469 - INFO - Waiting for application shutdown.
2025-05-05 10:12:55,472 - INFO - Application shutdown complete.
2025-05-05 10:12:55,474 - INFO - Finished server process [555565]
2025-05-05 10:13:00,462 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 10:13:00,473 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 10:13:01,087 - INFO - Started server process [604117]
2025-05-05 10:13:01,090 - INFO - Waiting for application startup.
2025-05-05 10:13:01,090 - INFO - Application startup complete.
2025-05-05 10:13:07,519 - INFO - ('127.0.0.1', 38626) - "WebSocket /ws?password=$2b$12$GYLdw4WJAG.Ke08CaLnyUOYOCosatpF82TZYN3brwEoWoIvp7cuSu&type=tv" [accepted]
2025-05-05 10:13:08,236 - INFO - connection open
2025-05-05 13:21:47,839 - INFO - connection closed
2025-05-05 13:54:06,671 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-05 13:54:06,753 - INFO - Shutting down
2025-05-05 13:54:06,864 - INFO - Waiting for application shutdown.
2025-05-05 13:54:06,865 - INFO - Application shutdown complete.
2025-05-05 13:54:06,866 - INFO - Finished server process [604117]
2025-05-05 13:54:11,647 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 13:54:11,650 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 13:54:12,168 - INFO - Started server process [655797]
2025-05-05 13:54:12,170 - INFO - Waiting for application startup.
2025-05-05 13:54:12,171 - INFO - Application startup complete.
2025-05-05 13:54:15,697 - INFO - Shutting down
2025-05-05 13:54:15,799 - INFO - Waiting for application shutdown.
2025-05-05 13:54:15,800 - INFO - Application shutdown complete.
2025-05-05 13:54:15,800 - INFO - Finished server process [655797]
2025-05-05 13:54:15,853 - INFO - Stopping reloader process [555478]
2025-05-05 13:54:28,074 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 13:54:28,078 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 13:54:28,544 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 13:54:28,545 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 13:54:28,546 - INFO - Started reloader process [656023] using WatchFiles
2025-05-05 13:54:32,542 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 13:54:32,546 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 13:54:33,108 - INFO - Started server process [656097]
2025-05-05 13:54:33,111 - INFO - Waiting for application startup.
2025-05-05 13:54:33,112 - INFO - Application startup complete.
2025-05-05 13:54:36,293 - INFO - ('127.0.0.1', 51774) - "WebSocket /ws?password=$2b$12$Zsw1A93O3tu.Xh8GEHdDTevFNIfyvaLgZgMBRpUOmAwMqniOvWFGi&type=tv" [accepted]
2025-05-05 13:54:36,949 - INFO - connection open
2025-05-05 14:02:04,955 - INFO - connection closed
2025-05-05 14:02:55,672 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-05 14:02:55,702 - INFO - Shutting down
2025-05-05 14:02:55,822 - INFO - Waiting for application shutdown.
2025-05-05 14:02:55,825 - INFO - Application shutdown complete.
2025-05-05 14:02:55,828 - INFO - Finished server process [656097]
2025-05-05 14:03:00,095 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:03:00,099 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:03:00,600 - INFO - Started server process [661946]
2025-05-05 14:03:00,602 - INFO - Waiting for application startup.
2025-05-05 14:03:00,602 - INFO - Application startup complete.
2025-05-05 14:03:52,925 - INFO - Shutting down
2025-05-05 14:03:53,031 - INFO - Waiting for application shutdown.
2025-05-05 14:03:53,033 - INFO - Application shutdown complete.
2025-05-05 14:03:53,034 - INFO - Finished server process [661946]
2025-05-05 14:03:53,108 - INFO - Stopping reloader process [656023]
2025-05-05 14:09:07,142 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:09:07,144 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:09:07,622 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 14:09:07,623 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 14:09:07,623 - INFO - Started reloader process [664888] using WatchFiles
2025-05-05 14:09:11,090 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:09:11,093 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:09:11,548 - INFO - Started server process [664968]
2025-05-05 14:09:11,550 - INFO - Waiting for application startup.
2025-05-05 14:09:11,550 - INFO - Application startup complete.
2025-05-05 14:20:28,505 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-05 14:20:28,591 - INFO - Shutting down
2025-05-05 14:20:28,696 - INFO - Waiting for application shutdown.
2025-05-05 14:20:28,699 - INFO - Application shutdown complete.
2025-05-05 14:20:28,699 - INFO - Finished server process [664968]
2025-05-05 14:20:33,486 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:20:33,489 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:20:33,997 - INFO - Started server process [670071]
2025-05-05 14:20:33,999 - INFO - Waiting for application startup.
2025-05-05 14:20:34,000 - INFO - Application startup complete.
2025-05-05 14:20:40,177 - INFO - ('127.0.0.1', 51792) - "WebSocket /ws?password=$2b$12$bC/6/icok3WaNrWzzqAXwOj231cIVHiy1VZ017zxyAz/V0NP3HGM.&type=tv" [accepted]
2025-05-05 14:20:40,813 - INFO - connection open
2025-05-05 14:33:45,845 - INFO - connection closed
2025-05-05 14:36:32,219 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-05 14:36:32,305 - INFO - Shutting down
2025-05-05 14:36:32,413 - INFO - Waiting for application shutdown.
2025-05-05 14:36:32,416 - INFO - Application shutdown complete.
2025-05-05 14:36:32,417 - INFO - Finished server process [670071]
2025-05-05 14:36:36,830 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:36:36,836 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:36:37,483 - INFO - Started server process [680693]
2025-05-05 14:36:37,485 - INFO - Waiting for application startup.
2025-05-05 14:36:37,486 - INFO - Application startup complete.
2025-05-05 14:36:51,480 - INFO - ('127.0.0.1', 55940) - "WebSocket /ws?password=$2b$12$zPa0jHUfMniRFhMNNx0NuOcr6f0uT5b2z2VFJkK/7u9/3tKCoPzge&type=tv" [accepted]
2025-05-05 14:36:52,243 - INFO - connection open
2025-05-05 14:49:31,720 - INFO - connection closed
2025-05-05 14:49:31,721 - INFO - Shutting down
2025-05-05 14:49:31,822 - INFO - Finished server process [680693]
2025-05-05 14:49:31,878 - INFO - Stopping reloader process [664888]
2025-05-05 14:57:07,419 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:57:07,422 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:57:07,878 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 14:57:07,880 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 14:57:07,880 - INFO - Started reloader process [693223] using WatchFiles
2025-05-05 14:57:11,878 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:57:11,882 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 14:57:12,469 - INFO - Started server process [693298]
2025-05-05 14:57:12,472 - INFO - Waiting for application startup.
2025-05-05 14:57:12,473 - INFO - Application startup complete.
2025-05-05 14:57:14,392 - INFO - ('127.0.0.1', 54848) - "WebSocket /ws?password=$2b$12$bXTKibN4jG7iUull/kkhWe0kdxKf5VP9y1aXU.Y8RBD5bprVA1/I2&type=tv" [accepted]
2025-05-05 14:57:14,980 - INFO - connection open
2025-05-05 15:00:20,045 - INFO - connection closed
2025-05-05 15:00:20,081 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 166, in model_retrain
    self.model_forecasting()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 122, in model_forecasting
    future = self.model.make_future_dataframe(
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: NeuralProphet.make_future_dataframe() got an unexpected keyword argument 'last_date'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: NeuralProphet.make_future_dataframe() got an unexpected keyword argument 'last_date'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-05 15:11:33,345 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-05 15:11:33,392 - INFO - Shutting down
2025-05-05 15:11:33,507 - INFO - Waiting for application shutdown.
2025-05-05 15:11:33,512 - INFO - Application shutdown complete.
2025-05-05 15:11:33,524 - INFO - Finished server process [693298]
2025-05-05 15:11:37,896 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 15:11:37,899 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 15:11:38,428 - INFO - Started server process [700575]
2025-05-05 15:11:38,430 - INFO - Waiting for application startup.
2025-05-05 15:11:38,430 - INFO - Application startup complete.
2025-05-05 15:11:38,468 - INFO - Stopping reloader process [693223]
2025-05-05 15:11:48,931 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 15:11:48,933 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 15:11:49,350 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 15:11:49,351 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 15:11:49,352 - INFO - Started reloader process [700735] using WatchFiles
2025-05-05 15:11:53,896 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 15:11:53,900 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 15:11:54,565 - INFO - Started server process [700793]
2025-05-05 15:11:54,568 - INFO - Waiting for application startup.
2025-05-05 15:11:54,570 - INFO - Application startup complete.
2025-05-05 15:12:03,599 - INFO - ('127.0.0.1', 56016) - "WebSocket /ws?password=$2b$12$nqUqRDLxGFiG9YiYR4CAN.olDc/vHgY5Y63mykzL81YqRiNC5S4f6&type=tv" [accepted]
2025-05-05 15:12:04,317 - INFO - connection open
2025-05-05 15:25:29,484 - INFO - connection closed
2025-05-05 15:27:42,117 - INFO - Shutting down
2025-05-05 15:27:42,227 - INFO - Waiting for application shutdown.
2025-05-05 15:27:42,231 - INFO - Application shutdown complete.
2025-05-05 15:27:42,237 - INFO - Finished server process [700793]
2025-05-05 15:27:42,303 - INFO - Stopping reloader process [700735]
2025-05-05 15:28:06,386 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 15:28:06,389 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 15:28:06,860 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-05 15:28:06,861 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-05 15:28:06,862 - INFO - Started reloader process [711731] using WatchFiles
2025-05-05 15:28:10,158 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 15:28:10,160 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-05 15:28:10,591 - INFO - Started server process [711798]
2025-05-05 15:28:10,593 - INFO - Waiting for application startup.
2025-05-05 15:28:10,594 - INFO - Application startup complete.
2025-05-06 01:42:01,389 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 01:42:01,496 - INFO - Shutting down
2025-05-06 01:42:01,603 - INFO - Waiting for application shutdown.
2025-05-06 01:42:01,605 - INFO - Application shutdown complete.
2025-05-06 01:42:01,605 - INFO - Finished server process [711798]
2025-05-06 01:42:05,873 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 01:42:05,876 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 01:42:06,373 - INFO - Started server process [714415]
2025-05-06 01:42:06,375 - INFO - Waiting for application startup.
2025-05-06 01:42:06,376 - INFO - Application startup complete.
2025-05-06 01:42:17,237 - INFO - ('127.0.0.1', 33446) - "WebSocket /ws?password=$2b$12$k0AVJhVbvf9HX/K7LKy6AuqkNDsHsOYAWL8vUQW7jmI5PEZQrCf2a&type=tv" [accepted]
2025-05-06 01:42:17,854 - INFO - connection open
2025-05-06 01:55:05,498 - INFO - connection closed
2025-05-06 02:48:29,962 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 02:48:30,045 - INFO - Shutting down
2025-05-06 02:48:30,152 - INFO - Waiting for application shutdown.
2025-05-06 02:48:30,156 - INFO - Application shutdown complete.
2025-05-06 02:48:30,157 - INFO - Finished server process [714415]
2025-05-06 02:48:34,134 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 02:48:34,137 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 02:48:34,626 - INFO - Started server process [734919]
2025-05-06 02:48:34,628 - INFO - Waiting for application startup.
2025-05-06 02:48:34,628 - INFO - Application startup complete.
2025-05-06 02:48:34,661 - INFO - Stopping reloader process [711731]
2025-05-06 02:48:54,865 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 02:48:54,868 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 02:48:55,313 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-06 02:48:55,313 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-06 02:48:55,314 - INFO - Started reloader process [735260] using WatchFiles
2025-05-06 02:48:58,309 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 02:48:58,311 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 02:48:58,723 - INFO - Started server process [735314]
2025-05-06 02:48:58,725 - INFO - Waiting for application startup.
2025-05-06 02:48:58,725 - INFO - Application startup complete.
2025-05-06 02:51:15,872 - INFO - ('127.0.0.1', 47710) - "WebSocket /ws?password=$2b$12$RmAGo85ANU3F7EvfyFE8UeQSaVjxSvFDvZKjRVSRlm1HEJUraU5Fm&type=tv" [accepted]
2025-05-06 02:51:16,492 - INFO - connection open
2025-05-06 03:05:16,135 - INFO - connection closed
2025-05-06 08:08:36,184 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 08:08:36,293 - INFO - Shutting down
2025-05-06 08:08:36,430 - INFO - Waiting for application shutdown.
2025-05-06 08:08:36,436 - INFO - Application shutdown complete.
2025-05-06 08:08:36,437 - INFO - Finished server process [735314]
2025-05-06 08:08:43,508 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:08:43,514 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:08:44,249 - INFO - Started server process [866310]
2025-05-06 08:08:44,252 - INFO - Waiting for application startup.
2025-05-06 08:08:44,253 - INFO - Application startup complete.
2025-05-06 08:08:44,328 - INFO - Stopping reloader process [735260]
2025-05-06 08:08:57,031 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:08:57,034 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:08:57,610 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-06 08:08:57,612 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-06 08:08:57,613 - INFO - Started reloader process [866542] using WatchFiles
2025-05-06 08:09:02,352 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:09:02,355 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:09:03,012 - INFO - Started server process [866617]
2025-05-06 08:09:03,017 - INFO - Waiting for application startup.
2025-05-06 08:09:03,020 - INFO - Application startup complete.
2025-05-06 08:09:07,432 - INFO - ('127.0.0.1', 39954) - "WebSocket /ws?password=$2b$12$aDelpnBF2kvhW.E3tn0tc.3906WkjnWUcuIN41/tK0PJ6sL2iQQj.&type=tv" [accepted]
2025-05-06 08:09:08,230 - INFO - connection open
2025-05-06 08:09:08,549 - INFO - connection closed
2025-05-06 08:09:08,559 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 70, in model_training
    NeuralProphetModel("VN10Y", self.data["VN10Y"]),
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 29, in __init__
    self.data_processing()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 48, in data_processing
    df = df.replace([np.inf, -np.inf], np.nan)
                     ^^
NameError: name 'np' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: name 'np' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-06 08:12:44,133 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 08:12:44,155 - INFO - Shutting down
2025-05-06 08:12:44,262 - INFO - Waiting for application shutdown.
2025-05-06 08:12:44,264 - INFO - Application shutdown complete.
2025-05-06 08:12:44,273 - INFO - Finished server process [866617]
2025-05-06 08:12:48,534 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:12:48,537 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:12:49,020 - INFO - Started server process [868429]
2025-05-06 08:12:49,022 - INFO - Waiting for application startup.
2025-05-06 08:12:49,023 - INFO - Application startup complete.
2025-05-06 08:13:13,241 - INFO - Shutting down
2025-05-06 08:13:13,344 - INFO - Waiting for application shutdown.
2025-05-06 08:13:13,345 - INFO - Application shutdown complete.
2025-05-06 08:13:13,346 - INFO - Finished server process [868429]
2025-05-06 08:13:13,406 - INFO - Stopping reloader process [866542]
2025-05-06 08:13:21,836 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:13:21,839 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:13:22,281 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-06 08:13:22,282 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-06 08:13:22,283 - INFO - Started reloader process [868770] using WatchFiles
2025-05-06 08:13:25,532 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:13:25,534 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:13:25,968 - INFO - Started server process [868831]
2025-05-06 08:13:25,970 - INFO - Waiting for application startup.
2025-05-06 08:13:25,971 - INFO - Application startup complete.
2025-05-06 08:13:37,878 - INFO - ('127.0.0.1', 54514) - "WebSocket /ws?password=$2b$12$rbqpeMi3akG/66r1dxLTIuMXMYRp.AmvJ44WUESznwaEcwj8uxQGW&type=tv" [accepted]
2025-05-06 08:13:38,569 - INFO - connection open
2025-05-06 08:18:57,303 - INFO - connection closed
2025-05-06 08:27:04,806 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 08:27:04,884 - INFO - Shutting down
2025-05-06 08:27:04,996 - INFO - Waiting for application shutdown.
2025-05-06 08:27:04,998 - INFO - Application shutdown complete.
2025-05-06 08:27:04,999 - INFO - Finished server process [868831]
2025-05-06 08:27:09,490 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:27:09,493 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:27:10,074 - INFO - Started server process [876355]
2025-05-06 08:27:10,077 - INFO - Waiting for application startup.
2025-05-06 08:27:10,078 - INFO - Application startup complete.
2025-05-06 08:27:12,202 - INFO - Shutting down
2025-05-06 08:27:12,304 - INFO - Waiting for application shutdown.
2025-05-06 08:27:12,305 - INFO - Application shutdown complete.
2025-05-06 08:27:12,306 - INFO - Finished server process [876355]
2025-05-06 08:27:12,365 - INFO - Stopping reloader process [868770]
2025-05-06 08:27:23,215 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:27:23,218 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:27:23,624 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-06 08:27:23,625 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-06 08:27:23,626 - INFO - Started reloader process [876570] using WatchFiles
2025-05-06 08:27:26,871 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:27:26,875 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:27:27,316 - INFO - Started server process [876621]
2025-05-06 08:27:27,318 - INFO - Waiting for application startup.
2025-05-06 08:27:27,319 - INFO - Application startup complete.
2025-05-06 08:27:37,066 - INFO - ('127.0.0.1', 54390) - "WebSocket /ws?password=$2b$12$jg4QEee97WhXKfncjIXY2enw1yGoufGxoa9b7AwzJSNdSu.ZgiCz.&type=tv" [accepted]
2025-05-06 08:27:37,768 - INFO - connection open
2025-05-06 08:32:05,189 - INFO - connection closed
2025-05-06 08:33:55,852 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 08:33:55,931 - INFO - Shutting down
2025-05-06 08:33:56,041 - INFO - Waiting for application shutdown.
2025-05-06 08:33:56,044 - INFO - Application shutdown complete.
2025-05-06 08:33:56,047 - INFO - Finished server process [876621]
2025-05-06 08:34:00,177 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:34:00,186 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:34:00,752 - INFO - Started server process [880937]
2025-05-06 08:34:00,754 - INFO - Waiting for application startup.
2025-05-06 08:34:00,754 - INFO - Application startup complete.
2025-05-06 08:34:56,345 - INFO - Shutting down
2025-05-06 08:34:56,475 - INFO - Waiting for application shutdown.
2025-05-06 08:34:56,485 - INFO - Application shutdown complete.
2025-05-06 08:34:56,486 - INFO - Finished server process [880937]
2025-05-06 08:34:56,576 - INFO - Stopping reloader process [876570]
2025-05-06 08:35:07,100 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:35:07,104 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:35:07,598 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-06 08:35:07,599 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-06 08:35:07,600 - INFO - Started reloader process [881519] using WatchFiles
2025-05-06 08:35:11,602 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:35:11,605 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:35:12,193 - INFO - Started server process [881586]
2025-05-06 08:35:12,195 - INFO - Waiting for application startup.
2025-05-06 08:35:12,196 - INFO - Application startup complete.
2025-05-06 08:35:36,513 - INFO - ('127.0.0.1', 44450) - "WebSocket /ws?password=$2b$12$JcgSsJTbQNtkld4XS1TfuOB5EntiUPwr195uvaSjUzm.8jVgOgY9O&type=tv" [accepted]
2025-05-06 08:35:37,235 - INFO - connection open
2025-05-06 08:35:37,889 - INFO - connection closed
2025-05-06 08:35:37,900 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 196, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 135, in model_training
    metrics = self.model.fit(self.df, freq="D", progress="bar")
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1062, in fit
    metrics_df = self._train(
                 ^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 2741, in _train
    train_loader = self._init_train_loader(df, num_workers)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 2670, in _init_train_loader
    dataset = _create_dataset(
              ^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 616, in _create_dataset
    return time_dataset.GlobalTimeDataset(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/time_dataset.py", line 30, in __init__
    timedatasets = [TimeDataset(df_i, df_name, **kwargs) for df_name, df_i in df.groupby("ID")]
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/time_dataset.py", line 69, in __init__
    self.drop_nan_after_init(df, kwargs["predict_steps"], drop_missing)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/time_dataset.py", line 113, in drop_nan_after_init
    raise ValueError(
ValueError: Inputs/targets with missing values detected. Please either adjust imputation parameters, or set 'drop_missing' to True to drop those samples.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Inputs/targets with missing values detected. Please either adjust imputation parameters, or set 'drop_missing' to True to drop those samples.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-06 08:37:30,160 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 08:37:30,203 - INFO - Shutting down
2025-05-06 08:37:30,310 - INFO - Waiting for application shutdown.
2025-05-06 08:37:30,311 - INFO - Application shutdown complete.
2025-05-06 08:37:30,315 - INFO - Finished server process [881586]
2025-05-06 08:37:34,605 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:37:34,609 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:37:35,181 - INFO - Started server process [882906]
2025-05-06 08:37:35,183 - INFO - Waiting for application startup.
2025-05-06 08:37:35,184 - INFO - Application startup complete.
2025-05-06 08:37:35,216 - INFO - Stopping reloader process [881519]
2025-05-06 08:37:44,868 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:37:44,871 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:37:45,377 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-06 08:37:45,377 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-06 08:37:45,378 - INFO - Started reloader process [883060] using WatchFiles
2025-05-06 08:37:48,756 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:37:48,758 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:37:49,220 - INFO - Started server process [883119]
2025-05-06 08:37:49,222 - INFO - Waiting for application startup.
2025-05-06 08:37:49,222 - INFO - Application startup complete.
2025-05-06 08:38:58,707 - INFO - ('127.0.0.1', 59948) - "WebSocket /ws?password=$2b$12$1oiIb6TbhyUNNfXPLKbf2.j8.wZVtTYGi6rdWFzL/lY2WlFhGTg26&type=tv" [accepted]
2025-05-06 08:38:59,586 - INFO - connection open
2025-05-06 08:41:04,588 - INFO - connection closed
2025-05-06 08:45:52,205 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 08:45:52,267 - INFO - Shutting down
2025-05-06 08:45:52,378 - INFO - Waiting for application shutdown.
2025-05-06 08:45:52,380 - INFO - Application shutdown complete.
2025-05-06 08:45:52,381 - INFO - Finished server process [883119]
2025-05-06 08:45:56,659 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:45:56,661 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:45:57,183 - INFO - Started server process [888163]
2025-05-06 08:45:57,186 - INFO - Waiting for application startup.
2025-05-06 08:45:57,186 - INFO - Application startup complete.
2025-05-06 08:46:07,838 - INFO - Shutting down
2025-05-06 08:46:07,940 - INFO - Waiting for application shutdown.
2025-05-06 08:46:07,946 - INFO - Application shutdown complete.
2025-05-06 08:46:07,947 - INFO - Finished server process [888163]
2025-05-06 08:46:07,992 - INFO - Stopping reloader process [883060]
2025-05-06 08:46:16,802 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:46:16,805 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:46:17,232 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-06 08:46:17,233 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-06 08:46:17,234 - INFO - Started reloader process [888409] using WatchFiles
2025-05-06 08:46:20,625 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:46:20,628 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:46:21,096 - INFO - Started server process [888469]
2025-05-06 08:46:21,098 - INFO - Waiting for application startup.
2025-05-06 08:46:21,099 - INFO - Application startup complete.
2025-05-06 08:47:03,629 - INFO - ('127.0.0.1', 57462) - "WebSocket /ws?password=$2b$12$imvgaM.11aWiAdwiDQeS8.gMdOFCxovG5IMkFCtgVVxFfX.jHoxNm&type=tv" [accepted]
2025-05-06 08:47:04,394 - INFO - connection open
2025-05-06 08:51:23,971 - INFO - connection closed
2025-05-06 08:54:55,333 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 08:54:55,418 - INFO - Shutting down
2025-05-06 08:54:55,524 - INFO - Waiting for application shutdown.
2025-05-06 08:54:55,528 - INFO - Application shutdown complete.
2025-05-06 08:54:55,530 - INFO - Finished server process [888469]
2025-05-06 08:54:59,886 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:54:59,889 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:55:00,409 - INFO - Started server process [893615]
2025-05-06 08:55:00,412 - INFO - Waiting for application startup.
2025-05-06 08:55:00,412 - INFO - Application startup complete.
2025-05-06 08:55:05,231 - INFO - Shutting down
2025-05-06 08:55:05,334 - INFO - Waiting for application shutdown.
2025-05-06 08:55:05,335 - INFO - Application shutdown complete.
2025-05-06 08:55:05,335 - INFO - Finished server process [893615]
2025-05-06 08:55:05,384 - INFO - Stopping reloader process [888409]
2025-05-06 08:55:14,952 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:55:14,955 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:55:15,369 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-06 08:55:15,370 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-06 08:55:15,370 - INFO - Started reloader process [893817] using WatchFiles
2025-05-06 08:55:18,797 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:55:18,799 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 08:55:19,248 - INFO - Started server process [893868]
2025-05-06 08:55:19,250 - INFO - Waiting for application startup.
2025-05-06 08:55:19,251 - INFO - Application startup complete.
2025-05-06 08:56:13,658 - INFO - ('127.0.0.1', 41676) - "WebSocket /ws?password=$2b$12$Bp/wuK5bEjiaOoHMC3M8Cu40l12WaBBpz1fsJmqqPezhpW2Dy1mre&type=tv" [accepted]
2025-05-06 08:56:14,459 - INFO - connection open
2025-05-06 09:00:55,956 - INFO - connection closed
2025-05-06 09:07:48,647 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 09:07:48,687 - INFO - Shutting down
2025-05-06 09:07:48,798 - INFO - Waiting for application shutdown.
2025-05-06 09:07:48,806 - INFO - Application shutdown complete.
2025-05-06 09:07:48,811 - INFO - Finished server process [893868]
2025-05-06 09:07:53,220 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:07:53,226 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:07:53,743 - INFO - Started server process [900767]
2025-05-06 09:07:53,745 - INFO - Waiting for application startup.
2025-05-06 09:07:53,746 - INFO - Application startup complete.
2025-05-06 09:07:53,789 - INFO - Stopping reloader process [893817]
2025-05-06 09:08:02,498 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:08:02,500 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:08:02,960 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-06 09:08:02,961 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-06 09:08:02,961 - INFO - Started reloader process [900903] using WatchFiles
2025-05-06 09:08:06,370 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:08:06,373 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:08:06,833 - INFO - Started server process [900961]
2025-05-06 09:08:06,835 - INFO - Waiting for application startup.
2025-05-06 09:08:06,836 - INFO - Application startup complete.
2025-05-06 09:08:14,803 - INFO - ('127.0.0.1', 50156) - "WebSocket /ws?password=$2b$12$fJl516Ovxoen/xhctivI7uM78MBle/RVGabaYNoA5gL/uK70RJaka&type=tv" [accepted]
2025-05-06 09:08:15,385 - INFO - connection open
2025-05-06 09:08:47,907 - INFO - connection closed
2025-05-06 09:08:47,926 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 208, in model_retrain
    self.model_forecasting()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 166, in model_forecasting
    self.pred = self.model.predict(forecast_df)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/forecaster.py", line 1182, in predict
    fcst = _reshape_raw_predictions_to_forecst_df(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/neuralprophet/data/process.py", line 95, in _reshape_raw_predictions_to_forecst_df
    df_forecast[name] = yhat
    ~~~~~~~~~~~^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/frame.py", line 4311, in __setitem__
    self._set_item(key, value)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/frame.py", line 4524, in _set_item
    value, refs = self._sanitize_column(value)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/frame.py", line 5266, in _sanitize_column
    com.require_length_match(value, self.index)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/pandas/core/common.py", line 573, in require_length_match
    raise ValueError(
ValueError: Length of values (6519) does not match length of index (6517)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Length of values (6519) does not match length of index (6517)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-06 09:15:20,894 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-06 09:15:20,940 - INFO - Shutting down
2025-05-06 09:15:21,065 - INFO - Waiting for application shutdown.
2025-05-06 09:15:21,067 - INFO - Application shutdown complete.
2025-05-06 09:15:21,068 - INFO - Finished server process [900961]
2025-05-06 09:15:25,399 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:15:25,402 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:15:25,881 - INFO - Started server process [904099]
2025-05-06 09:15:25,883 - INFO - Waiting for application startup.
2025-05-06 09:15:25,884 - INFO - Application startup complete.
2025-05-06 09:15:29,547 - INFO - Shutting down
2025-05-06 09:15:29,649 - INFO - Waiting for application shutdown.
2025-05-06 09:15:29,649 - INFO - Application shutdown complete.
2025-05-06 09:15:29,650 - INFO - Finished server process [904099]
2025-05-06 09:15:29,690 - INFO - Stopping reloader process [900903]
2025-05-06 09:15:56,161 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:15:56,164 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:15:56,607 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-06 09:15:56,608 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-06 09:15:56,608 - INFO - Started reloader process [904474] using WatchFiles
2025-05-06 09:15:59,915 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:15:59,918 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-06 09:16:00,395 - INFO - Started server process [904545]
2025-05-06 09:16:00,398 - INFO - Waiting for application startup.
2025-05-06 09:16:00,398 - INFO - Application startup complete.
2025-05-06 09:16:23,295 - INFO - ('127.0.0.1', 49264) - "WebSocket /ws?password=$2b$12$XAUPiDcE7xACxC29yXKQmObWdLEoWYjiY8gocmYRJ9Wr0GPKG8pYK&type=tv" [accepted]
2025-05-06 09:16:23,978 - INFO - connection open
2025-05-06 09:21:02,621 - INFO - connection closed
2025-05-07 01:58:57,046 - INFO - Shutting down
2025-05-07 01:58:57,158 - INFO - Waiting for application shutdown.
2025-05-07 01:58:57,161 - INFO - Application shutdown complete.
2025-05-07 01:58:57,162 - INFO - Finished server process [904545]
2025-05-07 01:58:57,213 - INFO - Stopping reloader process [904474]
2025-05-07 01:59:16,519 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 01:59:16,527 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 01:59:17,022 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 01:59:17,023 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 01:59:17,023 - INFO - Started reloader process [930607] using WatchFiles
2025-05-07 01:59:21,093 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 01:59:21,096 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 01:59:21,616 - INFO - Started server process [930690]
2025-05-07 01:59:21,619 - INFO - Waiting for application startup.
2025-05-07 01:59:21,619 - INFO - Application startup complete.
2025-05-07 02:03:41,084 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 02:03:41,152 - INFO - Shutting down
2025-05-07 02:03:41,266 - INFO - Waiting for application shutdown.
2025-05-07 02:03:41,268 - INFO - Application shutdown complete.
2025-05-07 02:03:41,269 - INFO - Finished server process [930690]
2025-05-07 02:03:45,476 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:03:45,478 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:03:45,951 - INFO - Started server process [932596]
2025-05-07 02:03:45,953 - INFO - Waiting for application startup.
2025-05-07 02:03:45,954 - INFO - Application startup complete.
2025-05-07 02:05:41,893 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 02:05:41,981 - INFO - Shutting down
2025-05-07 02:05:42,091 - INFO - Waiting for application shutdown.
2025-05-07 02:05:42,092 - INFO - Application shutdown complete.
2025-05-07 02:05:42,093 - INFO - Finished server process [932596]
2025-05-07 02:05:47,092 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:05:47,096 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:05:47,768 - INFO - Started server process [933510]
2025-05-07 02:05:47,778 - INFO - Waiting for application startup.
2025-05-07 02:05:47,780 - INFO - Application startup complete.
2025-05-07 02:09:23,651 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-07 02:09:23,734 - INFO - Shutting down
2025-05-07 02:09:23,852 - INFO - Waiting for application shutdown.
2025-05-07 02:09:23,855 - INFO - Application shutdown complete.
2025-05-07 02:09:23,856 - INFO - Finished server process [933510]
2025-05-07 02:09:28,917 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:09:28,922 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:09:29,489 - INFO - Started server process [935151]
2025-05-07 02:09:29,492 - INFO - Waiting for application startup.
2025-05-07 02:09:29,493 - INFO - Application startup complete.
2025-05-07 02:09:54,210 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 02:09:54,287 - INFO - Shutting down
2025-05-07 02:09:54,401 - INFO - Waiting for application shutdown.
2025-05-07 02:09:54,413 - INFO - Application shutdown complete.
2025-05-07 02:09:54,416 - INFO - Finished server process [935151]
2025-05-07 02:09:58,989 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:09:58,991 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:09:59,467 - INFO - Started server process [935458]
2025-05-07 02:09:59,470 - INFO - Waiting for application startup.
2025-05-07 02:09:59,471 - INFO - Application startup complete.
2025-05-07 02:10:01,094 - INFO - Shutting down
2025-05-07 02:10:01,196 - INFO - Waiting for application shutdown.
2025-05-07 02:10:01,196 - INFO - Application shutdown complete.
2025-05-07 02:10:01,197 - INFO - Finished server process [935458]
2025-05-07 02:10:01,231 - INFO - Stopping reloader process [930607]
2025-05-07 02:10:10,448 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:10:10,450 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:10:10,864 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 02:10:10,864 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 02:10:10,865 - INFO - Started reloader process [935641] using WatchFiles
2025-05-07 02:10:15,065 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:10:15,067 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:10:15,628 - INFO - Started server process [935708]
2025-05-07 02:10:15,631 - INFO - Waiting for application startup.
2025-05-07 02:10:15,631 - INFO - Application startup complete.
2025-05-07 02:10:17,744 - INFO - ('127.0.0.1', 39946) - "WebSocket /ws?password=$2b$12$kyq/POuISaDEWiow1qDOX.fwYuwi6ZmIgQYfAYiI46B2wTj4p5hie&type=tv" [accepted]
2025-05-07 02:10:18,365 - INFO - connection open
2025-05-07 02:16:01,429 - INFO - connection closed
2025-05-07 02:22:54,348 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 02:22:54,372 - INFO - Shutting down
2025-05-07 02:22:54,484 - INFO - Waiting for application shutdown.
2025-05-07 02:22:54,487 - INFO - Application shutdown complete.
2025-05-07 02:22:54,491 - INFO - Finished server process [935708]
2025-05-07 02:22:58,692 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:22:58,695 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:22:59,192 - INFO - Started server process [942624]
2025-05-07 02:22:59,194 - INFO - Waiting for application startup.
2025-05-07 02:22:59,194 - INFO - Application startup complete.
2025-05-07 02:26:03,863 - INFO - ('127.0.0.1', 55846) - "WebSocket /ws?password=$2b$12$nQPkAU2amzBPRI0HRd.OzOBv7jkiSJqNqrq.PKKK7SvwjjdLfQ2HC&type=tv" [accepted]
2025-05-07 02:26:04,843 - INFO - connection open
2025-05-07 02:30:40,228 - INFO - connection closed
2025-05-07 02:37:03,793 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 02:37:03,844 - INFO - Shutting down
2025-05-07 02:37:03,964 - INFO - Waiting for application shutdown.
2025-05-07 02:37:03,967 - INFO - Application shutdown complete.
2025-05-07 02:37:03,971 - INFO - Finished server process [942624]
2025-05-07 02:37:08,471 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:37:08,475 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:37:08,972 - INFO - Started server process [949754]
2025-05-07 02:37:08,974 - INFO - Waiting for application startup.
2025-05-07 02:37:08,975 - INFO - Application startup complete.
2025-05-07 02:37:09,016 - INFO - Stopping reloader process [935641]
2025-05-07 02:37:21,218 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:37:21,221 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:37:21,664 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 02:37:21,665 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 02:37:21,665 - INFO - Started reloader process [949955] using WatchFiles
2025-05-07 02:37:25,212 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:37:25,214 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:37:25,679 - INFO - Started server process [950035]
2025-05-07 02:37:25,681 - INFO - Waiting for application startup.
2025-05-07 02:37:25,681 - INFO - Application startup complete.
2025-05-07 02:37:47,470 - INFO - ('127.0.0.1', 59208) - "WebSocket /ws?password=$2b$12$BEqEU/FsR0B4kSXZ3Ajmb.43JgIyLT/u2EUb9zQcwefMIry1KdicW&type=tv" [accepted]
2025-05-07 02:37:48,419 - INFO - connection open
2025-05-07 02:37:48,782 - INFO - connection closed
2025-05-07 02:37:48,793 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/NeuralProphet/main.py", line 190, in model_retrain
    self.model_training()
    ^^^^^^^^^^^^^^^^^^^
AttributeError: 'NeuralProphetModel' object has no attribute 'model_training'. Did you mean: 'model_plotting'?

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'NeuralProphetModel' object has no attribute 'model_training'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 02:40:20,530 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 02:40:20,563 - INFO - Shutting down
2025-05-07 02:40:20,674 - INFO - Waiting for application shutdown.
2025-05-07 02:40:20,677 - INFO - Application shutdown complete.
2025-05-07 02:40:20,679 - INFO - Finished server process [950035]
2025-05-07 02:40:24,859 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:40:24,863 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:40:25,344 - INFO - Started server process [951563]
2025-05-07 02:40:25,347 - INFO - Waiting for application startup.
2025-05-07 02:40:25,347 - INFO - Application startup complete.
2025-05-07 02:40:29,339 - INFO - Shutting down
2025-05-07 02:40:29,444 - INFO - Waiting for application shutdown.
2025-05-07 02:40:29,445 - INFO - Application shutdown complete.
2025-05-07 02:40:29,445 - INFO - Finished server process [951563]
2025-05-07 02:40:29,500 - INFO - Stopping reloader process [949955]
2025-05-07 02:40:38,954 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:40:38,957 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:40:39,433 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 02:40:39,434 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 02:40:39,435 - INFO - Started reloader process [951761] using WatchFiles
2025-05-07 02:40:43,318 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:40:43,320 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:40:43,785 - INFO - Started server process [951819]
2025-05-07 02:40:43,787 - INFO - Waiting for application startup.
2025-05-07 02:40:43,788 - INFO - Application startup complete.
2025-05-07 02:40:50,566 - INFO - ('127.0.0.1', 50412) - "WebSocket /ws?password=$2b$12$SIw4Hvhv9ljXyoatNaBZj.rMri9iy5BVAjsVHa9RCcKHKjn9NeMna&type=tv" [accepted]
2025-05-07 02:40:51,282 - INFO - connection open
2025-05-07 02:42:02,968 - INFO - connection closed
2025-05-07 02:43:06,089 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-07 02:43:06,160 - INFO - Shutting down
2025-05-07 02:43:06,269 - INFO - Waiting for application shutdown.
2025-05-07 02:43:06,275 - INFO - Application shutdown complete.
2025-05-07 02:43:06,278 - INFO - Finished server process [951819]
2025-05-07 02:43:10,421 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:43:10,425 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:43:10,913 - INFO - Started server process [953508]
2025-05-07 02:43:10,916 - INFO - Waiting for application startup.
2025-05-07 02:43:10,917 - INFO - Application startup complete.
2025-05-07 02:43:21,928 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-07 02:43:21,972 - INFO - Shutting down
2025-05-07 02:43:22,076 - INFO - Waiting for application shutdown.
2025-05-07 02:43:22,077 - INFO - Application shutdown complete.
2025-05-07 02:43:22,077 - INFO - Finished server process [953508]
2025-05-07 02:43:25,754 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:43:25,756 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:43:26,349 - INFO - Started server process [953682]
2025-05-07 02:43:26,353 - INFO - Waiting for application startup.
2025-05-07 02:43:26,355 - INFO - Application startup complete.
2025-05-07 02:45:24,448 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 02:45:24,538 - INFO - Shutting down
2025-05-07 02:45:24,663 - INFO - Waiting for application shutdown.
2025-05-07 02:45:24,665 - INFO - Application shutdown complete.
2025-05-07 02:45:24,666 - INFO - Finished server process [953682]
2025-05-07 02:45:29,286 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:45:29,289 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:45:29,753 - INFO - Started server process [954619]
2025-05-07 02:45:29,755 - INFO - Waiting for application startup.
2025-05-07 02:45:29,756 - INFO - Application startup complete.
2025-05-07 02:45:29,796 - INFO - Stopping reloader process [951761]
2025-05-07 02:45:38,324 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:45:38,327 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:45:38,798 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 02:45:38,800 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 02:45:38,801 - INFO - Started reloader process [954756] using WatchFiles
2025-05-07 02:45:42,195 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:45:42,197 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:45:42,640 - INFO - Started server process [954814]
2025-05-07 02:45:42,643 - INFO - Waiting for application startup.
2025-05-07 02:45:42,643 - INFO - Application startup complete.
2025-05-07 02:49:03,067 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 02:49:03,146 - INFO - Shutting down
2025-05-07 02:49:03,259 - INFO - Waiting for application shutdown.
2025-05-07 02:49:03,260 - INFO - Application shutdown complete.
2025-05-07 02:49:03,261 - INFO - Finished server process [954814]
2025-05-07 02:49:07,401 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:49:07,403 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:49:07,935 - INFO - Started server process [956303]
2025-05-07 02:49:07,938 - INFO - Waiting for application startup.
2025-05-07 02:49:07,939 - INFO - Application startup complete.
2025-05-07 02:49:07,975 - INFO - Stopping reloader process [954756]
2025-05-07 02:49:16,417 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:49:16,419 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:49:16,839 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 02:49:16,840 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 02:49:16,841 - INFO - Started reloader process [956448] using WatchFiles
2025-05-07 02:49:20,030 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:49:20,032 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:49:20,510 - INFO - Started server process [956509]
2025-05-07 02:49:20,512 - INFO - Waiting for application startup.
2025-05-07 02:49:20,513 - INFO - Application startup complete.
2025-05-07 02:50:32,168 - INFO - ('127.0.0.1', 48396) - "WebSocket /ws?password=$2b$12$6YP7m2zjM7l1WQuJszvg0O830Go.yEtfHB6d03eSbj4IUJETCdy3y&type=tv" [accepted]
2025-05-07 02:50:33,048 - INFO - connection open
2025-05-07 02:53:57,511 - INFO - connection closed
2025-05-07 02:57:36,972 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 02:57:36,999 - INFO - Shutting down
2025-05-07 02:57:37,112 - INFO - Waiting for application shutdown.
2025-05-07 02:57:37,118 - INFO - Application shutdown complete.
2025-05-07 02:57:37,120 - INFO - Finished server process [956509]
2025-05-07 02:57:41,462 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:57:41,465 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:57:41,993 - INFO - Started server process [961303]
2025-05-07 02:57:41,996 - INFO - Waiting for application startup.
2025-05-07 02:57:41,997 - INFO - Application startup complete.
2025-05-07 02:57:43,946 - INFO - Shutting down
2025-05-07 02:57:44,048 - INFO - Waiting for application shutdown.
2025-05-07 02:57:44,049 - INFO - Application shutdown complete.
2025-05-07 02:57:44,049 - INFO - Finished server process [961303]
2025-05-07 02:57:44,090 - INFO - Stopping reloader process [956448]
2025-05-07 02:57:55,164 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:57:55,167 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:57:55,619 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 02:57:55,620 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 02:57:55,621 - INFO - Started reloader process [961509] using WatchFiles
2025-05-07 02:57:59,115 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:57:59,118 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 02:57:59,593 - INFO - Started server process [961568]
2025-05-07 02:57:59,597 - INFO - Waiting for application startup.
2025-05-07 02:57:59,598 - INFO - Application startup complete.
2025-05-07 03:06:24,114 - INFO - ('127.0.0.1', 45804) - "WebSocket /ws?password=$2b$12$edfBxw7xmFigFmZkjcTb3.lqdXpOAVg7DZRmfSwdKlCW/SJC/OOlm&type=tv" [accepted]
2025-05-07 03:06:25,117 - INFO - connection open
2025-05-07 03:10:39,709 - INFO - connection closed
2025-05-07 03:11:26,201 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 03:11:26,276 - INFO - Shutting down
2025-05-07 03:11:26,392 - INFO - Waiting for application shutdown.
2025-05-07 03:11:26,394 - INFO - Application shutdown complete.
2025-05-07 03:11:26,395 - INFO - Finished server process [961568]
2025-05-07 03:11:30,955 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:11:30,957 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:11:31,420 - INFO - Started server process [965617]
2025-05-07 03:11:31,422 - INFO - Waiting for application startup.
2025-05-07 03:11:31,423 - INFO - Application startup complete.
2025-05-07 03:11:31,456 - INFO - Stopping reloader process [961509]
2025-05-07 03:11:39,789 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:11:39,792 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:11:40,214 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 03:11:40,215 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 03:11:40,216 - INFO - Started reloader process [965774] using WatchFiles
2025-05-07 03:11:43,604 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:11:43,607 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:11:44,106 - INFO - Started server process [965832]
2025-05-07 03:11:44,109 - INFO - Waiting for application startup.
2025-05-07 03:11:44,109 - INFO - Application startup complete.
2025-05-07 03:11:52,514 - INFO - ('127.0.0.1', 47138) - "WebSocket /ws?password=$2b$12$6oSy..r55rUet/9G1pHbBeylrA.ONk29nMmcqppAj9UARgUWgrW4G&type=tv" [accepted]
2025-05-07 03:11:53,177 - INFO - connection open
2025-05-07 03:15:14,617 - INFO - connection closed
2025-05-07 03:17:57,813 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-07 03:17:57,848 - INFO - Shutting down
2025-05-07 03:17:57,956 - INFO - Waiting for application shutdown.
2025-05-07 03:17:57,958 - INFO - Application shutdown complete.
2025-05-07 03:17:57,960 - INFO - Finished server process [965832]
2025-05-07 03:18:01,945 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:18:01,948 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:18:02,470 - INFO - Started server process [969683]
2025-05-07 03:18:02,473 - INFO - Waiting for application startup.
2025-05-07 03:18:02,473 - INFO - Application startup complete.
2025-05-07 03:18:40,079 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 03:18:40,177 - INFO - Shutting down
2025-05-07 03:18:40,282 - INFO - Waiting for application shutdown.
2025-05-07 03:18:40,286 - INFO - Application shutdown complete.
2025-05-07 03:18:40,287 - INFO - Finished server process [969683]
2025-05-07 03:18:44,557 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:18:44,560 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:18:45,063 - INFO - Started server process [970048]
2025-05-07 03:18:45,066 - INFO - Waiting for application startup.
2025-05-07 03:18:45,067 - INFO - Application startup complete.
2025-05-07 03:19:31,339 - WARNING - WatchFiles detected changes in 'model/NeuralProphet/main.py'. Reloading...
2025-05-07 03:19:31,414 - INFO - Shutting down
2025-05-07 03:19:31,518 - INFO - Waiting for application shutdown.
2025-05-07 03:19:31,521 - INFO - Application shutdown complete.
2025-05-07 03:19:31,522 - INFO - Finished server process [970048]
2025-05-07 03:19:35,100 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:19:35,102 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:19:35,508 - INFO - Started server process [970484]
2025-05-07 03:19:35,510 - INFO - Waiting for application startup.
2025-05-07 03:19:35,511 - INFO - Application startup complete.
2025-05-07 03:19:37,862 - INFO - Shutting down
2025-05-07 03:19:37,965 - INFO - Waiting for application shutdown.
2025-05-07 03:19:37,966 - INFO - Application shutdown complete.
2025-05-07 03:19:37,966 - INFO - Finished server process [970484]
2025-05-07 03:19:37,999 - INFO - Stopping reloader process [965774]
2025-05-07 03:19:46,035 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:19:46,038 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:19:46,472 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 03:19:46,474 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 03:19:46,474 - INFO - Started reloader process [970641] using WatchFiles
2025-05-07 03:19:50,217 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:19:50,221 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:19:50,858 - INFO - Started server process [970700]
2025-05-07 03:19:50,862 - INFO - Waiting for application startup.
2025-05-07 03:19:50,864 - INFO - Application startup complete.
2025-05-07 03:19:54,399 - INFO - ('127.0.0.1', 34108) - "WebSocket /ws?password=$2b$12$vXp69bIf3r5qmDQK4Mwxr.2MHMc6.WZlBG.Shk6spAUhW91dUiKBC&type=tv" [accepted]
2025-05-07 03:19:55,009 - INFO - connection open
2025-05-07 03:34:44,741 - INFO - connection closed
2025-05-07 03:35:59,044 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-07 03:35:59,137 - INFO - Shutting down
2025-05-07 03:35:59,249 - INFO - Waiting for application shutdown.
2025-05-07 03:35:59,257 - INFO - Application shutdown complete.
2025-05-07 03:35:59,258 - INFO - Finished server process [970700]
2025-05-07 03:36:06,352 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:36:06,357 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:36:07,148 - INFO - Started server process [977902]
2025-05-07 03:36:07,151 - INFO - Waiting for application startup.
2025-05-07 03:36:07,152 - INFO - Application startup complete.
2025-05-07 03:39:13,050 - WARNING - WatchFiles detected changes in 'model/MLForecast/main.py'. Reloading...
2025-05-07 03:39:13,103 - INFO - Shutting down
2025-05-07 03:39:13,218 - INFO - Waiting for application shutdown.
2025-05-07 03:39:13,229 - INFO - Application shutdown complete.
2025-05-07 03:39:13,229 - INFO - Finished server process [977902]
2025-05-07 03:39:18,707 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:39:18,710 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:39:19,312 - INFO - Started server process [979354]
2025-05-07 03:39:19,317 - INFO - Waiting for application startup.
2025-05-07 03:39:19,318 - INFO - Application startup complete.
2025-05-07 03:39:27,873 - INFO - ('127.0.0.1', 34400) - "WebSocket /ws?password=$2b$12$pism2LLdUlJBJ25YayucEOF56K8z55WCCNMbMmPiZpb4UB83Bf206&type=tv" [accepted]
2025-05-07 03:39:28,955 - INFO - connection open
2025-05-07 03:46:58,882 - INFO - connection closed
2025-05-07 03:47:43,248 - WARNING - WatchFiles detected changes in 'model/MLForecast/main.py'. Reloading...
2025-05-07 03:47:43,308 - INFO - Shutting down
2025-05-07 03:47:43,427 - INFO - Waiting for application shutdown.
2025-05-07 03:47:43,430 - INFO - Application shutdown complete.
2025-05-07 03:47:43,431 - INFO - Finished server process [979354]
2025-05-07 03:47:50,112 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:47:50,122 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:47:50,899 - INFO - Started server process [983419]
2025-05-07 03:47:50,903 - INFO - Waiting for application startup.
2025-05-07 03:47:50,904 - INFO - Application startup complete.
2025-05-07 03:49:04,238 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-07 03:49:04,283 - INFO - Shutting down
2025-05-07 03:49:04,397 - INFO - Waiting for application shutdown.
2025-05-07 03:49:04,405 - INFO - Application shutdown complete.
2025-05-07 03:49:04,408 - INFO - Finished server process [983419]
2025-05-07 03:49:09,590 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:49:09,594 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 03:49:10,178 - INFO - Started server process [984083]
2025-05-07 03:49:10,180 - INFO - Waiting for application startup.
2025-05-07 03:49:10,182 - INFO - Application startup complete.
2025-05-07 03:49:20,101 - INFO - ('127.0.0.1', 48758) - "WebSocket /ws?password=$2b$12$3LK0oCCS5r0y//FGKh4VPuxhfZtlObXVnvKyFk1k2iF3gk1Ma/X7m&type=tv" [accepted]
2025-05-07 03:49:20,868 - INFO - connection open
2025-05-07 03:53:21,612 - INFO - connection closed
2025-05-07 04:09:10,103 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 04:09:10,210 - INFO - Shutting down
2025-05-07 04:09:10,319 - INFO - Waiting for application shutdown.
2025-05-07 04:09:10,324 - INFO - Application shutdown complete.
2025-05-07 04:09:10,328 - INFO - Finished server process [984083]
2025-05-07 04:09:16,381 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:09:16,388 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:09:17,073 - INFO - Started server process [993168]
2025-05-07 04:09:17,076 - INFO - Waiting for application startup.
2025-05-07 04:09:17,077 - INFO - Application startup complete.
2025-05-07 04:09:18,464 - INFO - ('127.0.0.1', 54892) - "WebSocket /ws?password=$2b$12$kz4IJ.3WVPeIpce3gcfJce9/fHnIFPCIBZt7qNH67m196R6GVlcR6&type=tv" [accepted]
2025-05-07 04:09:19,403 - INFO - connection open
2025-05-07 04:09:19,738 - INFO - connection closed
2025-05-07 04:09:19,751 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 207, in model_retrain
    self.models_defined()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 101, in models_defined
    AutoTBATS(
TypeError: AutoTBATS.__init__() got an unexpected keyword argument 'use_box_cox'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: AutoTBATS.__init__() got an unexpected keyword argument 'use_box_cox'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 04:15:03,167 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 04:15:03,265 - INFO - Shutting down
2025-05-07 04:15:03,377 - INFO - Waiting for application shutdown.
2025-05-07 04:15:03,381 - INFO - Application shutdown complete.
2025-05-07 04:15:03,382 - INFO - Finished server process [993168]
2025-05-07 04:15:08,432 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:15:08,436 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:15:08,950 - INFO - Started server process [995842]
2025-05-07 04:15:08,953 - INFO - Waiting for application startup.
2025-05-07 04:15:08,953 - INFO - Application startup complete.
2025-05-07 04:15:09,005 - INFO - Stopping reloader process [970641]
2025-05-07 04:15:19,546 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:15:19,550 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:15:20,110 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 04:15:20,113 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 04:15:20,114 - INFO - Started reloader process [995991] using WatchFiles
2025-05-07 04:15:24,163 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:15:24,166 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:15:24,628 - INFO - Started server process [996066]
2025-05-07 04:15:24,631 - INFO - Waiting for application startup.
2025-05-07 04:15:24,632 - INFO - Application startup complete.
2025-05-07 04:16:28,970 - INFO - ('127.0.0.1', 46788) - "WebSocket /ws?password=$2b$12$edH65xsE167SgvxRC3f.peQUBusAUHsQ5ogX8vSQFdekJlZGKvMkm&type=tv" [accepted]
2025-05-07 04:16:30,137 - INFO - connection open
2025-05-07 04:19:37,299 - INFO - connection closed
2025-05-07 04:27:44,262 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 04:27:44,346 - INFO - Shutting down
2025-05-07 04:27:44,458 - INFO - Waiting for application shutdown.
2025-05-07 04:27:44,462 - INFO - Application shutdown complete.
2025-05-07 04:27:44,464 - INFO - Finished server process [996066]
2025-05-07 04:27:49,313 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:27:49,315 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:27:49,817 - INFO - Started server process [1001769]
2025-05-07 04:27:49,820 - INFO - Waiting for application startup.
2025-05-07 04:27:49,820 - INFO - Application startup complete.
2025-05-07 04:27:49,869 - INFO - Stopping reloader process [995991]
2025-05-07 04:28:00,103 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:28:00,107 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:28:00,719 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 04:28:00,720 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 04:28:00,721 - INFO - Started reloader process [1001925] using WatchFiles
2025-05-07 04:28:06,254 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:28:06,259 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:28:06,843 - INFO - Started server process [1001993]
2025-05-07 04:28:06,847 - INFO - Waiting for application startup.
2025-05-07 04:28:06,848 - INFO - Application startup complete.
2025-05-07 04:28:08,510 - INFO - ('127.0.0.1', 60450) - "WebSocket /ws?password=$2b$12$l4ohEzivc7q/FmNRE1O8D.Wq6Z3NJ62kxHTfV5/IdD9vFRQlYXX0u&type=tv" [accepted]
2025-05-07 04:28:09,160 - INFO - connection open
2025-05-07 04:28:09,488 - INFO - connection closed
2025-05-07 04:28:09,496 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 214, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 127, in model_training
    raise RuntimeError("Model not defined. Call `.models_defined()` first.")
RuntimeError: Model not defined. Call `.models_defined()` first.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Model not defined. Call `.models_defined()` first.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 04:29:39,224 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 04:29:39,303 - INFO - Shutting down
2025-05-07 04:29:39,414 - INFO - Waiting for application shutdown.
2025-05-07 04:29:39,416 - INFO - Application shutdown complete.
2025-05-07 04:29:39,417 - INFO - Finished server process [1001993]
2025-05-07 04:29:44,023 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:29:44,027 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:29:44,545 - INFO - Started server process [1002911]
2025-05-07 04:29:44,548 - INFO - Waiting for application startup.
2025-05-07 04:29:44,548 - INFO - Application startup complete.
2025-05-07 04:29:44,648 - INFO - Shutting down
2025-05-07 04:29:44,749 - INFO - Waiting for application shutdown.
2025-05-07 04:29:44,749 - INFO - Application shutdown complete.
2025-05-07 04:29:44,750 - INFO - Finished server process [1002911]
2025-05-07 04:29:44,809 - INFO - Stopping reloader process [1001925]
2025-05-07 04:29:53,639 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:29:53,641 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:29:54,071 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 04:29:54,072 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 04:29:54,072 - INFO - Started reloader process [1003052] using WatchFiles
2025-05-07 04:29:58,289 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:29:58,293 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:29:58,872 - INFO - Started server process [1003103]
2025-05-07 04:29:58,875 - INFO - Waiting for application startup.
2025-05-07 04:29:58,875 - INFO - Application startup complete.
2025-05-07 04:30:07,374 - INFO - ('127.0.0.1', 41494) - "WebSocket /ws?password=$2b$12$aUmB6V.kHOyCkls0HOr52uvTC33uT9owb3nVuqlxrpJn6E1mobCzm&type=tv" [accepted]
2025-05-07 04:30:08,178 - INFO - connection open
2025-05-07 04:31:10,754 - INFO - connection closed
2025-05-07 04:31:38,393 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 04:31:38,421 - INFO - Shutting down
2025-05-07 04:31:38,528 - INFO - Waiting for application shutdown.
2025-05-07 04:31:38,531 - INFO - Application shutdown complete.
2025-05-07 04:31:38,532 - INFO - Finished server process [1003103]
2025-05-07 04:31:43,568 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:31:43,572 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:31:44,096 - INFO - Started server process [1004238]
2025-05-07 04:31:44,098 - INFO - Waiting for application startup.
2025-05-07 04:31:44,099 - INFO - Application startup complete.
2025-05-07 04:31:46,352 - INFO - Shutting down
2025-05-07 04:31:46,455 - INFO - Waiting for application shutdown.
2025-05-07 04:31:46,458 - INFO - Application shutdown complete.
2025-05-07 04:31:46,460 - INFO - Finished server process [1004238]
2025-05-07 04:31:46,503 - INFO - Stopping reloader process [1003052]
2025-05-07 04:31:56,640 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:31:56,643 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:31:57,148 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 04:31:57,149 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 04:31:57,150 - INFO - Started reloader process [1004435] using WatchFiles
2025-05-07 04:32:00,955 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:32:00,958 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:32:01,443 - INFO - Started server process [1004500]
2025-05-07 04:32:01,445 - INFO - Waiting for application startup.
2025-05-07 04:32:01,446 - INFO - Application startup complete.
2025-05-07 04:32:15,898 - INFO - ('127.0.0.1', 52924) - "WebSocket /ws?password=$2b$12$Gc.e3XoU5QTn6CWTids0g.u/5e0vf0Od1L/1GYtrfAgflXjt3XC0G&type=tv" [accepted]
2025-05-07 04:32:16,568 - INFO - connection open
2025-05-07 04:32:16,893 - INFO - connection closed
2025-05-07 04:32:16,902 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 214, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 127, in model_training
    raise RuntimeError("Model not defined. Call `.models_defined()` first.")
RuntimeError: Model not defined. Call `.models_defined()` first.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: Model not defined. Call `.models_defined()` first.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 04:32:32,860 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 04:32:32,892 - INFO - Shutting down
2025-05-07 04:32:32,994 - INFO - Waiting for application shutdown.
2025-05-07 04:32:32,996 - INFO - Application shutdown complete.
2025-05-07 04:32:32,997 - INFO - Finished server process [1004500]
2025-05-07 04:32:37,626 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:32:37,630 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:32:38,171 - INFO - Started server process [1004995]
2025-05-07 04:32:38,173 - INFO - Waiting for application startup.
2025-05-07 04:32:38,174 - INFO - Application startup complete.
2025-05-07 04:32:46,514 - INFO - ('127.0.0.1', 35564) - "WebSocket /ws?password=$2b$12$XxTCMeWdMnklUyetV.JCueUmQFGey6TjXvLVSd0ADoItjkmR5LTRG&type=tv" [accepted]
2025-05-07 04:32:47,194 - INFO - connection open
2025-05-07 04:32:47,500 - INFO - connection closed
2025-05-07 04:32:47,507 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 207, in model_retrain
    self.models_defined()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 101, in models_defined
    AutoTBATS(
TypeError: AutoTBATS.__init__() got an unexpected keyword argument 'use_box_cox'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: AutoTBATS.__init__() got an unexpected keyword argument 'use_box_cox'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 04:32:56,135 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 04:32:56,219 - INFO - Shutting down
2025-05-07 04:32:56,322 - INFO - Waiting for application shutdown.
2025-05-07 04:32:56,325 - INFO - Application shutdown complete.
2025-05-07 04:32:56,326 - INFO - Finished server process [1004995]
2025-05-07 04:33:01,464 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:33:01,469 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 04:33:02,115 - INFO - Started server process [1005357]
2025-05-07 04:33:02,119 - INFO - Waiting for application startup.
2025-05-07 04:33:02,120 - INFO - Application startup complete.
2025-05-07 04:33:02,745 - INFO - ('127.0.0.1', 38046) - "WebSocket /ws?password=$2b$12$Z9c2xc7R4a0DFlpYrpMAqu3x9k2Xve358qhO6JVzNDvVByn556tFC&type=tv" [accepted]
2025-05-07 04:33:03,377 - INFO - connection open
2025-05-07 04:37:06,551 - INFO - connection closed
2025-05-07 05:06:22,329 - INFO - Shutting down
2025-05-07 05:06:22,439 - INFO - Waiting for application shutdown.
2025-05-07 05:06:22,441 - INFO - Application shutdown complete.
2025-05-07 05:06:22,442 - INFO - Finished server process [1005357]
2025-05-07 05:06:22,546 - INFO - Stopping reloader process [1004435]
2025-05-07 05:06:44,818 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 05:06:44,821 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 05:06:45,326 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 05:06:45,327 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 05:06:45,328 - INFO - Started reloader process [1019813] using WatchFiles
2025-05-07 05:06:49,131 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 05:06:49,133 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 05:06:49,604 - INFO - Started server process [1019879]
2025-05-07 05:06:49,606 - INFO - Waiting for application startup.
2025-05-07 05:06:49,607 - INFO - Application startup complete.
2025-05-07 05:07:04,582 - INFO - ('127.0.0.1', 59090) - "WebSocket /ws?password=$2b$12$mTIbGVw/yyKo.uNjNsvvQOZdfcWGXAoN3Bmk2Jn/GspsfAp6XDx1m&type=tv" [accepted]
2025-05-07 05:07:05,526 - INFO - connection open
2025-05-07 06:13:01,251 - INFO - connection closed
2025-05-07 06:19:13,012 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 06:19:13,113 - INFO - Shutting down
2025-05-07 06:19:13,227 - INFO - Waiting for application shutdown.
2025-05-07 06:19:13,229 - INFO - Application shutdown complete.
2025-05-07 06:19:13,230 - INFO - Finished server process [1019879]
2025-05-07 06:19:22,033 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:19:22,052 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:19:23,152 - INFO - Started server process [1029756]
2025-05-07 06:19:23,155 - INFO - Waiting for application startup.
2025-05-07 06:19:23,156 - INFO - Application startup complete.
2025-05-07 06:19:29,532 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-07 06:19:29,558 - INFO - Shutting down
2025-05-07 06:19:29,660 - INFO - Waiting for application shutdown.
2025-05-07 06:19:29,661 - INFO - Application shutdown complete.
2025-05-07 06:19:29,662 - INFO - Finished server process [1029756]
2025-05-07 06:19:33,455 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:19:33,457 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:19:33,886 - INFO - Started server process [1029974]
2025-05-07 06:19:33,888 - INFO - Waiting for application startup.
2025-05-07 06:19:33,889 - INFO - Application startup complete.
2025-05-07 06:20:15,630 - INFO - ('127.0.0.1', 47284) - "WebSocket /ws?password=$2b$12$229hFJJ8E/1r50o91PGv.uMktYylMbDhdDpKLrmxf9n/dqqs96IWm&type=tv" [accepted]
2025-05-07 06:20:16,786 - INFO - connection open
2025-05-07 06:21:17,100 - INFO - connection closed
2025-05-07 06:26:43,277 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 06:26:43,323 - INFO - Shutting down
2025-05-07 06:26:43,432 - INFO - Waiting for application shutdown.
2025-05-07 06:26:43,440 - INFO - Application shutdown complete.
2025-05-07 06:26:43,441 - INFO - Finished server process [1029974]
2025-05-07 06:26:48,928 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:26:48,932 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:26:49,653 - INFO - Started server process [1033489]
2025-05-07 06:26:49,657 - INFO - Waiting for application startup.
2025-05-07 06:26:49,658 - INFO - Application startup complete.
2025-05-07 06:27:07,987 - INFO - ('127.0.0.1', 50362) - "WebSocket /ws?password=$2b$12$Y2F5NoCS/bp4TM0OGboS6.RYHAIK4.9SWBZ6QZHr2.8EAZYiFGpFm&type=tv" [accepted]
2025-05-07 06:27:09,068 - INFO - connection open
2025-05-07 06:27:44,657 - INFO - connection closed
2025-05-07 06:31:07,111 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 06:31:07,165 - INFO - Shutting down
2025-05-07 06:31:07,276 - INFO - Waiting for application shutdown.
2025-05-07 06:31:07,287 - INFO - Application shutdown complete.
2025-05-07 06:31:07,293 - INFO - Finished server process [1033489]
2025-05-07 06:31:12,134 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:31:12,138 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:31:12,697 - INFO - Started server process [1035790]
2025-05-07 06:31:12,701 - INFO - Waiting for application startup.
2025-05-07 06:31:12,702 - INFO - Application startup complete.
2025-05-07 06:31:47,265 - INFO - ('127.0.0.1', 43700) - "WebSocket /ws?password=$2b$12$zEB0Oj078ESlmb6I0qouqeGzyLXRUfD9LcsrZxiNq5lVRpS.y/WUa&type=tv" [accepted]
2025-05-07 06:31:48,536 - INFO - connection open
2025-05-07 06:31:48,889 - INFO - connection closed
2025-05-07 06:31:48,903 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 237, in model_retrain
    self.models_defined()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 108, in models_defined
    AutoTBATS(
TypeError: AutoTBATS.__init__() got an unexpected keyword argument 'use_box_cox'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: AutoTBATS.__init__() got an unexpected keyword argument 'use_box_cox'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 06:33:35,759 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 06:33:35,847 - INFO - Shutting down
2025-05-07 06:33:35,959 - INFO - Waiting for application shutdown.
2025-05-07 06:33:35,966 - INFO - Application shutdown complete.
2025-05-07 06:33:35,974 - INFO - Finished server process [1035790]
2025-05-07 06:33:40,722 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:33:40,725 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:33:41,246 - INFO - Started server process [1037153]
2025-05-07 06:33:41,249 - INFO - Waiting for application startup.
2025-05-07 06:33:41,250 - INFO - Application startup complete.
2025-05-07 06:33:49,278 - INFO - ('127.0.0.1', 60782) - "WebSocket /ws?password=$2b$12$7kQEn122qA2.FyLmYb63W.rgi8WNAnAeK5vr/aCG4o/XV/gTExEy2&type=tv" [accepted]
2025-05-07 06:33:50,118 - INFO - connection open
2025-05-07 06:35:07,305 - INFO - connection closed
2025-05-07 06:46:11,548 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 06:46:11,622 - INFO - Shutting down
2025-05-07 06:46:11,735 - INFO - Waiting for application shutdown.
2025-05-07 06:46:11,738 - INFO - Application shutdown complete.
2025-05-07 06:46:11,739 - INFO - Finished server process [1037153]
2025-05-07 06:46:16,275 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:46:16,278 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:46:16,781 - INFO - Started server process [1042161]
2025-05-07 06:46:16,783 - INFO - Waiting for application startup.
2025-05-07 06:46:16,783 - INFO - Application startup complete.
2025-05-07 06:46:32,371 - INFO - ('127.0.0.1', 57390) - "WebSocket /ws?password=$2b$12$es9z2XcGtPg66NS6zRirN.L6tufQ7vnX/PH/tgpYNgP7B0RNNmFLW&type=tv" [accepted]
2025-05-07 06:46:33,498 - INFO - connection open
2025-05-07 06:47:51,754 - INFO - connection closed
2025-05-07 06:50:17,919 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 06:50:18,018 - INFO - Shutting down
2025-05-07 06:50:18,133 - INFO - Waiting for application shutdown.
2025-05-07 06:50:18,135 - INFO - Application shutdown complete.
2025-05-07 06:50:18,136 - INFO - Finished server process [1042161]
2025-05-07 06:50:22,527 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:50:22,530 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:50:23,034 - INFO - Started server process [1044323]
2025-05-07 06:50:23,035 - INFO - Waiting for application startup.
2025-05-07 06:50:23,036 - INFO - Application startup complete.
2025-05-07 06:53:07,090 - INFO - ('127.0.0.1', 47464) - "WebSocket /ws?password=$2b$12$37jdJrYoJvTPWAL4OSPAIeBlUpHya0MDkECkF1yYXN3NTV9rTX2pC&type=tv" [accepted]
2025-05-07 06:53:08,258 - INFO - connection open
2025-05-07 06:54:25,443 - INFO - connection closed
2025-05-07 06:54:25,489 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 194, in forecast
    res_i = model.forecast(
            ^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 1044, in forecast
    mod = auto_ces(y, m=self.season_length, model=self.model)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ces.py", line 747, in auto_ces
    raise ValueError("Invalid model type")
ValueError: Invalid model type

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 172, in model_training
    forecast_df = self.predictor.forecast(
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 1535, in forecast
    return super().forecast(
           ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 864, in forecast
    res_fcsts = self.ga.forecast(
                ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 199, in forecast
    res_i = fallback_model.forecast(
            ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 787, in forecast
    mod = ets_f(
          ^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ets.py", line 922, in ets_f
    raise Exception("no model able to be fitted")
Exception: no model able to be fitted

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 194, in forecast
    res_i = model.forecast(
            ^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 1044, in forecast
    mod = auto_ces(y, m=self.season_length, model=self.model)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ces.py", line 747, in auto_ces
    raise ValueError("Invalid model type")
ValueError: Invalid model type

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 243, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 182, in model_training
    forecast_df = self.predictor.forecast(
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 1535, in forecast
    return super().forecast(
           ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 864, in forecast
    res_fcsts = self.ga.forecast(
                ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 199, in forecast
    res_i = fallback_model.forecast(
            ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 787, in forecast
    mod = ets_f(
          ^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ets.py", line 922, in ets_f
    raise Exception("no model able to be fitted")
Exception: no model able to be fitted

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: no model able to be fitted

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 06:56:15,423 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 06:56:15,512 - INFO - Shutting down
2025-05-07 06:56:15,624 - INFO - Waiting for application shutdown.
2025-05-07 06:56:15,633 - INFO - Application shutdown complete.
2025-05-07 06:56:15,634 - INFO - Finished server process [1044323]
2025-05-07 06:56:20,194 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:56:20,197 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:56:20,681 - INFO - Started server process [1047352]
2025-05-07 06:56:20,683 - INFO - Waiting for application startup.
2025-05-07 06:56:20,684 - INFO - Application startup complete.
2025-05-07 06:56:29,978 - INFO - ('127.0.0.1', 49324) - "WebSocket /ws?password=$2b$12$7UsaxR0qcFvXzJ0Gn.rcdO0ZcrqWSVn8JMtFxBqtSbUdmEG4QkHoK&type=tv" [accepted]
2025-05-07 06:56:30,649 - INFO - connection open
2025-05-07 06:56:30,963 - INFO - connection closed
2025-05-07 06:56:30,970 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 209, in model_retrain
    self.models_defined()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 108, in models_defined
    season_length=season_length,
                  ^^^^^^^^^^^^^
NameError: name 'season_length' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: name 'season_length' is not defined

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 06:58:45,990 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 06:58:46,067 - INFO - Shutting down
2025-05-07 06:58:46,188 - INFO - Waiting for application shutdown.
2025-05-07 06:58:46,190 - INFO - Application shutdown complete.
2025-05-07 06:58:46,190 - INFO - Finished server process [1047352]
2025-05-07 06:58:50,860 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:58:50,863 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:58:51,332 - INFO - Started server process [1048657]
2025-05-07 06:58:51,335 - INFO - Waiting for application startup.
2025-05-07 06:58:51,336 - INFO - Application startup complete.
2025-05-07 06:58:58,021 - INFO - Shutting down
2025-05-07 06:58:58,126 - INFO - Waiting for application shutdown.
2025-05-07 06:58:58,127 - INFO - Application shutdown complete.
2025-05-07 06:58:58,127 - INFO - Finished server process [1048657]
2025-05-07 06:58:58,197 - INFO - Stopping reloader process [1019813]
2025-05-07 06:59:07,364 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:59:07,367 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:59:07,863 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 06:59:07,864 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 06:59:07,865 - INFO - Started reloader process [1048885] using WatchFiles
2025-05-07 06:59:12,424 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:59:12,429 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 06:59:12,999 - INFO - Started server process [1048952]
2025-05-07 06:59:13,002 - INFO - Waiting for application startup.
2025-05-07 06:59:13,002 - INFO - Application startup complete.
2025-05-07 06:59:25,894 - INFO - ('127.0.0.1', 44686) - "WebSocket /ws?password=$2b$12$1GpjUvo7cRze2m3Pzbf/BenGRwlOnOGmamuvOvDGWMGsXXp5eMoDy&type=tv" [accepted]
2025-05-07 06:59:26,530 - INFO - connection open
2025-05-07 07:01:01,144 - INFO - connection closed
2025-05-07 07:04:48,102 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 07:04:48,185 - INFO - Shutting down
2025-05-07 07:04:48,307 - INFO - Waiting for application shutdown.
2025-05-07 07:04:48,317 - INFO - Application shutdown complete.
2025-05-07 07:04:48,319 - INFO - Finished server process [1048952]
2025-05-07 07:04:53,543 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:04:53,548 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:04:54,319 - INFO - Started server process [1051626]
2025-05-07 07:04:54,323 - INFO - Waiting for application startup.
2025-05-07 07:04:54,323 - INFO - Application startup complete.
2025-05-07 07:04:58,645 - INFO - ('127.0.0.1', 58364) - "WebSocket /ws?password=$2b$12$22S7aJpj.h6AQk2cjPprN....HCxxKvMW7SnNLx.z5DGkvHl.iRLm&type=tv" [accepted]
2025-05-07 07:04:59,392 - INFO - connection open
2025-05-07 07:06:23,283 - INFO - connection closed
2025-05-07 07:07:01,686 - INFO - ('127.0.0.1', 54878) - "WebSocket /ws?password=$2b$12$zAROi7m/Reokk5ACho2x1evwbvjDtHka7ejHSXplcGON3jTekFJ/.&type=tv" [accepted]
2025-05-07 07:07:02,731 - INFO - connection open
2025-05-07 07:08:29,700 - INFO - connection closed
2025-05-07 07:10:16,252 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 07:10:16,272 - INFO - Shutting down
2025-05-07 07:10:16,388 - INFO - Waiting for application shutdown.
2025-05-07 07:10:16,393 - INFO - Application shutdown complete.
2025-05-07 07:10:16,394 - INFO - Finished server process [1051626]
2025-05-07 07:10:21,351 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:10:21,354 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:10:21,998 - INFO - Started server process [1054664]
2025-05-07 07:10:22,005 - INFO - Waiting for application startup.
2025-05-07 07:10:22,006 - INFO - Application startup complete.
2025-05-07 07:10:30,898 - INFO - ('127.0.0.1', 41112) - "WebSocket /ws?password=$2b$12$tD0M/4uPqpobEbU.HM85reUoOpIZZSfp8W5Krtb4jra7yFEglTsXK&type=tv" [accepted]
2025-05-07 07:10:31,926 - INFO - connection open
2025-05-07 07:12:04,237 - INFO - connection closed
2025-05-07 07:12:04,276 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 194, in forecast
    res_i = model.forecast(
            ^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 1044, in forecast
    mod = auto_ces(y, m=self.season_length, model=self.model)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ces.py", line 747, in auto_ces
    raise ValueError("Invalid model type")
ValueError: Invalid model type

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 175, in model_training
    forecast_df = self.predictor.forecast(
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 1535, in forecast
    return super().forecast(
           ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 864, in forecast
    res_fcsts = self.ga.forecast(
                ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 199, in forecast
    res_i = fallback_model.forecast(
            ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 787, in forecast
    mod = ets_f(
          ^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ets.py", line 922, in ets_f
    raise Exception("no model able to be fitted")
Exception: no model able to be fitted

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 194, in forecast
    res_i = model.forecast(
            ^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 1044, in forecast
    mod = auto_ces(y, m=self.season_length, model=self.model)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ces.py", line 747, in auto_ces
    raise ValueError("Invalid model type")
ValueError: Invalid model type

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 246, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 185, in model_training
    forecast_df = self.predictor.forecast(
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 1535, in forecast
    return super().forecast(
           ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 864, in forecast
    res_fcsts = self.ga.forecast(
                ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 199, in forecast
    res_i = fallback_model.forecast(
            ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 787, in forecast
    mod = ets_f(
          ^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ets.py", line 922, in ets_f
    raise Exception("no model able to be fitted")
Exception: no model able to be fitted

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: no model able to be fitted

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 07:13:53,530 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 07:13:53,599 - INFO - Shutting down
2025-05-07 07:13:53,712 - INFO - Waiting for application shutdown.
2025-05-07 07:13:53,717 - INFO - Application shutdown complete.
2025-05-07 07:13:53,722 - INFO - Finished server process [1054664]
2025-05-07 07:13:58,377 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:13:58,381 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:13:58,962 - INFO - Started server process [1056604]
2025-05-07 07:13:58,966 - INFO - Waiting for application startup.
2025-05-07 07:13:58,967 - INFO - Application startup complete.
2025-05-07 07:14:06,024 - INFO - ('127.0.0.1', 51056) - "WebSocket /ws?password=$2b$12$hnfzZYerKfCLM/cPbOe6GuV/O890sZXy0/E6jZ7eU8t68vyH2KFXi&type=tv" [accepted]
2025-05-07 07:14:07,139 - INFO - connection open
2025-05-07 07:15:32,267 - INFO - connection closed
2025-05-07 07:15:32,325 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 194, in forecast
    res_i = model.forecast(
            ^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 1044, in forecast
    mod = auto_ces(y, m=self.season_length, model=self.model)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ces.py", line 747, in auto_ces
    raise ValueError("Invalid model type")
ValueError: Invalid model type

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 175, in model_training
    forecast_df = self.predictor.forecast(
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 1535, in forecast
    return super().forecast(
           ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 864, in forecast
    res_fcsts = self.ga.forecast(
                ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 199, in forecast
    res_i = fallback_model.forecast(
            ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 787, in forecast
    mod = ets_f(
          ^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ets.py", line 922, in ets_f
    raise Exception("no model able to be fitted")
Exception: no model able to be fitted

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 194, in forecast
    res_i = model.forecast(
            ^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 1044, in forecast
    mod = auto_ces(y, m=self.season_length, model=self.model)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ces.py", line 747, in auto_ces
    raise ValueError("Invalid model type")
ValueError: Invalid model type

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 246, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 185, in model_training
    forecast_df = self.predictor.forecast(
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 1535, in forecast
    return super().forecast(
           ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 864, in forecast
    res_fcsts = self.ga.forecast(
                ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 199, in forecast
    res_i = fallback_model.forecast(
            ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/models.py", line 787, in forecast
    mod = ets_f(
          ^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/ets.py", line 922, in ets_f
    raise Exception("no model able to be fitted")
Exception: no model able to be fitted

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: no model able to be fitted

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 07:18:07,410 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 07:18:07,450 - INFO - Shutting down
2025-05-07 07:18:07,562 - INFO - Waiting for application shutdown.
2025-05-07 07:18:07,564 - INFO - Application shutdown complete.
2025-05-07 07:18:07,565 - INFO - Finished server process [1056604]
2025-05-07 07:18:13,236 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:18:13,240 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:18:13,913 - INFO - Started server process [1058775]
2025-05-07 07:18:13,920 - INFO - Waiting for application startup.
2025-05-07 07:18:13,923 - INFO - Application startup complete.
2025-05-07 07:18:15,050 - INFO - ('127.0.0.1', 47140) - "WebSocket /ws?password=$2b$12$.9l/8pwxU13nkdMn6hOpd.1ky95NGtpXOo1llCAS9PG.cu6Pg8hee&type=tv" [accepted]
2025-05-07 07:18:15,736 - INFO - connection open
2025-05-07 07:18:16,072 - INFO - connection closed
2025-05-07 07:18:16,082 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 149, in model_training
    forecast_df = self.predictor.forecast(
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 1535, in forecast
    return super().forecast(
           ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 856, in forecast
    self._prepare_fit(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 582, in _prepare_fit
    df = ensure_time_dtype(df, time_col)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/utilsforecast/validation.py", line 50, in ensure_time_dtype
    times = df[time_col]
            ~~^^^^^^^^^^
TypeError: 'NoneType' object is not subscriptable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 83, in websocket_endpoint
    service.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/main.py", line 79, in model_training
    model.model_retrain()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 220, in model_retrain
    self.model_training()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/model/StatsForecast/main.py", line 159, in model_training
    forecast_df = self.predictor.forecast(
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 1535, in forecast
    return super().forecast(
           ^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 856, in forecast
    self._prepare_fit(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/statsforecast/core.py", line 582, in _prepare_fit
    df = ensure_time_dtype(df, time_col)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/utilsforecast/validation.py", line 50, in ensure_time_dtype
    times = df[time_col]
            ~~^^^^^^^^^^
TypeError: 'NoneType' object is not subscriptable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 383, in app
    await dependant.call(**solved_result.values)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core/main.py", line 89, in websocket_endpoint
    raise HTTPException(status_code=500, detail=str(e))
fastapi.exceptions.HTTPException: 500: 'NoneType' object is not subscriptable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 63, in wrapped_app
    await response(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/responses.py", line 150, in __call__
    await send(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 39, in sender
    await send(message)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 359, in asgi_send
    raise RuntimeError(msg % message_type)
RuntimeError: Unexpected ASGI message 'websocket.http.response.start', after sending 'websocket.close' or response already completed.
2025-05-07 07:20:04,118 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 07:20:04,202 - INFO - Shutting down
2025-05-07 07:20:04,311 - INFO - Waiting for application shutdown.
2025-05-07 07:20:04,313 - INFO - Application shutdown complete.
2025-05-07 07:20:04,315 - INFO - Finished server process [1058775]
2025-05-07 07:20:08,671 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:20:08,675 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:20:09,214 - INFO - Started server process [1059781]
2025-05-07 07:20:09,217 - INFO - Waiting for application startup.
2025-05-07 07:20:09,218 - INFO - Application startup complete.
2025-05-07 07:20:19,371 - INFO - ('127.0.0.1', 39458) - "WebSocket /ws?password=$2b$12$0EKu98Crn24zrjT5PQ3YVeDWC/ZdiZDEytkC4y7x0Io5vIjwtIKM2&type=tv" [accepted]
2025-05-07 07:20:20,164 - INFO - connection open
2025-05-07 07:21:38,848 - INFO - connection closed
2025-05-07 07:24:39,493 - WARNING - WatchFiles detected changes in 'model/StatsForecast/main.py'. Reloading...
2025-05-07 07:24:39,511 - INFO - Shutting down
2025-05-07 07:24:39,621 - INFO - Waiting for application shutdown.
2025-05-07 07:24:39,627 - INFO - Application shutdown complete.
2025-05-07 07:24:39,630 - INFO - Finished server process [1059781]
2025-05-07 07:24:43,876 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:24:43,879 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:24:44,413 - INFO - Started server process [1062095]
2025-05-07 07:24:44,415 - INFO - Waiting for application startup.
2025-05-07 07:24:44,416 - INFO - Application startup complete.
2025-05-07 07:24:54,305 - INFO - ('127.0.0.1', 54200) - "WebSocket /ws?password=$2b$12$aLAlMrU8xSLU/uqnVhP7cunlXNbhRJPTZvDnDSl8ynJ8f/4mVMQh6&type=tv" [accepted]
2025-05-07 07:24:55,047 - INFO - connection open
2025-05-07 07:26:12,802 - INFO - connection closed
2025-05-07 07:26:49,067 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-07 07:26:49,105 - INFO - Shutting down
2025-05-07 07:26:49,212 - INFO - Waiting for application shutdown.
2025-05-07 07:26:49,214 - INFO - Application shutdown complete.
2025-05-07 07:26:49,215 - INFO - Finished server process [1062095]
2025-05-07 07:26:53,637 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:26:53,641 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:26:54,277 - INFO - Started server process [1063362]
2025-05-07 07:26:54,281 - INFO - Waiting for application startup.
2025-05-07 07:26:54,282 - INFO - Application startup complete.
2025-05-07 07:27:06,607 - INFO - ('127.0.0.1', 56880) - "WebSocket /ws?password=$2b$12$5r4Qtq/v10Ywgo5YVSZ3gusSrUKtruPSmMyr/zLaNpEnzkj8.lAXu&type=tv" [accepted]
2025-05-07 07:27:07,493 - INFO - connection open
2025-05-07 07:37:12,532 - INFO - connection closed
2025-05-07 07:58:42,554 - WARNING - WatchFiles detected changes in 'model/MLForecast/main.py'. Reloading...
2025-05-07 07:58:42,649 - INFO - Shutting down
2025-05-07 07:58:42,767 - INFO - Waiting for application shutdown.
2025-05-07 07:58:42,780 - INFO - Application shutdown complete.
2025-05-07 07:58:42,781 - INFO - Finished server process [1063362]
2025-05-07 07:58:51,458 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:58:51,477 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:58:52,222 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-07 07:58:52,356 - INFO - Started server process [1079002]
2025-05-07 07:58:52,359 - INFO - Waiting for application startup.
2025-05-07 07:58:52,361 - INFO - Application startup complete.
2025-05-07 07:58:56,540 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:58:56,543 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 07:58:57,072 - INFO - Started server process [1079135]
2025-05-07 07:58:57,076 - INFO - Waiting for application startup.
2025-05-07 07:58:57,077 - INFO - Application startup complete.
2025-05-07 07:59:11,654 - INFO - ('127.0.0.1', 35462) - "WebSocket /ws?password=$2b$12$Xc3B/ACtdkQb3DCzNjy1w.XnuG44wFb.TqjhDM0EN2vArWz0yHvLG&type=tv" [accepted]
2025-05-07 07:59:12,801 - INFO - connection open
2025-05-07 08:04:16,791 - INFO - connection closed
2025-05-07 08:04:56,013 - WARNING - WatchFiles detected changes in 'model/MLForecast/main.py'. Reloading...
2025-05-07 08:04:56,064 - INFO - Shutting down
2025-05-07 08:04:56,173 - INFO - Waiting for application shutdown.
2025-05-07 08:04:56,177 - INFO - Application shutdown complete.
2025-05-07 08:04:56,178 - INFO - Finished server process [1079135]
2025-05-07 08:05:01,126 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 08:05:01,129 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 08:05:01,650 - INFO - Started server process [1082132]
2025-05-07 08:05:01,655 - INFO - Waiting for application startup.
2025-05-07 08:05:01,656 - INFO - Application startup complete.
2025-05-07 08:05:11,724 - INFO - ('127.0.0.1', 52752) - "WebSocket /ws?password=$2b$12$6kx7xrE4law/JmQGyllZeuMjUM3Cp1ZQI.VR7SnNue9qxiAHPWJ0i&type=tv" [accepted]
2025-05-07 08:05:12,711 - INFO - connection open
2025-05-07 08:09:59,809 - INFO - connection closed
2025-05-07 08:31:04,813 - INFO - ('127.0.0.1', 53934) - "WebSocket /ws?password=$2b$12$H3mWG14fBQLCkOCJDrOoA.kVhANhlxj/H1cU8tbE7l3h3/b7J22K.&type=tv" [accepted]
2025-05-07 08:31:05,778 - INFO - connection open
2025-05-07 08:36:38,120 - INFO - connection closed
2025-05-07 08:40:04,855 - INFO - ('127.0.0.1', 38310) - "WebSocket /ws?password=$2b$12$pIeC8XULlRDphGn66U9ReewYjTwPYnlNXghltz3H6m4faxd/aSfWa&type=tv" [accepted]
2025-05-07 08:40:05,683 - INFO - connection open
2025-05-07 08:43:10,619 - WARNING - WatchFiles detected changes in 'model/main.py'. Reloading...
2025-05-07 08:52:10,172 - INFO - connection closed
2025-05-07 08:52:10,177 - INFO - Shutting down
2025-05-07 08:52:10,863 - INFO - Finished server process [1082132]
2025-05-07 08:52:10,886 - ERROR - Traceback (most recent call last):
  File "/usr/lib/python3.12/asyncio/runners.py", line 194, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/runners.py", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "uvloop/loop.pyx", line 1512, in uvloop.loop.Loop.run_until_complete
  File "uvloop/loop.pyx", line 1505, in uvloop.loop.Loop.run_until_complete
  File "uvloop/loop.pyx", line 1379, in uvloop.loop.Loop.run_forever
  File "uvloop/loop.pyx", line 557, in uvloop.loop.Loop._run
  File "uvloop/loop.pyx", line 476, in uvloop.loop.Loop._on_idle
  File "uvloop/cbhandles.pyx", line 83, in uvloop.loop.Handle._run
  File "uvloop/cbhandles.pyx", line 63, in uvloop.loop.Handle._run
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/server.py", line 69, in serve
    with self.capture_signals():
  File "/usr/lib/python3.12/contextlib.py", line 144, in __exit__
    next(self.gen)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/server.py", line 330, in capture_signals
    signal.raise_signal(captured_signal)
  File "/usr/lib/python3.12/asyncio/runners.py", line 157, in _on_sigint
    raise KeyboardInterrupt()
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 699, in lifespan
    await receive()
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/lifespan/on.py", line 137, in receive
    return await self.receive_queue.get()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/queues.py", line 158, in get
    await getter
asyncio.exceptions.CancelledError

2025-05-07 08:52:10,892 - ERROR - Exception in ASGI application
Traceback (most recent call last):
  File "/usr/lib/python3.12/asyncio/runners.py", line 194, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/runners.py", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "uvloop/loop.pyx", line 1512, in uvloop.loop.Loop.run_until_complete
  File "uvloop/loop.pyx", line 1505, in uvloop.loop.Loop.run_until_complete
  File "uvloop/loop.pyx", line 1379, in uvloop.loop.Loop.run_forever
  File "uvloop/loop.pyx", line 557, in uvloop.loop.Loop._run
  File "uvloop/loop.pyx", line 476, in uvloop.loop.Loop._on_idle
  File "uvloop/cbhandles.pyx", line 83, in uvloop.loop.Handle._run
  File "uvloop/cbhandles.pyx", line 63, in uvloop.loop.Handle._run
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/server.py", line 69, in serve
    with self.capture_signals():
  File "/usr/lib/python3.12/contextlib.py", line 144, in __exit__
    next(self.gen)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/server.py", line 330, in capture_signals
    signal.raise_signal(captured_signal)
  File "/usr/lib/python3.12/asyncio/runners.py", line 157, in _on_sigint
    raise KeyboardInterrupt()
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 243, in run_asgi
    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    await super().__call__(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/applications.py", line 112, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/errors.py", line 152, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/base.py", line 100, in __call__
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 714, in __call__
    await self.middleware_stack(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 734, in app
    await route.handle(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 362, in handle
    await self.app(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 95, in app
    await wrap_app_handling_exceptions(app, session)(scope, receive, send)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
    await app(scope, receive, sender)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/starlette/routing.py", line 93, in app
    await func(session)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/routing.py", line 366, in app
    async with AsyncExitStack() as async_exit_stack:
  File "/usr/lib/python3.12/contextlib.py", line 754, in __aexit__
    raise exc_details[1]
  File "/usr/lib/python3.12/contextlib.py", line 737, in __aexit__
    cb_suppress = await cb(*exc_details)
                  ^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/contextlib.py", line 217, in __aexit__
    await anext(self.gen)
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/fastapi/concurrency.py", line 37, in contextmanager_in_threadpool
    await anyio.to_thread.run_sync(
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/anyio/to_thread.py", line 56, in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/venv_core/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 2470, in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
asyncio.exceptions.CancelledError
2025-05-07 08:52:12,829 - INFO - Stopping reloader process [1048885]
2025-05-07 08:53:26,752 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 08:53:26,764 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 08:53:27,513 - INFO - Will watch for changes in these directories: ['/home/manhhai01/Desktop/dev/deploy_3/hdbank-research-model_service-c9279bfc573f/core']
2025-05-07 08:53:27,514 - INFO - Uvicorn running on http://127.0.0.1:8001 (Press CTRL+C to quit)
2025-05-07 08:53:27,515 - INFO - Started reloader process [1104320] using WatchFiles
2025-05-07 08:53:32,209 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 08:53:32,212 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 08:53:32,757 - INFO - Started server process [1104423]
2025-05-07 08:53:32,760 - INFO - Waiting for application startup.
2025-05-07 08:53:32,761 - INFO - Application startup complete.
2025-05-07 08:54:23,456 - INFO - ('127.0.0.1', 45548) - "WebSocket /ws?password=$2b$12$1qCA/RduXQyxiRN2J3Tx7OM2EfKBJk/4ayCCvPXF9eJOogAshhtRC&type=tv" [accepted]
2025-05-07 08:54:24,580 - INFO - connection open
2025-05-07 09:04:15,365 - INFO - connection closed
2025-05-07 09:06:39,201 - INFO - Shutting down
2025-05-07 09:06:39,315 - INFO - Waiting for application shutdown.
2025-05-07 09:06:39,331 - INFO - Application shutdown complete.
2025-05-07 09:06:39,337 - INFO - Finished server process [1104423]
2025-05-07 09:06:39,551 - INFO - Stopping reloader process [1104320]
2025-05-07 09:41:39,434 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 09:41:39,434 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 09:41:39,434 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 09:41:39,434 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 09:41:39,444 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 09:41:39,444 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 09:41:39,444 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 09:41:39,444 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:20:46,366 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:20:46,366 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:20:46,366 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:20:46,366 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:20:46,386 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:20:46,386 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:20:46,386 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:20:46,386 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:21:33,668 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:21:33,669 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:21:33,671 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:21:33,672 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:21:33,683 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:21:33,685 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:21:33,807 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-07 11:21:33,811 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-08 02:02:47,787 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-08 02:02:47,791 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-08 02:32:50,212 - ERROR - Importing plotly failed. Interactive plots will not work.
2025-05-08 02:32:50,221 - ERROR - Importing plotly failed. Interactive plots will not work.
